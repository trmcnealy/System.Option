using System;
using System.Collections.Generic;
using System.Configuration;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace System.Option.UnitTests2
{
    public sealed class ClangFlags
    {
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private ClangFlags(ushort value) { Value = value; }
        public ushort Value { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get; [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] set; }

        private static readonly ClangFlags DriverOptionType = new ClangFlags((1 << 4));
        public static ClangFlags DriverOption { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return DriverOptionType; } }

        private static readonly ClangFlags LinkerInputType = new ClangFlags((1 << 5));
        public static ClangFlags LinkerInput { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return LinkerInputType; } }

        private static readonly ClangFlags NoArgumentUnusedType = new ClangFlags((1 << 6));
        public static ClangFlags NoArgumentUnused { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return NoArgumentUnusedType; } }

        private static readonly ClangFlags UnsupportedType = new ClangFlags((1 << 7));
        public static ClangFlags Unsupported { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return UnsupportedType; } }

        private static readonly ClangFlags CoreOptionType = new ClangFlags((1 << 8));
        public static ClangFlags CoreOption { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return CoreOptionType; } }

        private static readonly ClangFlags CLOptionType = new ClangFlags((1 << 9));
        public static ClangFlags CLOption { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return CLOptionType; } }

        private static readonly ClangFlags CC1OptionType = new ClangFlags((1 << 10));
        public static ClangFlags CC1Option { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return CC1OptionType; } }

        private static readonly ClangFlags CC1AsOptionType = new ClangFlags((1 << 11));
        public static ClangFlags CC1AsOption { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return CC1AsOptionType; } }

        private static readonly ClangFlags NoDriverOptionType = new ClangFlags((1 << 12));
        public static ClangFlags NoDriverOption { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return NoDriverOptionType; } }

        private static readonly ClangFlags IgnoredType = new ClangFlags((1 << 13));
        public static ClangFlags Ignored { [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)] get { return IgnoredType; } }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator ushort(ClangFlags clangflags)
        {
            return clangflags.Value;
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static implicit operator ClangFlags(ushort value)
        {
            return new ClangFlags(value);
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ClangFlags operator ~(ClangFlags left) { return (ushort)(~left.Value); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ClangFlags operator <<(ClangFlags left, int right) { return (ushort)(left.Value << right); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ClangFlags operator >>(ClangFlags left, int right) { return (ushort)(left.Value >> right); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ClangFlags operator ^(ClangFlags left, ClangFlags right) { return (ushort)(left.Value ^ right.Value); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ClangFlags operator &(ClangFlags left, ClangFlags right) { return (ushort)(left.Value & right.Value); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static ClangFlags operator |(ClangFlags left, ClangFlags right) { return (ushort)(left.Value | right.Value); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public bool Equals(ClangFlags other) { if (ReferenceEquals(null, other)) { return false; } if (ReferenceEquals(this, other)) { return true; } return Value == other.Value; }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override bool Equals(object obj) { if (ReferenceEquals(null, obj)) { return false; } if (ReferenceEquals(this, obj)) { return true; } return obj is ClangFlags && Equals((ClangFlags)obj); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return Value.GetHashCode(); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(ClangFlags left, ClangFlags right) { return Equals(left, right); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(ClangFlags left, ushort right) { return left?.Value == right; }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(ushort left, ClangFlags right) { return left == right?.Value; }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(ClangFlags left, ClangFlags right) { return !Equals(left, right); }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(ClangFlags left, ushort right) { return left?.Value != right; }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(ushort left, ClangFlags right) { return left != right?.Value; }
    }

    public static class OPT_ID
    {
        public const int OPT_INVALID = 0; // This is not an option ID.
        public const int OPT_Action_Group = 1;
        public const int OPT_CompileOnly_Group = 2;
        public const int OPT_DebugInfo_Group = 3;
        public const int OPT_Diag_Group = 4;
        public const int OPT_I_Group = 5;
        public const int OPT_IncludePath_Group = 6;
        public const int OPT_Link_Group = 7;
        public const int OPT_M_Group = 8;
        public const int OPT_O_Group = 9;
        public const int OPT_Preprocessor_Group = 10;
        public const int OPT_R_Group = 11;
        public const int OPT_R_value_Group = 12;
        public const int OPT_StaticAnalyzer_Group = 13;
        public const int OPT_T_Group = 14;
        public const int OPT_W_Group = 15;
        public const int OPT_W_value_Group = 16;
        public const int OPT__SLASH_M_Group = 17;
        public const int OPT__SLASH_volatile_Group = 18;
        public const int OPT_cl_Group = 19;
        public const int OPT_cl_compile_Group = 20;
        public const int OPT_cl_ignored_Group = 21;
        public const int OPT_clang_i_Group = 22;
        public const int OPT_clang_ignored_f_Group = 23;
        public const int OPT_clang_ignored_gcc_optimization_f_Group = 24;
        public const int OPT_clang_ignored_legacy_options_Group = 25;
        public const int OPT_clang_ignored_m_Group = 26;
        public const int OPT_d_Group = 27;
        public const int OPT_f_Group = 28;
        public const int OPT_f_clang_Group = 29;
        public const int OPT_gN_Group = 30;
        public const int OPT_gTune_Group = 31;
        public const int OPT_g_Group = 32;
        public const int OPT_g_flags_Group = 33;
        public const int OPT_gfortran_Group = 34;
        public const int OPT_ggdbN_Group = 35;
        public const int OPT_i_Group = 36;
        public const int OPT_internal_Group = 37;
        public const int OPT_internal_debug_Group = 38;
        public const int OPT_internal_driver_Group = 39;
        public const int OPT_m_Group = 40;
        public const int OPT_m_aarch64_Features_Group = 41;
        public const int OPT_m_amdgpu_Features_Group = 42;
        public const int OPT_m_arm_Features_Group = 43;
        public const int OPT_m_hexagon_Features_Group = 44;
        public const int OPT_m_hexagon_Features_HVX_Group = 45;
        public const int OPT_m_libc_Group = 46;
        public const int OPT_m_ppc_Features_Group = 47;
        public const int OPT_m_wasm_Features_Group = 48;
        public const int OPT_m_x86_Features_Group = 49;
        public const int OPT_opencl_Group = 50;
        public const int OPT_pedantic_Group = 51;
        public const int OPT_reserved_lib_Group = 52;
        public const int OPT_u_Group = 53;
        public const int OPT_INPUT = 54;
        public const int OPT_UNKNOWN = 55;
        public const int OPT__HASH_HASH_HASH = 56;
        public const int OPT__SLASH_QUESTION = 57;
        public const int OPT_A_DASH = 58;
        public const int OPT_add_plugin = 59;
        public const int OPT__SLASH_AI = 60;
        public const int OPT__all_warnings = 61;
        public const int OPT_all__load = 62;
        public const int OPT_allowable__client = 63;
        public const int OPT__analyze_auto = 64;
        public const int OPT_analyze_function_EQ = 65;
        public const int OPT_analyze_function = 66;
        public const int OPT__SLASH_analyze_ = 67;
        public const int OPT_analyzer_checker_help = 68;
        public const int OPT_analyzer_checker_EQ = 69;
        public const int OPT_analyzer_checker = 70;
        public const int OPT_analyzer_config = 71;
        public const int OPT_analyzer_constraints_EQ = 72;
        public const int OPT_analyzer_constraints = 73;
        public const int OPT_analyzer_disable_all_checks = 74;
        public const int OPT_analyzer_disable_checker_EQ = 75;
        public const int OPT_analyzer_disable_checker = 76;
        public const int OPT_analyzer_disable_retry_exhausted = 77;
        public const int OPT_analyzer_display_progress = 78;
        public const int OPT_analyzer_eagerly_assume = 79;
        public const int OPT_analyzer_inline_max_stack_depth_EQ = 80;
        public const int OPT_analyzer_inline_max_stack_depth = 81;
        public const int OPT_analyzer_inlining_mode_EQ = 82;
        public const int OPT_analyzer_inlining_mode = 83;
        public const int OPT_analyzer_list_enabled_checkers = 84;
        public const int OPT_analyzer_max_loop = 85;
        public const int OPT__analyzer_no_default_checks = 86;
        public const int OPT_analyzer_opt_analyze_headers = 87;
        public const int OPT_analyzer_opt_analyze_nested_blocks = 88;
        public const int OPT_analyzer_output_EQ = 89;
        public const int OPT__analyzer_output = 90;
        public const int OPT_analyzer_output = 91;
        public const int OPT_analyzer_purge_EQ = 92;
        public const int OPT_analyzer_purge = 93;
        public const int OPT_analyzer_stats = 94;
        public const int OPT_analyzer_store_EQ = 95;
        public const int OPT_analyzer_store = 96;
        public const int OPT_analyzer_viz_egraph_graphviz = 97;
        public const int OPT_analyzer_viz_egraph_ubigraph = 98;
        public const int OPT__analyze = 99;
        public const int OPT_analyze = 100;
        public const int OPT_ansi = 101;
        public const int OPT_arange_sections = 102;
        public const int OPT__SLASH_arch = 103;
        public const int OPT_arch__errors__fatal = 104;
        public const int OPT_arch__only = 105;
        public const int OPT_arch = 106;
        public const int OPT_arcmt_check = 107;
        public const int OPT_arcmt_migrate_emit_arc_errors = 108;
        public const int OPT_arcmt_migrate_report_output = 109;
        public const int OPT_arcmt_migrate = 110;
        public const int OPT_arcmt_modify = 111;
        public const int OPT__assemble = 112;
        public const int OPT__assert_EQ = 113;
        public const int OPT__assert = 114;
        public const int OPT_ast_dump_all = 115;
        public const int OPT_ast_dump_filter = 116;
        public const int OPT_ast_dump_lookups = 117;
        public const int OPT_ast_dump = 118;
        public const int OPT_ast_list = 119;
        public const int OPT_ast_merge = 120;
        public const int OPT_ast_print = 121;
        public const int OPT_ast_view = 122;
        public const int OPT_autocomplete = 123;
        public const int OPT_aux_triple = 124;
        public const int OPT_A = 125;
        public const int OPT_a = 126;
        public const int OPT_backend_option = 127;
        public const int OPT__SLASH_bigobj = 128;
        public const int OPT_bind__at__load = 129;
        public const int OPT__bootclasspath_EQ = 130;
        public const int OPT__bootclasspath = 131;
        public const int OPT__SLASH_Brepro_ = 132;
        public const int OPT__SLASH_Brepro = 133;
        public const int OPT__SLASH_Bt_plus = 134;
        public const int OPT__SLASH_Bt = 135;
        public const int OPT_bundle__loader = 136;
        public const int OPT_bundle = 137;
        public const int OPT_B = 138;
        public const int OPT_b = 139;
        public const int OPT_c_isystem = 140;
        public const int OPT_cc1as = 141;
        public const int OPT_cc1 = 142;
        public const int OPT_ccc_arcmt_check = 143;
        public const int OPT_ccc_arcmt_migrate = 144;
        public const int OPT_ccc_arcmt_modify = 145;
        public const int OPT_ccc_gcc_name = 146;
        public const int OPT_ccc_install_dir = 147;
        public const int OPT_ccc_objcmt_migrate = 148;
        public const int OPT_ccc_pch_is_pch = 149;
        public const int OPT_ccc_pch_is_pth = 150;
        public const int OPT_ccc_print_bindings = 151;
        public const int OPT_ccc_print_phases = 152;
        public const int OPT_ccc_ = 153;
        public const int OPT_CC = 154;
        public const int OPT_analysis_CFGAddImplicitDtors = 155;
        public const int OPT_cfguard = 156;
        public const int OPT__SLASH_cgthreads = 157;
        public const int OPT_chain_include = 158;
        public const int OPT_cl_denorms_are_zero = 159;
        public const int OPT_cl_ext_EQ = 160;
        public const int OPT_cl_fast_relaxed_math = 161;
        public const int OPT_cl_finite_math_only = 162;
        public const int OPT_cl_fp32_correctly_rounded_divide_sqrt = 163;
        public const int OPT_cl_kernel_arg_info = 164;
        public const int OPT_cl_mad_enable = 165;
        public const int OPT_cl_no_signed_zeros = 166;
        public const int OPT_cl_opt_disable = 167;
        public const int OPT_cl_single_precision_constant = 168;
        public const int OPT_cl_std_EQ = 169;
        public const int OPT_cl_strict_aliasing = 170;
        public const int OPT_cl_uniform_work_group_size = 171;
        public const int OPT_cl_unsafe_math_optimizations = 172;
        public const int OPT__CLASSPATH_EQ = 173;
        public const int OPT__classpath_EQ = 174;
        public const int OPT__CLASSPATH = 175;
        public const int OPT__classpath = 176;
        public const int OPT_client__name = 177;
        public const int OPT__SLASH_clr = 178;
        public const int OPT_code_completion_at_EQ = 179;
        public const int OPT_code_completion_at = 180;
        public const int OPT_code_completion_brief_comments = 181;
        public const int OPT_code_completion_macros = 182;
        public const int OPT_code_completion_patterns = 183;
        public const int OPT_combine = 184;
        public const int OPT__comments_in_macros = 185;
        public const int OPT__comments = 186;
        public const int OPT_compatibility__version = 187;
        public const int OPT__compile = 188;
        public const int OPT_compress_debug_sections_EQ = 189;
        public const int OPT_compress_debug_sections = 190;
        public const int OPT_config_system_dir_EQ = 191;
        public const int OPT_config_user_dir_EQ = 192;
        public const int OPT_config = 193;
        public const int OPT__constant_cfstrings = 194;
        public const int OPT_coverage_cfg_checksum = 195;
        public const int OPT_coverage_data_file_EQ = 196;
        public const int OPT_coverage_data_file = 197;
        public const int OPT_coverage_exit_block_before_body = 198;
        public const int OPT_coverage_no_function_names_in_data = 199;
        public const int OPT_coverage_notes_file_EQ = 200;
        public const int OPT_coverage_notes_file = 201;
        public const int OPT_coverage_version_EQ = 202;
        public const int OPT_coverage = 203;
        public const int OPT_cpp_precomp = 204;
        public const int OPT_cpp = 205;
        public const int OPT_cuda_compile_host_device = 206;
        public const int OPT_cuda_device_only = 207;
        public const int OPT_cuda_gpu_arch_EQ = 208;
        public const int OPT_cuda_host_only = 209;
        public const int OPT_cuda_noopt_device_debug = 210;
        public const int OPT_cuda_path_ignore_env = 211;
        public const int OPT_cuda_path_EQ = 212;
        public const int OPT_current__version = 213;
        public const int OPT_cxx_isystem = 214;
        public const int OPT_C = 215;
        public const int OPT__SLASH_C = 216;
        public const int OPT_c = 217;
        public const int OPT__SLASH_c = 218;
        public const int OPT__SLASH_d1PP = 219;
        public const int OPT__SLASH_d1reportAllClassLayout = 220;
        public const int OPT__SLASH_d2FastFail = 221;
        public const int OPT__SLASH_d2Zi_PLUS = 222;
        public const int OPT_dA = 223;
        public const int OPT_dD = 224;
        public const int OPT_dead__strip = 225;
        public const int OPT_debug_forward_template_params = 226;
        public const int OPT_debug_info_kind_EQ = 227;
        public const int OPT_debug_info_macro = 228;
        public const int OPT__debug_EQ = 229;
        public const int OPT_debugger_tuning_EQ = 230;
        public const int OPT__debug = 231;
        public const int OPT__define_macro_EQ = 232;
        public const int OPT__define_macro = 233;
        public const int OPT_defsym = 234;
        public const int OPT__dependencies = 235;
        public const int OPT_dependency_dot = 236;
        public const int OPT_dependency_file = 237;
        public const int OPT_dependent_lib = 238;
        public const int OPT_detailed_preprocessing_record = 239;
        public const int OPT_diagnostic_log_file = 240;
        public const int OPT__SLASH_diagnostics_caret = 241;
        public const int OPT__SLASH_diagnostics_classic = 242;
        public const int OPT__SLASH_diagnostics_column = 243;
        public const int OPT_disable_free = 244;
        public const int OPT_disable_lifetimemarkers = 245;
        public const int OPT_disable_llvm_optzns = 246;
        public const int OPT_disable_llvm_passes = 247;
        public const int OPT_disable_llvm_verifier = 248;
        public const int OPT_disable_O0_optnone = 249;
        public const int OPT_disable_objc_default_synthesize_properties = 250;
        public const int OPT_disable_red_zone = 251;
        public const int OPT_discard_value_names = 252;
        public const int OPT_dI = 253;
        public const int OPT_dM = 254;
        public const int OPT__SLASH_doc = 255;
        public const int OPT_driver_mode = 256;
        public const int OPT_dump_coverage_mapping = 257;
        public const int OPT_dump_deserialized_pch_decls = 258;
        public const int OPT_dump_raw_tokens = 259;
        public const int OPT_dump_tokens = 260;
        public const int OPT_dumpmachine = 261;
        public const int OPT_dumpspecs = 262;
        public const int OPT_dumpversion = 263;
        public const int OPT_dwarf_column_info = 264;
        public const int OPT_dwarf_debug_flags = 265;
        public const int OPT_dwarf_debug_producer = 266;
        public const int OPT_dwarf_explicit_import = 267;
        public const int OPT_dwarf_ext_refs = 268;
        public const int OPT_dwarf_version_EQ = 269;
        public const int OPT__dyld_prefix_EQ = 270;
        public const int OPT__dyld_prefix = 271;
        public const int OPT_dylib__file = 272;
        public const int OPT_dylinker__install__name = 273;
        public const int OPT_dylinker = 274;
        public const int OPT_dynamiclib = 275;
        public const int OPT_dynamic = 276;
        public const int OPT_D = 277;
        public const int OPT__SLASH_D = 278;
        public const int OPT_d_Flag = 279;
        public const int OPT_d_Joined = 280;
        public const int OPT_EB = 281;
        public const int OPT__SLASH_EH = 282;
        public const int OPT_EL = 283;
        public const int OPT_emit_ast = 284;
        public const int OPT_emit_codegen_only = 285;
        public const int OPT_emit_html = 286;
        public const int OPT_emit_llvm_bc = 287;
        public const int OPT_emit_llvm_only = 288;
        public const int OPT_emit_llvm_uselists = 289;
        public const int OPT_emit_llvm = 290;
        public const int OPT_emit_module_interface = 291;
        public const int OPT_emit_module = 292;
        public const int OPT_emit_obj = 293;
        public const int OPT_emit_pch = 294;
        public const int OPT_emit_pth = 295;
        public const int OPT_enable_split_dwarf = 296;
        public const int OPT__encoding_EQ = 297;
        public const int OPT__encoding = 298;
        public const int OPT__entry = 299;
        public const int OPT_Eonly = 300;
        public const int OPT__SLASH_EP = 301;
        public const int OPT_error_on_deserialized_pch_decl_EQ = 302;
        public const int OPT_error_on_deserialized_pch_decl = 303;
        public const int OPT__SLASH_errorReport = 304;
        public const int OPT__SLASH_execution_charset = 305;
        public const int OPT_exported__symbols__list = 306;
        public const int OPT__extdirs_EQ = 307;
        public const int OPT__extdirs = 308;
        public const int OPT__extra_warnings = 309;
        public const int OPT_E = 310;
        public const int OPT__SLASH_E = 311;
        public const int OPT_e = 312;
        public const int OPT_faccess_control = 313;
        public const int OPT_faddress_space_map_mangling_EQ = 314;
        public const int OPT_aggressive_function_elimination_f = 315;
        public const int OPT_align_commons_f = 316;
        public const int OPT_falign_functions_EQ = 317;
        public const int OPT_align_functions_f = 318;
        public const int OPT_falign_jumps_EQ = 319;
        public const int OPT_align_jumps_f = 320;
        public const int OPT_falign_labels_EQ = 321;
        public const int OPT_align_labels_f = 322;
        public const int OPT_falign_loops_EQ = 323;
        public const int OPT_align_loops_f = 324;
        public const int OPT_aligned_alloc_unavailable = 325;
        public const int OPT_faligned_allocation = 326;
        public const int OPT_faligned_new_EQ = 327;
        public const int OPT_anonymous_14 = 328;
        public const int OPT_all_intrinsics_f = 329;
        public const int OPT__SLASH_fallback = 330;
        public const int OPT_fallow_editor_placeholders = 331;
        public const int OPT_fallow_half_arguments_and_returns = 332;
        public const int OPT_fallow_pch_with_errors = 333;
        public const int OPT_fallow_unsupported = 334;
        public const int OPT_faltivec = 335;
        public const int OPT_fansi_escape_codes = 336;
        public const int OPT_fapple_kext = 337;
        public const int OPT_fapple_pragma_pack = 338;
        public const int OPT_fapplication_extension = 339;
        public const int OPT_fasm_blocks = 340;
        public const int OPT_fasm = 341;
        public const int OPT_fassociative_math = 342;
        public const int OPT_fassume_sane_operator_new = 343;
        public const int OPT_fastcp = 344;
        public const int OPT_fastf = 345;
        public const int OPT_fast = 346;
        public const int OPT_fasynchronous_unwind_tables = 347;
        public const int OPT_fauto_profile_accurate = 348;
        public const int OPT_fauto_profile_EQ = 349;
        public const int OPT_fauto_profile = 350;
        public const int OPT_fautolink = 351;
        public const int OPT_automatic_f = 352;
        public const int OPT__SLASH_favor = 353;
        public const int OPT__SLASH_FA = 354;
        public const int OPT__SLASH_FA_joined = 355;
        public const int OPT__SLASH_Fa = 356;
        public const int OPT_backslash_f = 357;
        public const int OPT_backtrace_f = 358;
        public const int OPT_fblas_matmul_limit_EQ = 359;
        public const int OPT_fblocks_runtime_optional = 360;
        public const int OPT_fblocks = 361;
        public const int OPT_fbootclasspath_EQ = 362;
        public const int OPT_fborland_extensions = 363;
        public const int OPT_bounds_check_f = 364;
        public const int OPT_fbracket_depth_EQ = 365;
        public const int OPT_fbracket_depth = 366;
        public const int OPT_branch_count_reg_f = 367;
        public const int OPT_fbuild_session_file = 368;
        public const int OPT_fbuild_session_timestamp = 369;
        public const int OPT_fbuiltin_module_map = 370;
        public const int OPT_fbuiltin = 371;
        public const int OPT_caller_saves_f = 372;
        public const int OPT_fcaret_diagnostics_max_lines = 373;
        public const int OPT_fcaret_diagnostics = 374;
        public const int OPT_fcf_protection_EQ = 375;
        public const int OPT_fcf_protection = 376;
        public const int OPT_check_array_temporaries_f = 377;
        public const int OPT_fcheck_new_f = 378;
        public const int OPT_fcheck_EQ = 379;
        public const int OPT_fclang_abi_compat_EQ = 380;
        public const int OPT_fclasspath_EQ = 381;
        public const int OPT_fcoarray_EQ = 382;
        public const int OPT_fcolor_diagnostics = 383;
        public const int OPT_fcomment_block_commands = 384;
        public const int OPT_fcommon = 385;
        public const int OPT_fcompile_resource_EQ = 386;
        public const int OPT_fconcepts_ts = 387;
        public const int OPT_fconst_strings = 388;
        public const int OPT_fconstant_cfstrings = 389;
        public const int OPT_fconstant_string_class_EQ = 390;
        public const int OPT_fconstant_string_class = 391;
        public const int OPT_fconstexpr_backtrace_limit_EQ = 392;
        public const int OPT_fconstexpr_backtrace_limit = 393;
        public const int OPT_fconstexpr_depth_EQ = 394;
        public const int OPT_fconstexpr_depth = 395;
        public const int OPT_fconstexpr_steps_EQ = 396;
        public const int OPT_fconstexpr_steps = 397;
        public const int OPT_fconvert_EQ = 398;
        public const int OPT_fcoroutines_ts = 399;
        public const int OPT_fcoverage_mapping = 400;
        public const int OPT_cray_pointer_f = 401;
        public const int OPT_fcreate_profile = 402;
        public const int OPT_fcuda_allow_variadic_functions = 403;
        public const int OPT_fcuda_approx_transcendentals = 404;
        public const int OPT_fcuda_flush_denormals_to_zero = 405;
        public const int OPT_fcuda_include_gpubinary = 406;
        public const int OPT_fcuda_is_device = 407;
        public const int OPT_fcuda_rdc = 408;
        public const int OPT_fcxx_exceptions = 409;
        public const int OPT_fcxx_modules = 410;
        public const int OPT__SLASH_FC = 411;
        public const int OPT_d_lines_as_code_f = 412;
        public const int OPT_d_lines_as_comments_f = 413;
        public const int OPT_fdata_sections = 414;
        public const int OPT_fdebug_compilation_dir = 415;
        public const int OPT_fdebug_info_for_profiling = 416;
        public const int OPT_fdebug_macro = 417;
        public const int OPT_fdebug_pass_arguments = 418;
        public const int OPT_fdebug_pass_manager = 419;
        public const int OPT_fdebug_pass_structure = 420;
        public const int OPT_fdebug_prefix_map_EQ = 421;
        public const int OPT_fdebug_types_section = 422;
        public const int OPT_fdebugger_cast_result_to_id = 423;
        public const int OPT_fdebugger_objc_literal = 424;
        public const int OPT_fdebugger_support = 425;
        public const int OPT_fdeclspec = 426;
        public const int OPT_fdefault_calling_conv_EQ = 427;
        public const int OPT_default_double_8_f = 428;
        public const int OPT_default_inline_f = 429;
        public const int OPT_default_integer_8_f = 430;
        public const int OPT_default_real_8_f = 431;
        public const int OPT_anonymous_6 = 432;
        public const int OPT_fdelayed_template_parsing = 433;
        public const int OPT_delete_null_pointer_checks_f = 434;
        public const int OPT_fdenormal_fp_math_EQ = 435;
        public const int OPT_fdepfile_entry = 436;
        public const int OPT_fdeprecated_macro = 437;
        public const int OPT_devirtualize_speculatively_f = 438;
        public const int OPT_devirtualize_f = 439;
        public const int OPT_fdiagnostics_absolute_paths = 440;
        public const int OPT_fdiagnostics_color_EQ = 441;
        public const int OPT_fdiagnostics_color = 442;
        public const int OPT_fdiagnostics_fixit_info = 443;
        public const int OPT_fdiagnostics_format_EQ = 444;
        public const int OPT_fdiagnostics_format = 445;
        public const int OPT_fdiagnostics_hotness_threshold_EQ = 446;
        public const int OPT_fdiagnostics_parseable_fixits = 447;
        public const int OPT_fdiagnostics_print_source_range_info = 448;
        public const int OPT_fdiagnostics_show_category_EQ = 449;
        public const int OPT_fdiagnostics_show_category = 450;
        public const int OPT_fdiagnostics_show_hotness = 451;
        public const int OPT_fdiagnostics_show_location_EQ = 452;
        public const int OPT_fdiagnostics_show_note_include_stack = 453;
        public const int OPT_fdiagnostics_show_option = 454;
        public const int OPT_fdiagnostics_show_template_tree = 455;
        public const int OPT_fdisable_module_hash = 456;
        public const int OPT_fdiscard_value_names = 457;
        public const int OPT_dollar_ok_f = 458;
        public const int OPT_fdollars_in_identifiers = 459;
        public const int OPT_fdouble_square_bracket_attributes = 460;
        public const int OPT_dump_fortran_optimized_f = 461;
        public const int OPT_dump_fortran_original_f = 462;
        public const int OPT_dump_parse_tree_f = 463;
        public const int OPT_fdump_record_layouts_simple = 464;
        public const int OPT_fdump_record_layouts = 465;
        public const int OPT_fdump_vtable_layouts = 466;
        public const int OPT_fdwarf_directory_asm = 467;
        public const int OPT_fdwarf_exceptions = 468;
        public const int OPT_fdwarf2_cfi_asm = 469;
        public const int OPT__SLASH_Fd = 470;
        public const int OPT_felide_constructors = 471;
        public const int OPT_feliminate_unused_debug_symbols = 472;
        public const int OPT_eliminate_unused_debug_types_f = 473;
        public const int OPT_fembed_bitcode_marker = 474;
        public const int OPT_fembed_bitcode_EQ = 475;
        public const int OPT_fembed_bitcode = 476;
        public const int OPT_femit_all_decls = 477;
        public const int OPT_femit_coverage_data = 478;
        public const int OPT_femit_coverage_notes = 479;
        public const int OPT_femulated_tls = 480;
        public const int OPT_fencode_extended_block_signature = 481;
        public const int OPT_fencoding_EQ = 482;
        public const int OPT_ferror_limit_EQ = 483;
        public const int OPT_ferror_limit = 484;
        public const int OPT_fescaping_block_tail_calls = 485;
        public const int OPT_fexceptions = 486;
        public const int OPT_fexcess_precision_EQ = 487;
        public const int OPT_fexec_charset_EQ = 488;
        public const int OPT_anonymous_4 = 489;
        public const int OPT_fexperimental_isel = 490;
        public const int OPT_fexperimental_new_pass_manager = 491;
        public const int OPT_fextdirs_EQ = 492;
        public const int OPT_anonymous_8 = 493;
        public const int OPT_external_blas_f = 494;
        public const int OPT_fexternc_nounwind = 495;
        public const int OPT__SLASH_Fe = 496;
        public const int OPT_f2c_f = 497;
        public const int OPT_ffake_address_space_map = 498;
        public const int OPT_ffast_math = 499;
        public const int OPT_fat_lto_objects_f = 500;
        public const int OPT_ffine_grained_bitfield_accesses = 501;
        public const int OPT_ffinite_math_only = 502;
        public const int OPT_fixed_form_f = 503;
        public const int OPT_ffixed_line_length_VALUE = 504;
        public const int OPT_ffixed_r19 = 505;
        public const int OPT_ffixed_r9 = 506;
        public const int OPT_ffixed_x18 = 507;
        public const int OPT_float_store_f = 508;
        public const int OPT_ffor_scope = 509;
        public const int OPT_fforbid_guard_variables = 510;
        public const int OPT_force_addr = 511;
        public const int OPT_fforce_enable_int128 = 512;
        public const int OPT_ffp_contract = 513;
        public const int OPT_ffpe_trap_EQ = 514;
        public const int OPT_free_form_f = 515;
        public const int OPT_ffree_line_length_VALUE = 516;
        public const int OPT_ffreestanding = 517;
        public const int OPT_friend_injection_f = 518;
        public const int OPT_frontend_optimize_f = 519;
        public const int OPT_function_attribute_list_f = 520;
        public const int OPT_ffunction_sections = 521;
        public const int OPT_gcse_after_reload_f = 522;
        public const int OPT_gcse_las_f = 523;
        public const int OPT_gcse_sm_f = 524;
        public const int OPT_gcse_f = 525;
        public const int OPT_fgnu_inline_asm = 526;
        public const int OPT_fgnu_keywords = 527;
        public const int OPT_fgnu_runtime = 528;
        public const int OPT_fgnu89_inline = 529;
        public const int OPT_gnu_f = 530;
        public const int OPT_fheinous_gnu_extensions = 531;
        public const int OPT_anonymous_10 = 532;
        public const int OPT_fhonor_infinities = 533;
        public const int OPT_fhonor_nans = 534;
        public const int OPT_fhosted = 535;
        public const int OPT_ident_f = 536;
        public const int OPT_filelist = 537;
        public const int OPT_filetype = 538;
        public const int OPT_implement_inlines_f = 539;
        public const int OPT_fimplicit_module_maps = 540;
        public const int OPT_fimplicit_modules = 541;
        public const int OPT_implicit_none_f = 542;
        public const int OPT_implicit_templates_f = 543;
        public const int OPT_finclude_default_header = 544;
        public const int OPT_find_pch_source_EQ = 545;
        public const int OPT_anonymous_12 = 546;
        public const int OPT_finit_character_EQ = 547;
        public const int OPT_finit_integer_EQ = 548;
        public const int OPT_init_local_zero_f = 549;
        public const int OPT_finit_logical_EQ = 550;
        public const int OPT_finit_real_EQ = 551;
        public const int OPT_inline_functions_called_once_f = 552;
        public const int OPT_finline_functions = 553;
        public const int OPT_finline_hint_functions = 554;
        public const int OPT_finline_limit_EQ = 555;
        public const int OPT_finline_limit_f = 556;
        public const int OPT_inline_small_functions_f = 557;
        public const int OPT_finline = 558;
        public const int OPT_finput_charset_EQ = 559;
        public const int OPT_finstrument_function_entry_bare = 560;
        public const int OPT_finstrument_functions_after_inlining = 561;
        public const int OPT_finstrument_functions = 562;
        public const int OPT_integer_4_integer_8_f = 563;
        public const int OPT_fintegrated_as = 564;
        public const int OPT_intrinsic_modules_path_f = 565;
        public const int OPT_ipa_cp_f = 566;
        public const int OPT_ivopts_f = 567;
        public const int OPT_fix_only_warnings = 568;
        public const int OPT_fix_what_you_can = 569;
        public const int OPT_fixit_recompile = 570;
        public const int OPT_fixit_to_temp = 571;
        public const int OPT_fixit_EQ = 572;
        public const int OPT_fixit = 573;
        public const int OPT__SLASH_FI = 574;
        public const int OPT__SLASH_Fi = 575;
        public const int OPT_fjump_tables = 576;
        public const int OPT_anonymous_26_f = 577;
        public const int OPT_flat__namespace = 578;
        public const int OPT_flax_vector_conversions = 579;
        public const int OPT_flimit_debug_info = 580;
        public const int OPT_flimited_precision_EQ = 581;
        public const int OPT_flto_jobs_EQ = 582;
        public const int OPT_flto_unit = 583;
        public const int OPT_flto_visibility_public_std = 584;
        public const int OPT_flto_EQ = 585;
        public const int OPT_flto = 586;
        public const int OPT_fmacro_backtrace_limit_EQ = 587;
        public const int OPT_fmacro_backtrace_limit = 588;
        public const int OPT_fmath_errno = 589;
        public const int OPT_fmax_array_constructor_EQ = 590;
        public const int OPT_fmax_errors_EQ = 591;
        public const int OPT_max_identifier_length_f = 592;
        public const int OPT_fmax_stack_var_size_EQ = 593;
        public const int OPT_fmax_subrecord_length_EQ = 594;
        public const int OPT_fmax_type_align_EQ = 595;
        public const int OPT_fmerge_all_constants = 596;
        public const int OPT_merge_constants_f = 597;
        public const int OPT_fmerge_functions = 598;
        public const int OPT_fmessage_length_EQ = 599;
        public const int OPT_fmessage_length = 600;
        public const int OPT_fmodule_feature = 601;
        public const int OPT_fmodule_file_deps = 602;
        public const int OPT_fmodule_file = 603;
        public const int OPT_fmodule_format_EQ = 604;
        public const int OPT_fmodule_implementation_of = 605;
        public const int OPT_fmodule_map_file_home_is_cwd = 606;
        public const int OPT_fmodule_map_file = 607;
        public const int OPT_fmodule_maps = 608;
        public const int OPT_fmodule_name_EQ = 609;
        public const int OPT_fmodule_name = 610;
        public const int OPT_module_private_f = 611;
        public const int OPT_fmodules_cache_path = 612;
        public const int OPT_fmodules_codegen = 613;
        public const int OPT_fmodules_debuginfo = 614;
        public const int OPT_fmodules_decluse = 615;
        public const int OPT_fmodules_disable_diagnostic_validation = 616;
        public const int OPT_fmodules_embed_all_files = 617;
        public const int OPT_fmodules_embed_file_EQ = 618;
        public const int OPT_fmodules_hash_content = 619;
        public const int OPT_fmodules_ignore_macro = 620;
        public const int OPT_fmodules_local_submodule_visibility = 621;
        public const int OPT_fmodules_prune_after = 622;
        public const int OPT_fmodules_prune_interval = 623;
        public const int OPT_fmodules_search_all = 624;
        public const int OPT_fmodules_strict_decluse = 625;
        public const int OPT_fmodules_ts = 626;
        public const int OPT_fmodules_user_build_path = 627;
        public const int OPT_fmodules_validate_once_per_build_session = 628;
        public const int OPT_fmodules_validate_system_headers = 629;
        public const int OPT_fmodules = 630;
        public const int OPT_modulo_sched_allow_regmoves_f = 631;
        public const int OPT_modulo_sched_f = 632;
        public const int OPT_fms_compatibility_version = 633;
        public const int OPT_fms_compatibility = 634;
        public const int OPT_fms_extensions = 635;
        public const int OPT_fms_memptr_rep_EQ = 636;
        public const int OPT_fms_volatile = 637;
        public const int OPT_fmsc_version = 638;
        public const int OPT_fmudflapth = 639;
        public const int OPT_fmudflap = 640;
        public const int OPT__SLASH_Fm = 641;
        public const int OPT_fnative_half_arguments_and_returns = 642;
        public const int OPT_fnative_half_type = 643;
        public const int OPT_fnested_functions = 644;
        public const int OPT_fnew_alignment_EQ = 645;
        public const int OPT_anonymous_13 = 646;
        public const int OPT_fnext_runtime = 647;
        public const int OPT_fno_access_control = 648;
        public const int OPT_aggressive_function_elimination_fno = 649;
        public const int OPT_align_commons_fno = 650;
        public const int OPT_align_functions_fno = 651;
        public const int OPT_align_jumps_fno = 652;
        public const int OPT_align_labels_fno = 653;
        public const int OPT_align_loops_fno = 654;
        public const int OPT_fno_aligned_allocation = 655;
        public const int OPT_anonymous_15 = 656;
        public const int OPT_all_intrinsics_fno = 657;
        public const int OPT_fno_allow_editor_placeholders = 658;
        public const int OPT_fno_altivec = 659;
        public const int OPT_fno_apple_pragma_pack = 660;
        public const int OPT_fno_application_extension = 661;
        public const int OPT_fno_asm_blocks = 662;
        public const int OPT_fno_asm = 663;
        public const int OPT_fno_associative_math = 664;
        public const int OPT_fno_assume_sane_operator_new = 665;
        public const int OPT_fno_asynchronous_unwind_tables = 666;
        public const int OPT_fno_auto_profile_accurate = 667;
        public const int OPT_fno_auto_profile = 668;
        public const int OPT_fno_autolink = 669;
        public const int OPT_automatic_fno = 670;
        public const int OPT_backslash_fno = 671;
        public const int OPT_backtrace_fno = 672;
        public const int OPT_fno_bitfield_type_align = 673;
        public const int OPT_fno_blocks = 674;
        public const int OPT_fno_borland_extensions = 675;
        public const int OPT_bounds_check_fno = 676;
        public const int OPT_branch_count_reg_fno = 677;
        public const int OPT_fno_builtin_ = 678;
        public const int OPT_fno_builtin = 679;
        public const int OPT_caller_saves_fno = 680;
        public const int OPT_fno_caret_diagnostics = 681;
        public const int OPT_check_array_temporaries_fno = 682;
        public const int OPT_fcheck_new_fno = 683;
        public const int OPT_fno_color_diagnostics = 684;
        public const int OPT_fno_common = 685;
        public const int OPT_fno_const_strings = 686;
        public const int OPT_fno_constant_cfstrings = 687;
        public const int OPT_fno_coroutines_ts = 688;
        public const int OPT_fno_coverage_mapping = 689;
        public const int OPT_fno_crash_diagnostics = 690;
        public const int OPT_cray_pointer_fno = 691;
        public const int OPT_fno_cuda_approx_transcendentals = 692;
        public const int OPT_fno_cuda_flush_denormals_to_zero = 693;
        public const int OPT_fno_cuda_host_device_constexpr = 694;
        public const int OPT_fno_cuda_rdc = 695;
        public const int OPT_fno_cxx_exceptions = 696;
        public const int OPT_fno_cxx_modules = 697;
        public const int OPT_d_lines_as_code_fno = 698;
        public const int OPT_d_lines_as_comments_fno = 699;
        public const int OPT_fno_data_sections = 700;
        public const int OPT_fno_debug_info_for_profiling = 701;
        public const int OPT_fno_debug_macro = 702;
        public const int OPT_fno_debug_pass_manager = 703;
        public const int OPT_fno_debug_types_section = 704;
        public const int OPT_fno_declspec = 705;
        public const int OPT_default_double_8_fno = 706;
        public const int OPT_default_inline_fno = 707;
        public const int OPT_default_integer_8_fno = 708;
        public const int OPT_default_real_8_fno = 709;
        public const int OPT_anonymous_7 = 710;
        public const int OPT_fno_delayed_template_parsing = 711;
        public const int OPT_delete_null_pointer_checks_fno = 712;
        public const int OPT_fno_deprecated_macro = 713;
        public const int OPT_devirtualize_speculatively_fno = 714;
        public const int OPT_devirtualize_fno = 715;
        public const int OPT_fno_diagnostics_color = 716;
        public const int OPT_fno_diagnostics_fixit_info = 717;
        public const int OPT_fno_diagnostics_show_hotness = 718;
        public const int OPT_fno_diagnostics_show_note_include_stack = 719;
        public const int OPT_fno_diagnostics_show_option = 720;
        public const int OPT_fno_diagnostics_use_presumed_location = 721;
        public const int OPT_fno_discard_value_names = 722;
        public const int OPT_dollar_ok_fno = 723;
        public const int OPT_fno_dollars_in_identifiers = 724;
        public const int OPT_fno_double_square_bracket_attributes = 725;
        public const int OPT_dump_fortran_optimized_fno = 726;
        public const int OPT_dump_fortran_original_fno = 727;
        public const int OPT_dump_parse_tree_fno = 728;
        public const int OPT_fno_dwarf_directory_asm = 729;
        public const int OPT_fno_dwarf2_cfi_asm = 730;
        public const int OPT_fno_elide_constructors = 731;
        public const int OPT_fno_elide_type = 732;
        public const int OPT_fno_eliminate_unused_debug_symbols = 733;
        public const int OPT_eliminate_unused_debug_types_fno = 734;
        public const int OPT_fno_emulated_tls = 735;
        public const int OPT_fno_escaping_block_tail_calls = 736;
        public const int OPT_fno_exceptions = 737;
        public const int OPT_anonymous_5 = 738;
        public const int OPT_fno_experimental_isel = 739;
        public const int OPT_fno_experimental_new_pass_manager = 740;
        public const int OPT_anonymous_9 = 741;
        public const int OPT_external_blas_fno = 742;
        public const int OPT_f2c_fno = 743;
        public const int OPT_fno_fast_math = 744;
        public const int OPT_fat_lto_objects_fno = 745;
        public const int OPT_fno_fine_grained_bitfield_accesses = 746;
        public const int OPT_fno_finite_math_only = 747;
        public const int OPT_fixed_form_fno = 748;
        public const int OPT_float_store_fno = 749;
        public const int OPT_fno_for_scope = 750;
        public const int OPT_fno_force_enable_int128 = 751;
        public const int OPT_free_form_fno = 752;
        public const int OPT_friend_injection_fno = 753;
        public const int OPT_frontend_optimize_fno = 754;
        public const int OPT_function_attribute_list_fno = 755;
        public const int OPT_fno_function_sections = 756;
        public const int OPT_gcse_after_reload_fno = 757;
        public const int OPT_gcse_las_fno = 758;
        public const int OPT_gcse_sm_fno = 759;
        public const int OPT_gcse_fno = 760;
        public const int OPT_fno_gnu_inline_asm = 761;
        public const int OPT_fno_gnu_keywords = 762;
        public const int OPT_fno_gnu89_inline = 763;
        public const int OPT_gnu_fno = 764;
        public const int OPT_anonymous_11 = 765;
        public const int OPT_fno_honor_infinities = 766;
        public const int OPT_fno_honor_nans = 767;
        public const int OPT_ident_fno = 768;
        public const int OPT_implement_inlines_fno = 769;
        public const int OPT_fno_implicit_module_maps = 770;
        public const int OPT_fno_implicit_modules = 771;
        public const int OPT_implicit_none_fno = 772;
        public const int OPT_implicit_templates_fno = 773;
        public const int OPT_init_local_zero_fno = 774;
        public const int OPT_inline_functions_called_once_fno = 775;
        public const int OPT_fno_inline_functions = 776;
        public const int OPT_finline_limit_fno = 777;
        public const int OPT_inline_small_functions_fno = 778;
        public const int OPT_fno_inline = 779;
        public const int OPT_integer_4_integer_8_fno = 780;
        public const int OPT_fno_integrated_as = 781;
        public const int OPT_intrinsic_modules_path_fno = 782;
        public const int OPT_ipa_cp_fno = 783;
        public const int OPT_ivopts_fno = 784;
        public const int OPT_fno_jump_tables = 785;
        public const int OPT_anonymous_26_fno = 786;
        public const int OPT_fno_lax_vector_conversions = 787;
        public const int OPT_fno_limit_debug_info = 788;
        public const int OPT_fno_lto_unit = 789;
        public const int OPT_fno_lto = 790;
        public const int OPT_fno_math_builtin = 791;
        public const int OPT_fno_math_errno = 792;
        public const int OPT_max_identifier_length_fno = 793;
        public const int OPT_fno_max_type_align = 794;
        public const int OPT_fno_merge_all_constants = 795;
        public const int OPT_merge_constants_fno = 796;
        public const int OPT_fno_module_file_deps = 797;
        public const int OPT_fno_module_maps = 798;
        public const int OPT_module_private_fno = 799;
        public const int OPT_fno_modules_decluse = 800;
        public const int OPT_fno_modules_error_recovery = 801;
        public const int OPT_fno_modules_global_index = 802;
        public const int OPT_fno_modules_search_all = 803;
        public const int OPT_fno_modules = 804;
        public const int OPT_modulo_sched_allow_regmoves_fno = 805;
        public const int OPT_modulo_sched_fno = 806;
        public const int OPT_fno_ms_compatibility = 807;
        public const int OPT_fno_ms_extensions = 808;
        public const int OPT_non_call_exceptions_fno = 809;
        public const int OPT_fno_objc_arc_exceptions = 810;
        public const int OPT_fno_objc_arc = 811;
        public const int OPT_fno_objc_exceptions = 812;
        public const int OPT_fno_objc_infer_related_result_type = 813;
        public const int OPT_fno_objc_legacy_dispatch = 814;
        public const int OPT_fno_objc_nonfragile_abi = 815;
        public const int OPT_fno_objc_weak = 816;
        public const int OPT_fno_omit_frame_pointer = 817;
        public const int OPT_fno_openmp_cuda_mode = 818;
        public const int OPT_fno_openmp_simd = 819;
        public const int OPT_fno_openmp = 820;
        public const int OPT_fno_operator_names = 821;
        public const int OPT_fno_optimize_sibling_calls = 822;
        public const int OPT_pack_derived_fno = 823;
        public const int OPT_fno_pack_struct = 824;
        public const int OPT_fno_pascal_strings = 825;
        public const int OPT_fno_pch_timestamp = 826;
        public const int OPT_peel_loops_fno = 827;
        public const int OPT_permissive_fno = 828;
        public const int OPT_fno_PIC = 829;
        public const int OPT_fno_pic = 830;
        public const int OPT_fno_PIE = 831;
        public const int OPT_fno_pie = 832;
        public const int OPT_fno_plt = 833;
        public const int OPT_prefetch_loop_arrays_fno = 834;
        public const int OPT_fno_preserve_as_comments = 835;
        public const int OPT_printf_fno = 836;
        public const int OPT_fno_profile_arcs = 837;
        public const int OPT_profile_correction_fno = 838;
        public const int OPT_profile_generate_sampling_fno = 839;
        public const int OPT_fno_profile_generate = 840;
        public const int OPT_fno_profile_instr_generate = 841;
        public const int OPT_fno_profile_instr_use = 842;
        public const int OPT_profile_reusedist_fno = 843;
        public const int OPT_fno_profile_sample_accurate = 844;
        public const int OPT_fno_profile_sample_use = 845;
        public const int OPT_fno_profile_use = 846;
        public const int OPT_profile_values_fno = 847;
        public const int OPT_profile_fno = 848;
        public const int OPT_protect_parens_fno = 849;
        public const int OPT_range_check_fno = 850;
        public const int OPT_real_4_real_10_fno = 851;
        public const int OPT_real_4_real_16_fno = 852;
        public const int OPT_real_4_real_8_fno = 853;
        public const int OPT_real_8_real_10_fno = 854;
        public const int OPT_real_8_real_16_fno = 855;
        public const int OPT_real_8_real_4_fno = 856;
        public const int OPT_realloc_lhs_fno = 857;
        public const int OPT_fno_reciprocal_math = 858;
        public const int OPT_recursive_fno = 859;
        public const int OPT_regs_graph_fno = 860;
        public const int OPT_fno_relaxed_template_template_args = 861;
        public const int OPT_rename_registers_fno = 862;
        public const int OPT_reorder_blocks_fno = 863;
        public const int OPT_repack_arrays_fno = 864;
        public const int OPT_fno_reroll_loops = 865;
        public const int OPT_fno_rewrite_imports = 866;
        public const int OPT_fno_rewrite_includes = 867;
        public const int OPT_ripa_fno = 868;
        public const int OPT_fno_ropi = 869;
        public const int OPT_rounding_math_fno = 870;
        public const int OPT_fno_rtlib_add_rpath = 871;
        public const int OPT_fno_rtti_data = 872;
        public const int OPT_fno_rtti = 873;
        public const int OPT_fno_rwpi = 874;
        public const int OPT_fno_sanitize_address_poison_class_member_array_new_cookie = 875;
        public const int OPT_fno_sanitize_address_use_after_scope = 876;
        public const int OPT_fno_sanitize_blacklist = 877;
        public const int OPT_fno_sanitize_cfi_cross_dso = 878;
        public const int OPT_fno_sanitize_coverage = 879;
        public const int OPT_fno_sanitize_memory_track_origins = 880;
        public const int OPT_fno_sanitize_memory_use_after_dtor = 881;
        public const int OPT_fno_sanitize_minimal_runtime = 882;
        public const int OPT_fno_sanitize_recover_EQ = 883;
        public const int OPT_fno_sanitize_recover = 884;
        public const int OPT_fno_sanitize_stats = 885;
        public const int OPT_fno_sanitize_thread_atomics = 886;
        public const int OPT_fno_sanitize_thread_func_entry_exit = 887;
        public const int OPT_fno_sanitize_thread_memory_access = 888;
        public const int OPT_fno_sanitize_trap_EQ = 889;
        public const int OPT_fno_sanitize_undefined_trap_on_error = 890;
        public const int OPT_fno_sanitize_EQ = 891;
        public const int OPT_fno_save_optimization_record = 892;
        public const int OPT_schedule_insns2_fno = 893;
        public const int OPT_schedule_insns_fno = 894;
        public const int OPT_second_underscore_fno = 895;
        public const int OPT_see_fno = 896;
        public const int OPT_fno_short_enums = 897;
        public const int OPT_fno_short_wchar = 898;
        public const int OPT_fno_show_column = 899;
        public const int OPT_fno_show_source_location = 900;
        public const int OPT_sign_zero_fno = 901;
        public const int OPT_fno_signaling_math = 902;
        public const int OPT_signaling_nans_fno = 903;
        public const int OPT_fno_signed_char = 904;
        public const int OPT_fno_signed_wchar = 905;
        public const int OPT_fno_signed_zeros = 906;
        public const int OPT_single_precision_constant_fno = 907;
        public const int OPT_fno_sized_deallocation = 908;
        public const int OPT_anonymous_1 = 909;
        public const int OPT_fno_slp_vectorize = 910;
        public const int OPT_spec_constr_count_fno = 911;
        public const int OPT_fno_spell_checking = 912;
        public const int OPT_fno_split_dwarf_inlining = 913;
        public const int OPT_stack_arrays_fno = 914;
        public const int OPT_stack_check_fno = 915;
        public const int OPT_fno_stack_protector = 916;
        public const int OPT_fno_stack_size_section = 917;
        public const int OPT_fno_standalone_debug = 918;
        public const int OPT_strength_reduce_fno = 919;
        public const int OPT_fno_strict_aliasing = 920;
        public const int OPT_fno_strict_enums = 921;
        public const int OPT_fno_modules_strict_decluse = 922;
        public const int OPT_fno_strict_overflow = 923;
        public const int OPT_fno_strict_return = 924;
        public const int OPT_fno_strict_vtable_pointers = 925;
        public const int OPT_fno_struct_path_tbaa = 926;
        public const int OPT_fno_threadsafe_statics = 927;
        public const int OPT_tls_model_fno = 928;
        public const int OPT_tracer_fno = 929;
        public const int OPT_fno_trapping_math = 930;
        public const int OPT_tree_dce_fno = 931;
        public const int OPT_tree_salias_fno = 932;
        public const int OPT_anonymous_20 = 933;
        public const int OPT_tree_ter_fno = 934;
        public const int OPT_tree_vectorizer_verbose_fno = 935;
        public const int OPT_anonymous_18 = 936;
        public const int OPT_tree_vrp_fno = 937;
        public const int OPT_tree_loop_im_fno = 938;
        public const int OPT_tree_loop_ivcanon_fno = 939;
        public const int OPT_tree_loop_linear_fno = 940;
        public const int OPT_fno_trigraphs = 941;
        public const int OPT_underscoring_fno = 942;
        public const int OPT_fno_unique_section_names = 943;
        public const int OPT_fno_unit_at_a_time = 944;
        public const int OPT_unroll_all_loops_fno = 945;
        public const int OPT_fno_unroll_loops = 946;
        public const int OPT_unsafe_loop_optimizations_fno = 947;
        public const int OPT_fno_unsafe_math_optimizations = 948;
        public const int OPT_fno_unsigned_char = 949;
        public const int OPT_unswitch_loops_fno = 950;
        public const int OPT_fno_unwind_tables = 951;
        public const int OPT_fno_use_cxa_atexit = 952;
        public const int OPT_fno_use_init_array = 953;
        public const int OPT_fno_use_line_directives = 954;
        public const int OPT_use_linker_plugin_fno = 955;
        public const int OPT_fno_validate_pch = 956;
        public const int OPT_fno_var_tracking = 957;
        public const int OPT_variable_expansion_in_unroller_fno = 958;
        public const int OPT_vect_cost_model_fno = 959;
        public const int OPT_fno_vectorize = 960;
        public const int OPT_fno_verbose_asm = 961;
        public const int OPT_fno_wchar = 962;
        public const int OPT_web_fno = 963;
        public const int OPT_whole_file_fno = 964;
        public const int OPT_fno_whole_program_vtables = 965;
        public const int OPT_whole_program_fno = 966;
        public const int OPT_fno_working_directory = 967;
        public const int OPT_fno_wrapv = 968;
        public const int OPT_fnoxray_always_emit_customevents = 969;
        public const int OPT_fnoxray_instrument = 970;
        public const int OPT_fno_zero_initialized_in_bss = 971;
        public const int OPT_fno_zvector = 972;
        public const int OPT_non_call_exceptions_f = 973;
        public const int OPT_fnoopenmp_relocatable_target = 974;
        public const int OPT_fnoopenmp_use_tls = 975;
        public const int OPT_fobjc_abi_version_EQ = 976;
        public const int OPT_fobjc_arc_cxxlib_EQ = 977;
        public const int OPT_fobjc_arc_exceptions = 978;
        public const int OPT_fobjc_arc = 979;
        public const int OPT_fobjc_atdefs = 980;
        public const int OPT_fobjc_call_cxx_cdtors = 981;
        public const int OPT_fobjc_dispatch_method_EQ = 982;
        public const int OPT_fobjc_exceptions = 983;
        public const int OPT_fobjc_gc_only = 984;
        public const int OPT_fobjc_gc = 985;
        public const int OPT_fobjc_infer_related_result_type = 986;
        public const int OPT_fobjc_legacy_dispatch = 987;
        public const int OPT_fobjc_link_runtime = 988;
        public const int OPT_fobjc_new_property = 989;
        public const int OPT_fobjc_nonfragile_abi_version_EQ = 990;
        public const int OPT_fobjc_nonfragile_abi = 991;
        public const int OPT_fobjc_runtime_has_weak = 992;
        public const int OPT_fobjc_runtime_EQ = 993;
        public const int OPT_fobjc_sender_dependent_dispatch = 994;
        public const int OPT_fobjc_subscripting_legacy_runtime = 995;
        public const int OPT_fobjc_weak = 996;
        public const int OPT_fomit_frame_pointer = 997;
        public const int OPT_fopenmp_cuda_mode = 998;
        public const int OPT_fopenmp_dump_offload_linker_script = 999;
        public const int OPT_fopenmp_host_ir_file_path = 1000;
        public const int OPT_fopenmp_is_device = 1001;
        public const int OPT_fopenmp_relocatable_target = 1002;
        public const int OPT_fopenmp_simd = 1003;
        public const int OPT_fopenmp_targets_EQ = 1004;
        public const int OPT_fopenmp_use_tls = 1005;
        public const int OPT_fopenmp_version_EQ = 1006;
        public const int OPT_fopenmp_EQ = 1007;
        public const int OPT_fopenmp = 1008;
        public const int OPT_foperator_arrow_depth_EQ = 1009;
        public const int OPT_foperator_arrow_depth = 1010;
        public const int OPT_foptimization_record_file_EQ = 1011;
        public const int OPT_foptimize_sibling_calls = 1012;
        public const int OPT__for_linker_EQ = 1013;
        public const int OPT__for_linker = 1014;
        public const int OPT__force_link_EQ = 1015;
        public const int OPT__force_link = 1016;
        public const int OPT_force__cpusubtype__ALL = 1017;
        public const int OPT_force__flat__namespace = 1018;
        public const int OPT_force__load = 1019;
        public const int OPT_foutput_class_dir_EQ = 1020;
        public const int OPT_foverride_record_layout_EQ = 1021;
        public const int OPT__SLASH_Fo = 1022;
        public const int OPT__SLASH_fp_except_ = 1023;
        public const int OPT__SLASH_fp_except = 1024;
        public const int OPT__SLASH_fp_fast = 1025;
        public const int OPT__SLASH_fp_precise = 1026;
        public const int OPT__SLASH_fp_strict = 1027;
        public const int OPT_pack_derived_f = 1028;
        public const int OPT_fpack_struct_EQ = 1029;
        public const int OPT_fpack_struct = 1030;
        public const int OPT_fparse_all_comments = 1031;
        public const int OPT_fpascal_strings = 1032;
        public const int OPT_fpcc_struct_return = 1033;
        public const int OPT_fpch_preprocess = 1034;
        public const int OPT_peel_loops_f = 1035;
        public const int OPT_permissive_f = 1036;
        public const int OPT_fPIC = 1037;
        public const int OPT_fpic = 1038;
        public const int OPT_fPIE = 1039;
        public const int OPT_fpie = 1040;
        public const int OPT_fplt = 1041;
        public const int OPT_fplugin_EQ = 1042;
        public const int OPT_fprebuilt_module_path = 1043;
        public const int OPT_prefetch_loop_arrays_f = 1044;
        public const int OPT_fpreserve_as_comments = 1045;
        public const int OPT_fpreserve_vec3_type = 1046;
        public const int OPT_printf_f = 1047;
        public const int OPT_fprofile_arcs = 1048;
        public const int OPT_profile_correction_f = 1049;
        public const int OPT_fprofile_dir = 1050;
        public const int OPT_profile_generate_sampling_f = 1051;
        public const int OPT_fprofile_generate_EQ = 1052;
        public const int OPT_fprofile_generate = 1053;
        public const int OPT_fprofile_instr_generate_EQ = 1054;
        public const int OPT_fprofile_instr_generate = 1055;
        public const int OPT_fprofile_instr_use_EQ = 1056;
        public const int OPT_fprofile_instr_use = 1057;
        public const int OPT_fprofile_instrument_path_EQ = 1058;
        public const int OPT_fprofile_instrument_use_path_EQ = 1059;
        public const int OPT_fprofile_instrument_EQ = 1060;
        public const int OPT_profile_reusedist_f = 1061;
        public const int OPT_fprofile_sample_accurate = 1062;
        public const int OPT_fprofile_sample_use_EQ = 1063;
        public const int OPT_fprofile_sample_use = 1064;
        public const int OPT_fprofile_use_EQ = 1065;
        public const int OPT_fprofile_use = 1066;
        public const int OPT_profile_values_f = 1067;
        public const int OPT_profile_f = 1068;
        public const int OPT_protect_parens_f = 1069;
        public const int OPT__SLASH_Fp = 1070;
        public const int OPT_framework = 1071;
        public const int OPT_frandom_seed_EQ = 1072;
        public const int OPT_range_check_f = 1073;
        public const int OPT_real_4_real_10_f = 1074;
        public const int OPT_real_4_real_16_f = 1075;
        public const int OPT_real_4_real_8_f = 1076;
        public const int OPT_real_8_real_10_f = 1077;
        public const int OPT_real_8_real_16_f = 1078;
        public const int OPT_real_8_real_4_f = 1079;
        public const int OPT_realloc_lhs_f = 1080;
        public const int OPT_freciprocal_math = 1081;
        public const int OPT_frecord_marker_EQ = 1082;
        public const int OPT_recursive_f = 1083;
        public const int OPT_freg_struct_return = 1084;
        public const int OPT_regs_graph_f = 1085;
        public const int OPT_frelaxed_template_template_args = 1086;
        public const int OPT_rename_registers_f = 1087;
        public const int OPT_reorder_blocks_f = 1088;
        public const int OPT_repack_arrays_f = 1089;
        public const int OPT_freroll_loops = 1090;
        public const int OPT_fretain_comments_from_system_headers = 1091;
        public const int OPT_frewrite_imports = 1092;
        public const int OPT_frewrite_includes = 1093;
        public const int OPT_frewrite_map_file_EQ = 1094;
        public const int OPT_frewrite_map_file = 1095;
        public const int OPT_ripa_f = 1096;
        public const int OPT_fropi = 1097;
        public const int OPT_rounding_math_f = 1098;
        public const int OPT_frtlib_add_rpath = 1099;
        public const int OPT_frtti = 1100;
        public const int OPT_frwpi = 1101;
        public const int OPT__SLASH_FR = 1102;
        public const int OPT__SLASH_Fr = 1103;
        public const int OPT_fsanitize_address_field_padding = 1104;
        public const int OPT_fsanitize_address_globals_dead_stripping = 1105;
        public const int OPT_fsanitize_address_poison_class_member_array_new_cookie = 1106;
        public const int OPT_fsanitize_address_use_after_scope = 1107;
        public const int OPT_fsanitize_blacklist = 1108;
        public const int OPT_fsanitize_cfi_cross_dso = 1109;
        public const int OPT_fsanitize_cfi_icall_generalize_pointers = 1110;
        public const int OPT_fsanitize_coverage_8bit_counters = 1111;
        public const int OPT_fsanitize_coverage_indirect_calls = 1112;
        public const int OPT_fsanitize_coverage_inline_8bit_counters = 1113;
        public const int OPT_fsanitize_coverage_no_prune = 1114;
        public const int OPT_fsanitize_coverage_pc_table = 1115;
        public const int OPT_fsanitize_coverage_stack_depth = 1116;
        public const int OPT_fsanitize_coverage_trace_bb = 1117;
        public const int OPT_fsanitize_coverage_trace_cmp = 1118;
        public const int OPT_fsanitize_coverage_trace_div = 1119;
        public const int OPT_fsanitize_coverage_trace_gep = 1120;
        public const int OPT_fsanitize_coverage_trace_pc_guard = 1121;
        public const int OPT_fsanitize_coverage_trace_pc = 1122;
        public const int OPT_fsanitize_coverage_type = 1123;
        public const int OPT_fsanitize_coverage = 1124;
        public const int OPT_fsanitize_link_cxx_runtime = 1125;
        public const int OPT_fsanitize_memory_track_origins_EQ = 1126;
        public const int OPT_fsanitize_memory_track_origins = 1127;
        public const int OPT_fsanitize_memory_use_after_dtor = 1128;
        public const int OPT_fsanitize_minimal_runtime = 1129;
        public const int OPT_fsanitize_recover_EQ = 1130;
        public const int OPT_fsanitize_recover = 1131;
        public const int OPT_fsanitize_stats = 1132;
        public const int OPT_fsanitize_thread_atomics = 1133;
        public const int OPT_fsanitize_thread_func_entry_exit = 1134;
        public const int OPT_fsanitize_thread_memory_access = 1135;
        public const int OPT_fsanitize_trap_EQ = 1136;
        public const int OPT_fsanitize_undefined_strip_path_components_EQ = 1137;
        public const int OPT_fsanitize_undefined_trap_on_error = 1138;
        public const int OPT_fsanitize_EQ = 1139;
        public const int OPT_fsave_optimization_record = 1140;
        public const int OPT_anonymous_16 = 1141;
        public const int OPT_schedule_insns2_f = 1142;
        public const int OPT_schedule_insns_f = 1143;
        public const int OPT_second_underscore_f = 1144;
        public const int OPT_see_f = 1145;
        public const int OPT_fseh_exceptions = 1146;
        public const int OPT_fshort_enums = 1147;
        public const int OPT_fshort_wchar = 1148;
        public const int OPT_fshow_column = 1149;
        public const int OPT_fshow_overloads_EQ = 1150;
        public const int OPT_fshow_source_location = 1151;
        public const int OPT_sign_zero_f = 1152;
        public const int OPT_fsignaling_math = 1153;
        public const int OPT_signaling_nans_f = 1154;
        public const int OPT_fsigned_bitfields = 1155;
        public const int OPT_fsigned_char = 1156;
        public const int OPT_fsigned_wchar = 1157;
        public const int OPT_fsigned_zeros = 1158;
        public const int OPT_single_precision_constant_f = 1159;
        public const int OPT_fsized_deallocation = 1160;
        public const int OPT_fsjlj_exceptions = 1161;
        public const int OPT_anonymous_0 = 1162;
        public const int OPT_fslp_vectorize = 1163;
        public const int OPT_spec_constr_count_f = 1164;
        public const int OPT_fspell_checking_limit_EQ = 1165;
        public const int OPT_fspell_checking_limit = 1166;
        public const int OPT_fspell_checking = 1167;
        public const int OPT_fsplit_dwarf_inlining = 1168;
        public const int OPT_fsplit_stack = 1169;
        public const int OPT_stack_arrays_f = 1170;
        public const int OPT_stack_check_f = 1171;
        public const int OPT_fstack_protector_all = 1172;
        public const int OPT_fstack_protector_strong = 1173;
        public const int OPT_fstack_protector = 1174;
        public const int OPT_fstack_size_section = 1175;
        public const int OPT_fstandalone_debug = 1176;
        public const int OPT_strength_reduce_f = 1177;
        public const int OPT_fstrict_aliasing = 1178;
        public const int OPT_fstrict_enums = 1179;
        public const int OPT_fstrict_overflow = 1180;
        public const int OPT_fstrict_return = 1181;
        public const int OPT_fstrict_vtable_pointers = 1182;
        public const int OPT_fstruct_path_tbaa = 1183;
        public const int OPT_fsyntax_only = 1184;
        public const int OPT__SLASH_FS = 1185;
        public const int OPT_ftabstop_EQ = 1186;
        public const int OPT_ftabstop = 1187;
        public const int OPT_ftemplate_backtrace_limit_EQ = 1188;
        public const int OPT_ftemplate_backtrace_limit = 1189;
        public const int OPT_ftemplate_depth_ = 1190;
        public const int OPT_ftemplate_depth_EQ = 1191;
        public const int OPT_ftemplate_depth = 1192;
        public const int OPT_anonymous_21 = 1193;
        public const int OPT_ftest_coverage = 1194;
        public const int OPT_ftest_module_file_extension_EQ = 1195;
        public const int OPT_fthin_link_bitcode_EQ = 1196;
        public const int OPT_fthinlto_index_EQ = 1197;
        public const int OPT_fthreadsafe_statics = 1198;
        public const int OPT_ftime_report = 1199;
        public const int OPT_ftlsmodel_EQ = 1200;
        public const int OPT_tls_model_f = 1201;
        public const int OPT_tracer_f = 1202;
        public const int OPT_ftrap_function_EQ = 1203;
        public const int OPT_ftrapping_math = 1204;
        public const int OPT_ftrapv_handler_EQ = 1205;
        public const int OPT_ftrapv_handler = 1206;
        public const int OPT_ftrapv = 1207;
        public const int OPT_tree_dce_f = 1208;
        public const int OPT_tree_salias_f = 1209;
        public const int OPT_anonymous_19 = 1210;
        public const int OPT_tree_ter_f = 1211;
        public const int OPT_tree_vectorizer_verbose_f = 1212;
        public const int OPT_anonymous_17 = 1213;
        public const int OPT_tree_vrp_f = 1214;
        public const int OPT_tree_loop_im_f = 1215;
        public const int OPT_tree_loop_ivcanon_f = 1216;
        public const int OPT_tree_loop_linear_f = 1217;
        public const int OPT_ftrigraphs = 1218;
        public const int OPT_ftype_visibility = 1219;
        public const int OPT_underscoring_f = 1220;
        public const int OPT_funique_section_names = 1221;
        public const int OPT_funit_at_a_time = 1222;
        public const int OPT_funknown_anytype = 1223;
        public const int OPT_unroll_all_loops_f = 1224;
        public const int OPT_funroll_loops = 1225;
        public const int OPT_unsafe_loop_optimizations_f = 1226;
        public const int OPT_funsafe_math_optimizations = 1227;
        public const int OPT_funsigned_bitfields = 1228;
        public const int OPT_funsigned_char = 1229;
        public const int OPT_unswitch_loops_f = 1230;
        public const int OPT_funwind_tables = 1231;
        public const int OPT_fuse_cxa_atexit = 1232;
        public const int OPT_fuse_init_array = 1233;
        public const int OPT_fuse_ld_EQ = 1234;
        public const int OPT_fuse_line_directives = 1235;
        public const int OPT_use_linker_plugin_f = 1236;
        public const int OPT_fuse_register_sized_bitfield_access = 1237;
        public const int OPT__SLASH_FU = 1238;
        public const int OPT_variable_expansion_in_unroller_f = 1239;
        public const int OPT_fveclib = 1240;
        public const int OPT_vect_cost_model_f = 1241;
        public const int OPT_fvectorize = 1242;
        public const int OPT_fverbose_asm = 1243;
        public const int OPT_fvisibility_inlines_hidden = 1244;
        public const int OPT_fvisibility_ms_compat = 1245;
        public const int OPT_fvisibility_EQ = 1246;
        public const int OPT_fvisibility = 1247;
        public const int OPT_fwchar_type_EQ = 1248;
        public const int OPT_web_f = 1249;
        public const int OPT_whole_file_f = 1250;
        public const int OPT_fwhole_program_vtables = 1251;
        public const int OPT_whole_program_f = 1252;
        public const int OPT_fwrapv = 1253;
        public const int OPT_fwritable_strings = 1254;
        public const int OPT_fxray_always_emit_customevents = 1255;
        public const int OPT_fxray_always_instrument = 1256;
        public const int OPT_fxray_instruction_threshold_EQ = 1257;
        public const int OPT_fxray_instruction_threshold_ = 1258;
        public const int OPT_fxray_instrument = 1259;
        public const int OPT_fxray_never_instrument = 1260;
        public const int OPT__SLASH_Fx = 1261;
        public const int OPT_fzero_initialized_in_bss = 1262;
        public const int OPT_fzvector = 1263;
        public const int OPT_F = 1264;
        public const int OPT__SLASH_F = 1265;
        public const int OPT_g0 = 1266;
        public const int OPT__SLASH_G1 = 1267;
        public const int OPT_g1 = 1268;
        public const int OPT__SLASH_G2 = 1269;
        public const int OPT_g2 = 1270;
        public const int OPT_g3 = 1271;
        public const int OPT_G_EQ = 1272;
        public const int OPT__SLASH_GA = 1273;
        public const int OPT_gcc_toolchain = 1274;
        public const int OPT_gcc_toolchain_legacy_spelling = 1275;
        public const int OPT_gcodeview = 1276;
        public const int OPT_gcoff = 1277;
        public const int OPT_gcolumn_info = 1278;
        public const int OPT_gdwarf_2 = 1279;
        public const int OPT_gdwarf_3 = 1280;
        public const int OPT_gdwarf_4 = 1281;
        public const int OPT_gdwarf_5 = 1282;
        public const int OPT_gdwarf_aranges = 1283;
        public const int OPT_gdwarf = 1284;
        public const int OPT__SLASH_Gd = 1285;
        public const int OPT_gembed_source = 1286;
        public const int OPT_gen_reproducer = 1287;
        public const int OPT__SLASH_Ge = 1288;
        public const int OPT__SLASH_GF_ = 1289;
        public const int OPT_gfull = 1290;
        public const int OPT__SLASH_GF = 1291;
        public const int OPT_ggdb0 = 1292;
        public const int OPT_ggdb1 = 1293;
        public const int OPT_ggdb2 = 1294;
        public const int OPT_ggdb3 = 1295;
        public const int OPT_ggdb = 1296;
        public const int OPT_ggnu_pubnames = 1297;
        public const int OPT__SLASH_GH = 1298;
        public const int OPT__SLASH_Gh = 1299;
        public const int OPT__SLASH_GL_ = 1300;
        public const int OPT_gline_tables_only = 1301;
        public const int OPT_glldb = 1302;
        public const int OPT__SLASH_GL = 1303;
        public const int OPT__SLASH_Gm_ = 1304;
        public const int OPT_gmlt = 1305;
        public const int OPT_gmodules = 1306;
        public const int OPT__SLASH_Gm = 1307;
        public const int OPT_gno_column_info = 1308;
        public const int OPT_gno_embed_source = 1309;
        public const int OPT_gno_record_gcc_switches = 1310;
        public const int OPT_gno_strict_dwarf = 1311;
        public const int OPT_gnu_pubnames = 1312;
        public const int OPT__SLASH_GR_ = 1313;
        public const int OPT_grecord_gcc_switches = 1314;
        public const int OPT__SLASH_Gregcall = 1315;
        public const int OPT__SLASH_GR = 1316;
        public const int OPT__SLASH_Gr = 1317;
        public const int OPT__SLASH_GS_ = 1318;
        public const int OPT_gsce = 1319;
        public const int OPT_gsplit_dwarf = 1320;
        public const int OPT_gstabs = 1321;
        public const int OPT_gstrict_dwarf = 1322;
        public const int OPT__SLASH_GS = 1323;
        public const int OPT__SLASH_Gs = 1324;
        public const int OPT_gtoggle = 1325;
        public const int OPT__SLASH_GT = 1326;
        public const int OPT__SLASH_Guard = 1327;
        public const int OPT_gused = 1328;
        public const int OPT_gvms = 1329;
        public const int OPT__SLASH_Gv = 1330;
        public const int OPT__SLASH_Gw_ = 1331;
        public const int OPT__SLASH_Gw = 1332;
        public const int OPT__SLASH_GX_ = 1333;
        public const int OPT_gxcoff = 1334;
        public const int OPT__SLASH_GX = 1335;
        public const int OPT__SLASH_Gy_ = 1336;
        public const int OPT__SLASH_Gy = 1337;
        public const int OPT_gz_EQ = 1338;
        public const int OPT__SLASH_GZ = 1339;
        public const int OPT__SLASH_Gz = 1340;
        public const int OPT_gz = 1341;
        public const int OPT_G = 1342;
        public const int OPT_g_Flag = 1343;
        public const int OPT_header_include_file = 1344;
        public const int OPT_headerpad__max__install__names = 1345;
        public const int OPT__help_hidden = 1346;
        public const int OPT__SLASH_HELP = 1347;
        public const int OPT_help = 1348;
        public const int OPT__SLASH_help = 1349;
        public const int OPT__SLASH_homeparams = 1350;
        public const int OPT__SLASH_hotpatch = 1351;
        public const int OPT_H = 1352;
        public const int OPT__SLASH_H = 1353;
        public const int OPT_I_ = 1354;
        public const int OPT_idirafter = 1355;
        public const int OPT_iframeworkwithsysroot = 1356;
        public const int OPT_iframework = 1357;
        public const int OPT__imacros_EQ = 1358;
        public const int OPT_imacros = 1359;
        public const int OPT_image__base = 1360;
        public const int OPT__SLASH_imsvc = 1361;
        public const int OPT_imultilib = 1362;
        public const int OPT__include_barrier = 1363;
        public const int OPT__include_directory_after_EQ = 1364;
        public const int OPT__include_directory_after = 1365;
        public const int OPT__include_directory_EQ = 1366;
        public const int OPT__include_directory = 1367;
        public const int OPT_include_pch = 1368;
        public const int OPT__include_prefix_EQ = 1369;
        public const int OPT__include_prefix = 1370;
        public const int OPT_include_pth = 1371;
        public const int OPT__include_with_prefix_after_EQ = 1372;
        public const int OPT__include_with_prefix_after = 1373;
        public const int OPT__include_with_prefix_before_EQ = 1374;
        public const int OPT__include_with_prefix_before = 1375;
        public const int OPT__include_with_prefix_EQ = 1376;
        public const int OPT__include_with_prefix = 1377;
        public const int OPT__include_EQ = 1378;
        public const int OPT_include = 1379;
        public const int OPT_index_header_map = 1380;
        public const int OPT_init_only = 1381;
        public const int OPT_init = 1382;
        public const int OPT_install__name = 1383;
        public const int OPT_anonymous_24 = 1384;
        public const int OPT_internal_externc_isystem = 1385;
        public const int OPT_internal_isystem = 1386;
        public const int OPT_iprefix = 1387;
        public const int OPT_iquote = 1388;
        public const int OPT_isysroot = 1389;
        public const int OPT_isystem_after = 1390;
        public const int OPT_isystem = 1391;
        public const int OPT_ivfsoverlay = 1392;
        public const int OPT_iwithprefixbefore = 1393;
        public const int OPT_iwithprefix = 1394;
        public const int OPT_iwithsysroot = 1395;
        public const int OPT_I = 1396;
        public const int OPT__SLASH_I = 1397;
        public const int OPT_J = 1398;
        public const int OPT__SLASH_J = 1399;
        public const int OPT_keep__private__externs = 1400;
        public const int OPT__SLASH_kernel_ = 1401;
        public const int OPT__SLASH_kernel = 1402;
        public const int OPT__language_EQ = 1403;
        public const int OPT__language = 1404;
        public const int OPT_lazy__framework = 1405;
        public const int OPT_lazy__library = 1406;
        public const int OPT__SLASH_LDd = 1407;
        public const int OPT__SLASH_LD = 1408;
        public const int OPT__library_directory_EQ = 1409;
        public const int OPT__library_directory = 1410;
        public const int OPT_linker_option = 1411;
        public const int OPT__SLASH_link = 1412;
        public const int OPT__SLASH_LN = 1413;
        public const int OPT_load = 1414;
        public const int OPT_L = 1415;
        public const int OPT_l = 1416;
        public const int OPT_m16 = 1417;
        public const int OPT_m32 = 1418;
        public const int OPT_m3dnowa = 1419;
        public const int OPT_m3dnow = 1420;
        public const int OPT_m64 = 1421;
        public const int OPT_m80387 = 1422;
        public const int OPT_mabi_EQ = 1423;
        public const int OPT_mabicalls = 1424;
        public const int OPT_mabs_EQ = 1425;
        public const int OPT_Mach = 1426;
        public const int OPT_madx = 1427;
        public const int OPT_maes = 1428;
        public const int OPT_main_file_name = 1429;
        public const int OPT_malign_double = 1430;
        public const int OPT_malign_functions_EQ = 1431;
        public const int OPT_malign_jumps_EQ = 1432;
        public const int OPT_malign_loops_EQ = 1433;
        public const int OPT_maltivec = 1434;
        public const int OPT_mamdgpu_debugger_abi = 1435;
        public const int OPT_mappletvos_version_min_EQ = 1436;
        public const int OPT_mappletvsimulator_version_min_EQ = 1437;
        public const int OPT_march_EQ = 1438;
        public const int OPT_marm = 1439;
        public const int OPT_masm_verbose = 1440;
        public const int OPT_masm_EQ = 1441;
        public const int OPT_massembler_fatal_warnings = 1442;
        public const int OPT_mavx2 = 1443;
        public const int OPT_mavx512bitalg = 1444;
        public const int OPT_mavx512bw = 1445;
        public const int OPT_mavx512cd = 1446;
        public const int OPT_mavx512dq = 1447;
        public const int OPT_mavx512er = 1448;
        public const int OPT_mavx512f = 1449;
        public const int OPT_mavx512ifma = 1450;
        public const int OPT_mavx512pf = 1451;
        public const int OPT_mavx512vbmi2 = 1452;
        public const int OPT_mavx512vbmi = 1453;
        public const int OPT_mavx512vl = 1454;
        public const int OPT_mavx512vnni = 1455;
        public const int OPT_mavx512vpopcntdq = 1456;
        public const int OPT_mavx = 1457;
        public const int OPT_mbackchain = 1458;
        public const int OPT_mbig_endian = 1459;
        public const int OPT_mbmi2 = 1460;
        public const int OPT_mbmi = 1461;
        public const int OPT_mbranch_likely = 1462;
        public const int OPT_mcheck_zero_division = 1463;
        public const int OPT_mclflushopt = 1464;
        public const int OPT_mclwb = 1465;
        public const int OPT_mclzero = 1466;
        public const int OPT_mcmodel_EQ = 1467;
        public const int OPT_mcmpb = 1468;
        public const int OPT_mcode_model = 1469;
        public const int OPT_mcompact_branches_EQ = 1470;
        public const int OPT_mconsole = 1471;
        public const int OPT_mconstant_cfstrings = 1472;
        public const int OPT_mconstructor_aliases = 1473;
        public const int OPT_mcpu_EQ = 1474;
        public const int OPT_mcrbits = 1475;
        public const int OPT_mcrc = 1476;
        public const int OPT_mpower8_crypto = 1477;
        public const int OPT_mcx16 = 1478;
        public const int OPT__SLASH_MDd = 1479;
        public const int OPT_mdebug_pass = 1480;
        public const int OPT_mdefault_build_attributes = 1481;
        public const int OPT_mdirect_move = 1482;
        public const int OPT_mdisable_fp_elim = 1483;
        public const int OPT_mdisable_tail_calls = 1484;
        public const int OPT_mdll = 1485;
        public const int OPT_mdouble_float = 1486;
        public const int OPT_mdspr2 = 1487;
        public const int OPT_mdsp = 1488;
        public const int OPT_mdynamic_no_pic = 1489;
        public const int OPT_MD = 1490;
        public const int OPT__SLASH_MD = 1491;
        public const int OPT_meabi = 1492;
        public const int OPT_membedded_data = 1493;
        public const int OPT_menable_no_infinities = 1494;
        public const int OPT_menable_no_nans = 1495;
        public const int OPT_menable_unsafe_fp_math = 1496;
        public const int OPT_mexception_handing = 1497;
        public const int OPT_mexecute_only = 1498;
        public const int OPT_mextern_sdata = 1499;
        public const int OPT_mf16c = 1500;
        public const int OPT_mfancy_math_387 = 1501;
        public const int OPT_mfentry = 1502;
        public const int OPT_mfix_and_continue = 1503;
        public const int OPT_mfix_cortex_a53_835769 = 1504;
        public const int OPT_mfloat_abi_EQ = 1505;
        public const int OPT_mfloat_abi = 1506;
        public const int OPT_mfloat128 = 1507;
        public const int OPT_mfma4 = 1508;
        public const int OPT_mfma = 1509;
        public const int OPT_mfp32 = 1510;
        public const int OPT_mfp64 = 1511;
        public const int OPT_mfpmath_EQ = 1512;
        public const int OPT_mfpmath = 1513;
        public const int OPT_mfprnd = 1514;
        public const int OPT_mfpu_EQ = 1515;
        public const int OPT_mfpxx = 1516;
        public const int OPT_mfsgsbase = 1517;
        public const int OPT_mfxsr = 1518;
        public const int OPT_MF = 1519;
        public const int OPT_mgeneral_regs_only = 1520;
        public const int OPT_mgfni = 1521;
        public const int OPT_mglibc = 1522;
        public const int OPT_mglobal_merge = 1523;
        public const int OPT_mgpopt = 1524;
        public const int OPT_MG = 1525;
        public const int OPT_mhard_float = 1526;
        public const int OPT_mhtm = 1527;
        public const int OPT_mhexagon_hvx_double = 1528;
        public const int OPT_mhexagon_hvx_length_EQ = 1529;
        public const int OPT_mhexagon_hvx_EQ = 1530;
        public const int OPT_mhexagon_hvx = 1531;
        public const int OPT__mhwdiv_EQ = 1532;
        public const int OPT_mhwdiv_EQ = 1533;
        public const int OPT__mhwdiv = 1534;
        public const int OPT_miamcu = 1535;
        public const int OPT_mibt = 1536;
        public const int OPT_mieee_fp = 1537;
        public const int OPT_mieee_rnd_near = 1538;
        public const int OPT__migrate = 1539;
        public const int OPT_migrate = 1540;
        public const int OPT_mimplicit_float = 1541;
        public const int OPT_mimplicit_it_EQ = 1542;
        public const int OPT_mincremental_linker_compatible = 1543;
        public const int OPT_mindirect_jump_EQ = 1544;
        public const int OPT_minline_all_stringops = 1545;
        public const int OPT_minvariant_function_descriptors = 1546;
        public const int OPT_mios_simulator_version_min_EQ = 1547;
        public const int OPT_mios_version_min_EQ = 1548;
        public const int OPT_miphoneos_version_min_EQ = 1549;
        public const int OPT_miphonesimulator_version_min_EQ = 1550;
        public const int OPT_mips16 = 1551;
        public const int OPT_mips1 = 1552;
        public const int OPT_mips2 = 1553;
        public const int OPT_mips32r2 = 1554;
        public const int OPT_mips32r3 = 1555;
        public const int OPT_mips32r5 = 1556;
        public const int OPT_mips32r6 = 1557;
        public const int OPT_mips32 = 1558;
        public const int OPT_mips3 = 1559;
        public const int OPT_mips4 = 1560;
        public const int OPT_mips5 = 1561;
        public const int OPT_mips64r2 = 1562;
        public const int OPT_mips64r3 = 1563;
        public const int OPT_mips64r5 = 1564;
        public const int OPT_mips64r6 = 1565;
        public const int OPT_mips64 = 1566;
        public const int OPT_misel = 1567;
        public const int OPT_MJ = 1568;
        public const int OPT_mkernel = 1569;
        public const int OPT_mldc1_sdc1 = 1570;
        public const int OPT_mlimit_float_precision = 1571;
        public const int OPT_mlink_bitcode_file = 1572;
        public const int OPT_mlink_cuda_bitcode = 1573;
        public const int OPT_mlinker_version_EQ = 1574;
        public const int OPT_mlittle_endian = 1575;
        public const int OPT_mllvm = 1576;
        public const int OPT_mlocal_sdata = 1577;
        public const int OPT_mlong_calls = 1578;
        public const int OPT_mlongcall = 1579;
        public const int OPT_mlwp = 1580;
        public const int OPT_mlzcnt = 1581;
        public const int OPT_mmacos_version_min_EQ = 1582;
        public const int OPT_mmacosx_version_min_EQ = 1583;
        public const int OPT_mmadd4 = 1584;
        public const int OPT_mmcu_EQ = 1585;
        public const int OPT_MMD = 1586;
        public const int OPT_mmfcrf = 1587;
        public const int OPT_mmfocrf = 1588;
        public const int OPT_mmicromips = 1589;
        public const int OPT_mmmx = 1590;
        public const int OPT_mmovbe = 1591;
        public const int OPT_mmpx = 1592;
        public const int OPT_mms_bitfields = 1593;
        public const int OPT_mmsa = 1594;
        public const int OPT_mmt = 1595;
        public const int OPT_mmwaitx = 1596;
        public const int OPT_MM = 1597;
        public const int OPT_mnan_EQ = 1598;
        public const int OPT_mno_3dnowa = 1599;
        public const int OPT_mno_3dnow = 1600;
        public const int OPT_mno_80387 = 1601;
        public const int OPT_mno_abicalls = 1602;
        public const int OPT_mno_adx = 1603;
        public const int OPT_mno_aes = 1604;
        public const int OPT_mno_altivec = 1605;
        public const int OPT_mno_avx2 = 1606;
        public const int OPT_mno_avx512bitalg = 1607;
        public const int OPT_mno_avx512bw = 1608;
        public const int OPT_mno_avx512cd = 1609;
        public const int OPT_mno_avx512dq = 1610;
        public const int OPT_mno_avx512er = 1611;
        public const int OPT_mno_avx512f = 1612;
        public const int OPT_mno_avx512ifma = 1613;
        public const int OPT_mno_avx512pf = 1614;
        public const int OPT_mno_avx512vbmi2 = 1615;
        public const int OPT_mno_avx512vbmi = 1616;
        public const int OPT_mno_avx512vl = 1617;
        public const int OPT_mno_avx512vnni = 1618;
        public const int OPT_mno_avx512vpopcntdq = 1619;
        public const int OPT_mno_avx = 1620;
        public const int OPT_mno_backchain = 1621;
        public const int OPT_mno_bmi2 = 1622;
        public const int OPT_mno_bmi = 1623;
        public const int OPT_mno_branch_likely = 1624;
        public const int OPT_mno_check_zero_division = 1625;
        public const int OPT_mno_clflushopt = 1626;
        public const int OPT_mno_clwb = 1627;
        public const int OPT_mno_clzero = 1628;
        public const int OPT_mno_cmpb = 1629;
        public const int OPT_mno_constant_cfstrings = 1630;
        public const int OPT_mno_crbits = 1631;
        public const int OPT_mnopower8_crypto = 1632;
        public const int OPT_mno_cx16 = 1633;
        public const int OPT_mno_default_build_attributes = 1634;
        public const int OPT_mnodirect_move = 1635;
        public const int OPT_mno_dspr2 = 1636;
        public const int OPT_mno_dsp = 1637;
        public const int OPT_mno_embedded_data = 1638;
        public const int OPT_mno_exception_handing = 1639;
        public const int OPT_mno_execute_only = 1640;
        public const int OPT_mno_extern_sdata = 1641;
        public const int OPT_mno_f16c = 1642;
        public const int OPT_mno_fix_cortex_a53_835769 = 1643;
        public const int OPT_mno_float128 = 1644;
        public const int OPT_mno_fma4 = 1645;
        public const int OPT_mno_fma = 1646;
        public const int OPT_mno_fprnd = 1647;
        public const int OPT_mno_fsgsbase = 1648;
        public const int OPT_mno_fxsr = 1649;
        public const int OPT_mno_gfni = 1650;
        public const int OPT_mno_global_merge = 1651;
        public const int OPT_mno_gpopt = 1652;
        public const int OPT_mno_htm = 1653;
        public const int OPT_mno_hexagon_hvx_double = 1654;
        public const int OPT_mno_hexagon_hvx = 1655;
        public const int OPT_mno_iamcu = 1656;
        public const int OPT_mno_ibt = 1657;
        public const int OPT_mno_implicit_float = 1658;
        public const int OPT_mno_incremental_linker_compatible = 1659;
        public const int OPT_mno_inline_all_stringops = 1660;
        public const int OPT_mno_invariant_function_descriptors = 1661;
        public const int OPT_mno_isel = 1662;
        public const int OPT_mno_ldc1_sdc1 = 1663;
        public const int OPT_mno_local_sdata = 1664;
        public const int OPT_mno_long_calls = 1665;
        public const int OPT_mno_longcall = 1666;
        public const int OPT_mno_lwp = 1667;
        public const int OPT_mno_lzcnt = 1668;
        public const int OPT_mno_madd4 = 1669;
        public const int OPT_mno_mfcrf = 1670;
        public const int OPT_mno_mfocrf = 1671;
        public const int OPT_mno_micromips = 1672;
        public const int OPT_mno_mips16 = 1673;
        public const int OPT_mno_mmx = 1674;
        public const int OPT_mno_movbe = 1675;
        public const int OPT_mno_movt = 1676;
        public const int OPT_mno_mpx = 1677;
        public const int OPT_mno_ms_bitfields = 1678;
        public const int OPT_mno_msa = 1679;
        public const int OPT_mno_mt = 1680;
        public const int OPT_mno_mwaitx = 1681;
        public const int OPT_mno_neg_immediates = 1682;
        public const int OPT_mno_nontrapping_fptoint = 1683;
        public const int OPT_mno_odd_spreg = 1684;
        public const int OPT_mno_omit_leaf_frame_pointer = 1685;
        public const int OPT_mno_packets = 1686;
        public const int OPT_mno_pascal_strings = 1687;
        public const int OPT_mno_pclmul = 1688;
        public const int OPT_mno_pie_copy_relocations = 1689;
        public const int OPT_mno_pku = 1690;
        public const int OPT_mno_popcntd = 1691;
        public const int OPT_mno_popcnt = 1692;
        public const int OPT_mno_power8_vector = 1693;
        public const int OPT_mno_power9_vector = 1694;
        public const int OPT_mno_prefetchwt1 = 1695;
        public const int OPT_mno_prfchw = 1696;
        public const int OPT_mno_pure_code = 1697;
        public const int OPT_mno_qpx = 1698;
        public const int OPT_mno_rdpid = 1699;
        public const int OPT_mno_rdrnd = 1700;
        public const int OPT_mno_rdseed = 1701;
        public const int OPT_mno_red_zone = 1702;
        public const int OPT_mno_relax_all = 1703;
        public const int OPT_mno_restrict_it = 1704;
        public const int OPT_mno_retpoline_external_thunk = 1705;
        public const int OPT_mno_retpoline = 1706;
        public const int OPT_mno_rtd = 1707;
        public const int OPT_mno_rtm = 1708;
        public const int OPT_mno_sahf = 1709;
        public const int OPT_mno_sgx = 1710;
        public const int OPT_mno_sha = 1711;
        public const int OPT_mno_shstk = 1712;
        public const int OPT_mno_sign_ext = 1713;
        public const int OPT_mno_simd128 = 1714;
        public const int OPT_mno_soft_float = 1715;
        public const int OPT_mno_sse2 = 1716;
        public const int OPT_mno_sse3 = 1717;
        public const int OPT_mno_sse4_1 = 1718;
        public const int OPT_mno_sse4_2 = 1719;
        public const int OPT_mno_sse4a = 1720;
        public const int OPT_mno_sse4 = 1721;
        public const int OPT_mno_sse = 1722;
        public const int OPT_mno_ssse3 = 1723;
        public const int OPT_mno_stack_arg_probe = 1724;
        public const int OPT_mno_stackrealign = 1725;
        public const int OPT_mno_tbm = 1726;
        public const int OPT_mno_thumb = 1727;
        public const int OPT_mno_unaligned_access = 1728;
        public const int OPT_mno_vaes = 1729;
        public const int OPT_mno_vpclmulqdq = 1730;
        public const int OPT_mno_vsx = 1731;
        public const int OPT_mno_vx = 1732;
        public const int OPT_mno_warn_nonportable_cfstrings = 1733;
        public const int OPT_mno_x87 = 1734;
        public const int OPT_mno_xgot = 1735;
        public const int OPT_mno_xnack = 1736;
        public const int OPT_mno_xop = 1737;
        public const int OPT_mno_xsavec = 1738;
        public const int OPT_mno_xsaveopt = 1739;
        public const int OPT_mno_xsaves = 1740;
        public const int OPT_mno_xsave = 1741;
        public const int OPT_mno_zero_initialized_in_bss = 1742;
        public const int OPT_mno_zvector = 1743;
        public const int OPT_mnocrc = 1744;
        public const int OPT_mno_exec_stack = 1745;
        public const int OPT_mnontrapping_fptoint = 1746;
        public const int OPT_modd_spreg = 1747;
        public const int OPT_module_dependency_dir = 1748;
        public const int OPT_module_file_deps = 1749;
        public const int OPT_module_file_info = 1750;
        public const int OPT_momit_leaf_frame_pointer = 1751;
        public const int OPT_moslib_EQ = 1752;
        public const int OPT_mpackets = 1753;
        public const int OPT_mpascal_strings = 1754;
        public const int OPT_mpclmul = 1755;
        public const int OPT_mpie_copy_relocations = 1756;
        public const int OPT_mpku = 1757;
        public const int OPT_mpopcntd = 1758;
        public const int OPT_mpopcnt = 1759;
        public const int OPT_mpower8_vector = 1760;
        public const int OPT_mpower9_vector = 1761;
        public const int OPT_mprefer_vector_width_EQ = 1762;
        public const int OPT_mprefetchwt1 = 1763;
        public const int OPT_mprfchw = 1764;
        public const int OPT_mpure_code = 1765;
        public const int OPT_MP = 1766;
        public const int OPT__SLASH_MP = 1767;
        public const int OPT_mqdsp6_compat = 1768;
        public const int OPT_mqpx = 1769;
        public const int OPT_MQ = 1770;
        public const int OPT_mrdpid = 1771;
        public const int OPT_mrdrnd = 1772;
        public const int OPT_mrdseed = 1773;
        public const int OPT_mreassociate = 1774;
        public const int OPT_mrecip_EQ = 1775;
        public const int OPT_mrecip = 1776;
        public const int OPT_mred_zone = 1777;
        public const int OPT_mregparm_EQ = 1778;
        public const int OPT_mregparm = 1779;
        public const int OPT_mrelax_all = 1780;
        public const int OPT_mrelax_relocations = 1781;
        public const int OPT_mrelocation_model = 1782;
        public const int OPT_mrestrict_it = 1783;
        public const int OPT_mretpoline_external_thunk = 1784;
        public const int OPT_mretpoline = 1785;
        public const int OPT_mrtd = 1786;
        public const int OPT_mrtm = 1787;
        public const int OPT_msahf = 1788;
        public const int OPT_msave_temp_labels = 1789;
        public const int OPT_msgx = 1790;
        public const int OPT_msha = 1791;
        public const int OPT_mshstk = 1792;
        public const int OPT_msign_ext = 1793;
        public const int OPT_msimd128 = 1794;
        public const int OPT_msingle_float = 1795;
        public const int OPT_msmall_data_threshold_EQ = 1796;
        public const int OPT_msoft_float = 1797;
        public const int OPT_msse2 = 1798;
        public const int OPT_msse3 = 1799;
        public const int OPT_msse4_1 = 1800;
        public const int OPT_msse4_2 = 1801;
        public const int OPT_msse4a = 1802;
        public const int OPT_msse4 = 1803;
        public const int OPT_msse = 1804;
        public const int OPT_mssse3 = 1805;
        public const int OPT_mstack_alignment = 1806;
        public const int OPT_mstack_arg_probe = 1807;
        public const int OPT_mstack_probe_size = 1808;
        public const int OPT_mstackrealign = 1809;
        public const int OPT_mstrict_align = 1810;
        public const int OPT_mt_migrate_directory = 1811;
        public const int OPT_mtbm = 1812;
        public const int OPT__SLASH_MTd = 1813;
        public const int OPT_mthread_model = 1814;
        public const int OPT_mthreads = 1815;
        public const int OPT_mthumb = 1816;
        public const int OPT_mtp_mode_EQ = 1817;
        public const int OPT_mtp = 1818;
        public const int OPT_mtune_EQ = 1819;
        public const int OPT_mtvos_simulator_version_min_EQ = 1820;
        public const int OPT_mtvos_version_min_EQ = 1821;
        public const int OPT_MT = 1822;
        public const int OPT__SLASH_MT = 1823;
        public const int OPT_muclibc = 1824;
        public const int OPT_multi__module = 1825;
        public const int OPT_multiply__defined__unused = 1826;
        public const int OPT_multiply__defined = 1827;
        public const int OPT_munaligned_access = 1828;
        public const int OPT_municode = 1829;
        public const int OPT_munwind_tables = 1830;
        public const int OPT_mv4 = 1831;
        public const int OPT_mv55 = 1832;
        public const int OPT_mv5 = 1833;
        public const int OPT_mv60 = 1834;
        public const int OPT_mv62 = 1835;
        public const int OPT_mv65 = 1836;
        public const int OPT_mvaes = 1837;
        public const int OPT_mvpclmulqdq = 1838;
        public const int OPT_mvsx = 1839;
        public const int OPT_mvx = 1840;
        public const int OPT_MV = 1841;
        public const int OPT_mwarn_nonportable_cfstrings = 1842;
        public const int OPT_mwatchos_simulator_version_min_EQ = 1843;
        public const int OPT_mwatchos_version_min_EQ = 1844;
        public const int OPT_mwatchsimulator_version_min_EQ = 1845;
        public const int OPT_mwindows = 1846;
        public const int OPT_mx32 = 1847;
        public const int OPT_mx87 = 1848;
        public const int OPT_mxgot = 1849;
        public const int OPT_mxnack = 1850;
        public const int OPT_mxop = 1851;
        public const int OPT_mxsavec = 1852;
        public const int OPT_mxsaveopt = 1853;
        public const int OPT_mxsaves = 1854;
        public const int OPT_mxsave = 1855;
        public const int OPT_mzvector = 1856;
        public const int OPT_M = 1857;
        public const int OPT_new_struct_path_tbaa = 1858;
        public const int OPT_no_canonical_prefixes = 1859;
        public const int OPT_no_code_completion_globals = 1860;
        public const int OPT_no_code_completion_ns_level_decls = 1861;
        public const int OPT_no_cpp_precomp = 1862;
        public const int OPT_no_cuda_gpu_arch_EQ = 1863;
        public const int OPT_no_cuda_noopt_device_debug = 1864;
        public const int OPT_no_cuda_version_check = 1865;
        public const int OPT_no_emit_llvm_uselists = 1866;
        public const int OPT_migrator_no_finalize_removal = 1867;
        public const int OPT_no_implicit_float = 1868;
        public const int OPT_anonymous_25 = 1869;
        public const int OPT_no_integrated_cpp = 1870;
        public const int OPT__no_line_commands = 1871;
        public const int OPT_migrator_no_nsalloc_error = 1872;
        public const int OPT_no_pedantic = 1873;
        public const int OPT_no_pie = 1874;
        public const int OPT_no_pthread = 1875;
        public const int OPT__no_standard_includes = 1876;
        public const int OPT__no_standard_libraries = 1877;
        public const int OPT_no_struct_path_tbaa = 1878;
        public const int OPT_no_system_header_prefix = 1879;
        public const int OPT_anonymous_23 = 1880;
        public const int OPT__no_undefined = 1881;
        public const int OPT__no_warnings = 1882;
        public const int OPT_no__dead__strip__inits__and__terms = 1883;
        public const int OPT_nobuiltininc = 1884;
        public const int OPT_nocpp = 1885;
        public const int OPT_nocudainc = 1886;
        public const int OPT_nocudalib = 1887;
        public const int OPT_nodefaultlibs = 1888;
        public const int OPT_nofixprebinding = 1889;
        public const int OPT_nolibc = 1890;
        public const int OPT__SLASH_nologo = 1891;
        public const int OPT_nomultidefs = 1892;
        public const int OPT_nopie = 1893;
        public const int OPT_noprebind = 1894;
        public const int OPT_noseglinkedit = 1895;
        public const int OPT_nostartfiles = 1896;
        public const int OPT_nostdincxx = 1897;
        public const int OPT_nostdinc = 1898;
        public const int OPT_nostdlibxx = 1899;
        public const int OPT_nostdlibinc = 1900;
        public const int OPT_nostdlib = 1901;
        public const int OPT_nostdsysteminc = 1902;
        public const int OPT_n = 1903;
        public const int OPT_O0 = 1904;
        public const int OPT__SLASH_O0 = 1905;
        public const int OPT_O4 = 1906;
        public const int OPT_ObjCXX = 1907;
        public const int OPT_objc_isystem = 1908;
        public const int OPT_objcmt_atomic_property = 1909;
        public const int OPT_objcmt_migrate_all = 1910;
        public const int OPT_objcmt_migrate_annotation = 1911;
        public const int OPT_objcmt_migrate_designated_init = 1912;
        public const int OPT_objcmt_migrate_instancetype = 1913;
        public const int OPT_objcmt_migrate_literals = 1914;
        public const int OPT_objcmt_migrate_nsmacros = 1915;
        public const int OPT_objcmt_migrate_property_dot_syntax = 1916;
        public const int OPT_objcmt_migrate_property = 1917;
        public const int OPT_objcmt_migrate_protocol_conformance = 1918;
        public const int OPT_objcmt_migrate_readonly_property = 1919;
        public const int OPT_objcmt_migrate_readwrite_property = 1920;
        public const int OPT_objcmt_migrate_subscripting = 1921;
        public const int OPT_objcmt_ns_nonatomic_iosonly = 1922;
        public const int OPT_objcmt_returns_innerpointer_property = 1923;
        public const int OPT_anonymous_2 = 1924;
        public const int OPT_objcmt_whitelist_dir_path = 1925;
        public const int OPT_objcxx_isystem = 1926;
        public const int OPT_ObjC = 1927;
        public const int OPT_object = 1928;
        public const int OPT__SLASH_Od = 1929;
        public const int OPT_Ofast = 1930;
        public const int OPT__SLASH_Og = 1931;
        public const int OPT__SLASH_Oi_ = 1932;
        public const int OPT__SLASH_Oi = 1933;
        public const int OPT__SLASH_openmp_ = 1934;
        public const int OPT__SLASH_openmp = 1935;
        public const int OPT_opt_record_file = 1936;
        public const int OPT__optimize_EQ = 1937;
        public const int OPT__optimize = 1938;
        public const int OPT__SLASH_Os = 1939;
        public const int OPT__SLASH_Ot = 1940;
        public const int OPT_output_asm_variant = 1941;
        public const int OPT__output_class_directory_EQ = 1942;
        public const int OPT__output_class_directory = 1943;
        public const int OPT__output_EQ = 1944;
        public const int OPT__output = 1945;
        public const int OPT_O_flag = 1946;
        public const int OPT_O = 1947;
        public const int OPT__SLASH_O = 1948;
        public const int OPT_o = 1949;
        public const int OPT__SLASH_o = 1950;
        public const int OPT_pagezero__size = 1951;
        public const int OPT__param_EQ = 1952;
        public const int OPT__param = 1953;
        public const int OPT_pass_exit_codes = 1954;
        public const int OPT_pedantic_errors = 1955;
        public const int OPT_pedantic = 1956;
        public const int OPT__SLASH_permissive_ = 1957;
        public const int OPT_pg = 1958;
        public const int OPT_pic_is_pie = 1959;
        public const int OPT_pic_level = 1960;
        public const int OPT_pie = 1961;
        public const int OPT_pipe = 1962;
        public const int OPT_plugin_arg = 1963;
        public const int OPT_plugin = 1964;
        public const int OPT_preamble_bytes_EQ = 1965;
        public const int OPT_prebind__all__twolevel__modules = 1966;
        public const int OPT_prebind = 1967;
        public const int OPT__precompile = 1968;
        public const int OPT__prefix_EQ = 1969;
        public const int OPT__prefix = 1970;
        public const int OPT_preload = 1971;
        public const int OPT__preprocess = 1972;
        public const int OPT_print_decl_contexts = 1973;
        public const int OPT__print_diagnostic_categories = 1974;
        public const int OPT_print_file_name_EQ = 1975;
        public const int OPT__print_file_name = 1976;
        public const int OPT_print_ivar_layout = 1977;
        public const int OPT_print_libgcc_file_name = 1978;
        public const int OPT__print_missing_file_dependencies = 1979;
        public const int OPT_print_multi_directory = 1980;
        public const int OPT_print_multi_lib = 1981;
        public const int OPT_print_multi_os_directory = 1982;
        public const int OPT_print_preamble = 1983;
        public const int OPT_print_prog_name_EQ = 1984;
        public const int OPT__print_prog_name = 1985;
        public const int OPT_print_resource_dir = 1986;
        public const int OPT_print_search_dirs = 1987;
        public const int OPT_print_stats = 1988;
        public const int OPT_private__bundle = 1989;
        public const int OPT__profile_blocks = 1990;
        public const int OPT__profile = 1991;
        public const int OPT_pthreads = 1992;
        public const int OPT_pthread = 1993;
        public const int OPT_ptxas_path_EQ = 1994;
        public const int OPT_P = 1995;
        public const int OPT__SLASH_P = 1996;
        public const int OPT_p = 1997;
        public const int OPT__SLASH_Qfast_transcendentals = 1998;
        public const int OPT__SLASH_QIfist = 1999;
        public const int OPT__SLASH_Qimprecise_fwaits = 2000;
        public const int OPT_Qn = 2001;
        public const int OPT__SLASH_Qpar = 2002;
        public const int OPT_Qunused_arguments = 2003;
        public const int OPT__SLASH_Qvec_report = 2004;
        public const int OPT__SLASH_Qvec_ = 2005;
        public const int OPT__SLASH_Qvec = 2006;
        public const int OPT_Q = 2007;
        public const int OPT_rdynamic = 2008;
        public const int OPT_read__only__relocs = 2009;
        public const int OPT_relaxed_aliasing = 2010;
        public const int OPT_relocatable_pch = 2011;
        public const int OPT_remap_file = 2012;
        public const int OPT_remap = 2013;
        public const int OPT_resource_dir_EQ = 2014;
        public const int OPT_resource_dir = 2015;
        public const int OPT__resource_EQ = 2016;
        public const int OPT__resource = 2017;
        public const int OPT_rewrite_legacy_objc = 2018;
        public const int OPT_rewrite_macros = 2019;
        public const int OPT_rewrite_objc = 2020;
        public const int OPT_rewrite_test = 2021;
        public const int OPT_Rpass_analysis_EQ = 2022;
        public const int OPT_Rpass_missed_EQ = 2023;
        public const int OPT_Rpass_EQ = 2024;
        public const int OPT_rpath = 2025;
        public const int OPT_rsp_quoting = 2026;
        public const int OPT__SLASH_RTC = 2027;
        public const int OPT_rtlib_EQ = 2028;
        public const int OPT__rtlib = 2029;
        public const int OPT_R_Joined = 2030;
        public const int OPT_r = 2031;
        public const int OPT_save_stats_EQ = 2032;
        public const int OPT_save_stats = 2033;
        public const int OPT_save_temps_EQ = 2034;
        public const int OPT_save_temps = 2035;
        public const int OPT__SLASH_sdl_ = 2036;
        public const int OPT__SLASH_sdl = 2037;
        public const int OPT_sectalign = 2038;
        public const int OPT_sectcreate = 2039;
        public const int OPT_sectobjectsymbols = 2040;
        public const int OPT_sectorder = 2041;
        public const int OPT_seg1addr = 2042;
        public const int OPT_seg__addr__table__filename = 2043;
        public const int OPT_seg__addr__table = 2044;
        public const int OPT_segaddr = 2045;
        public const int OPT_segcreate = 2046;
        public const int OPT_seglinkedit = 2047;
        public const int OPT_segprot = 2048;
        public const int OPT_segs__read__only__addr = 2049;
        public const int OPT_segs__read__write__addr = 2050;
        public const int OPT_segs__read__ = 2051;
        public const int OPT_diagnostic_serialized_file = 2052;
        public const int OPT__serialize_diags = 2053;
        public const int OPT_anonymous_3 = 2054;
        public const int OPT_shared_libgcc = 2055;
        public const int OPT_shared_libsan = 2056;
        public const int OPT_shared = 2057;
        public const int OPT_show_encoding = 2058;
        public const int OPT_show_includes = 2059;
        public const int OPT_show_inst = 2060;
        public const int OPT__SLASH_showIncludes = 2061;
        public const int OPT__signed_char = 2062;
        public const int OPT_single__module = 2063;
        public const int OPT__SLASH_source_charset = 2064;
        public const int OPT_specs_EQ = 2065;
        public const int OPT_specs = 2066;
        public const int OPT_split_dwarf_file = 2067;
        public const int OPT_split_dwarf = 2068;
        public const int OPT_split_stacks = 2069;
        public const int OPT_stack_protector_buffer_size = 2070;
        public const int OPT_stack_protector = 2071;
        public const int OPT_static_define = 2072;
        public const int OPT_static_libgcc = 2073;
        public const int OPT_static_libgfortran = 2074;
        public const int OPT_static_libsan = 2075;
        public const int OPT_static_libstdcxx = 2076;
        public const int OPT_static = 2077;
        public const int OPT_stats_file = 2078;
        public const int OPT_std_default_EQ = 2079;
        public const int OPT__SLASH_std = 2080;
        public const int OPT_std_EQ = 2081;
        public const int OPT_stdlib_EQ = 2082;
        public const int OPT__stdlib = 2083;
        public const int OPT__std = 2084;
        public const int OPT_sub__library = 2085;
        public const int OPT_sub__umbrella = 2086;
        public const int OPT_sys_header_deps = 2087;
        public const int OPT__sysroot_EQ = 2088;
        public const int OPT__sysroot = 2089;
        public const int OPT_system_header_prefix = 2090;
        public const int OPT_anonymous_22 = 2091;
        public const int OPT_S = 2092;
        public const int OPT_s = 2093;
        public const int OPT_target_abi = 2094;
        public const int OPT_target_cpu = 2095;
        public const int OPT_target_feature = 2096;
        public const int OPT__target_help = 2097;
        public const int OPT_target_linker_version = 2098;
        public const int OPT_target = 2099;
        public const int OPT_target_legacy_spelling = 2100;
        public const int OPT_Tbss = 2101;
        public const int OPT__SLASH_TC = 2102;
        public const int OPT__SLASH_Tc = 2103;
        public const int OPT_Tdata = 2104;
        public const int OPT_templight_dump = 2105;
        public const int OPT_test_coverage = 2106;
        public const int OPT_time = 2107;
        public const int OPT_token_cache = 2108;
        public const int OPT__SLASH_TP = 2109;
        public const int OPT__SLASH_Tp = 2110;
        public const int OPT__trace_includes = 2111;
        public const int OPT_traditional_cpp = 2112;
        public const int OPT_traditional = 2113;
        public const int OPT_trigraphs = 2114;
        public const int OPT_trim_egraph = 2115;
        public const int OPT_triple_EQ = 2116;
        public const int OPT_triple = 2117;
        public const int OPT_Ttext = 2118;
        public const int OPT_twolevel__namespace__hints = 2119;
        public const int OPT_twolevel__namespace = 2120;
        public const int OPT_T = 2121;
        public const int OPT_t = 2122;
        public const int OPT_umbrella = 2123;
        public const int OPT__undefine_macro_EQ = 2124;
        public const int OPT__undefine_macro = 2125;
        public const int OPT_undefined = 2126;
        public const int OPT_undef = 2127;
        public const int OPT_unexported__symbols__list = 2128;
        public const int OPT_analysis_UnoptimizedCFG = 2129;
        public const int OPT__unsigned_char = 2130;
        public const int OPT__user_dependencies = 2131;
        public const int OPT__SLASH_utf8 = 2132;
        public const int OPT_U = 2133;
        public const int OPT__SLASH_U = 2134;
        public const int OPT_u = 2135;
        public const int OPT__SLASH_u = 2136;
        public const int OPT__SLASH_validate_charset_ = 2137;
        public const int OPT__SLASH_validate_charset = 2138;
        public const int OPT__SLASH_vd = 2139;
        public const int OPT_vectorize_loops = 2140;
        public const int OPT_vectorize_slp = 2141;
        public const int OPT__verbose = 2142;
        public const int OPT_verify_debug_info = 2143;
        public const int OPT_verify_ignore_unexpected_EQ = 2144;
        public const int OPT_verify_ignore_unexpected = 2145;
        public const int OPT_verify_pch = 2146;
        public const int OPT_verify_EQ = 2147;
        public const int OPT_verify = 2148;
        public const int OPT__version = 2149;
        public const int OPT_version = 2150;
        public const int OPT_via_file_asm = 2151;
        public const int OPT__SLASH_vmb = 2152;
        public const int OPT__SLASH_vmg = 2153;
        public const int OPT__SLASH_vmm = 2154;
        public const int OPT__SLASH_vms = 2155;
        public const int OPT__SLASH_vmv = 2156;
        public const int OPT__SLASH_volatile_iso = 2157;
        public const int OPT__SLASH_volatile_ms = 2158;
        public const int OPT_vtordisp_mode_EQ = 2159;
        public const int OPT_V = 2160;
        public const int OPT__SLASH_V = 2161;
        public const int OPT_v = 2162;
        public const int OPT__SLASH_W0 = 2163;
        public const int OPT__SLASH_W1 = 2164;
        public const int OPT__SLASH_W2 = 2165;
        public const int OPT__SLASH_W3 = 2166;
        public const int OPT__SLASH_W4 = 2167;
        public const int OPT_Wa_COMMA = 2168;
        public const int OPT_Wall = 2169;
        public const int OPT__SLASH_Wall = 2170;
        public const int OPT__warn__EQ = 2171;
        public const int OPT__warn_ = 2172;
        public const int OPT_WCL4 = 2173;
        public const int OPT__SLASH_wd4005 = 2174;
        public const int OPT__SLASH_wd4018 = 2175;
        public const int OPT__SLASH_wd4100 = 2176;
        public const int OPT__SLASH_wd4910 = 2177;
        public const int OPT__SLASH_wd4996 = 2178;
        public const int OPT_Wdeprecated = 2179;
        public const int OPT_weak_l = 2180;
        public const int OPT_weak__framework = 2181;
        public const int OPT_weak__library = 2182;
        public const int OPT_weak__reference__mismatches = 2183;
        public const int OPT_Wframe_larger_than_EQ = 2184;
        public const int OPT_whatsloaded = 2185;
        public const int OPT_whyload = 2186;
        public const int OPT_Wl_COMMA = 2187;
        public const int OPT_Wlarge_by_value_copy_EQ = 2188;
        public const int OPT_Wlarge_by_value_copy_def = 2189;
        public const int OPT_Wlarger_than_ = 2190;
        public const int OPT_Wlarger_than_EQ = 2191;
        public const int OPT__SLASH_WL = 2192;
        public const int OPT_Wno_deprecated = 2193;
        public const int OPT_Wno_nonportable_cfstrings = 2194;
        public const int OPT_Wno_rewrite_macros = 2195;
        public const int OPT_Wno_write_strings = 2196;
        public const int OPT_Wnonportable_cfstrings = 2197;
        public const int OPT_working_directory_EQ = 2198;
        public const int OPT_working_directory = 2199;
        public const int OPT_Wp_COMMA = 2200;
        public const int OPT__SLASH_Wp64 = 2201;
        public const int OPT__write_dependencies = 2202;
        public const int OPT__write_user_dependencies = 2203;
        public const int OPT_Wwrite_strings = 2204;
        public const int OPT__SLASH_WX_ = 2205;
        public const int OPT__SLASH_WX = 2206;
        public const int OPT_W_Joined = 2207;
        public const int OPT_w = 2208;
        public const int OPT__SLASH_w_flag = 2209;
        public const int OPT__SLASH_w = 2210;
        public const int OPT_Xanalyzer = 2211;
        public const int OPT_Xarch__ = 2212;
        public const int OPT_Xassembler = 2213;
        public const int OPT_Xclang = 2214;
        public const int OPT_Xcuda_fatbinary = 2215;
        public const int OPT_Xcuda_ptxas = 2216;
        public const int OPT_Xlinker = 2217;
        public const int OPT_Xopenmp_target_EQ = 2218;
        public const int OPT_Xopenmp_target = 2219;
        public const int OPT_Xpreprocessor = 2220;
        public const int OPT_X_Flag = 2221;
        public const int OPT_X_Joined = 2222;
        public const int OPT__SLASH_X = 2223;
        public const int OPT_x = 2224;
        public const int OPT__SLASH_Y_ = 2225;
        public const int OPT__SLASH_Yc = 2226;
        public const int OPT__SLASH_Yd = 2227;
        public const int OPT__SLASH_Yl = 2228;
        public const int OPT__SLASH_Yu = 2229;
        public const int OPT_y = 2230;
        public const int OPT_Z_reserved_lib_cckext = 2231;
        public const int OPT_Z_reserved_lib_stdcxx = 2232;
        public const int OPT_Z_Xlinker__no_demangle = 2233;
        public const int OPT__SLASH_Z7 = 2234;
        public const int OPT__SLASH_Za = 2235;
        public const int OPT__SLASH_Zc_auto = 2236;
        public const int OPT__SLASH_Zc_forScope = 2237;
        public const int OPT__SLASH_Zc_inline = 2238;
        public const int OPT__SLASH_Zc_rvalueCast = 2239;
        public const int OPT__SLASH_Zc_sizedDealloc_ = 2240;
        public const int OPT__SLASH_Zc_sizedDealloc = 2241;
        public const int OPT__SLASH_Zc_strictStrings = 2242;
        public const int OPT__SLASH_Zc_ternary = 2243;
        public const int OPT__SLASH_Zc_threadSafeInit_ = 2244;
        public const int OPT__SLASH_Zc_threadSafeInit = 2245;
        public const int OPT__SLASH_Zc_trigraphs_off = 2246;
        public const int OPT__SLASH_Zc_trigraphs = 2247;
        public const int OPT__SLASH_Zc_twoPhase_ = 2248;
        public const int OPT__SLASH_Zc_twoPhase = 2249;
        public const int OPT__SLASH_Zc_wchar_t = 2250;
        public const int OPT__SLASH_Zc = 2251;
        public const int OPT__SLASH_Zd = 2252;
        public const int OPT__SLASH_Ze = 2253;
        public const int OPT__SLASH_Zg = 2254;
        public const int OPT__SLASH_ZI = 2255;
        public const int OPT__SLASH_Zi = 2256;
        public const int OPT_Zlinker_input = 2257;
        public const int OPT__SLASH_Zl = 2258;
        public const int OPT__SLASH_Zm = 2259;
        public const int OPT__SLASH_Zo_ = 2260;
        public const int OPT__SLASH_Zo = 2261;
        public const int OPT__SLASH_Zp_flag = 2262;
        public const int OPT__SLASH_Zp = 2263;
        public const int OPT__SLASH_Zs = 2264;
        public const int OPT__SLASH_ZW = 2265;
        public const int OPT_Z_Flag = 2266;
        public const int OPT_Z_Joined = 2267;
        public const int OPT_z = 2268;
        public const int OPT__DASH_DASH = 2269;
        public const int OPT__ = 2270;
        public const int LastOption = 2271;
    }

    [TestClass]
    public class UnitTest2
    {
        public static readonly string[] prefix_0 = new string[] { null };
        public static readonly string[] prefix_1 = new string[] { "-", null };
        public static readonly string[] prefix_4 = new string[] { "-", "--", null };
        public static readonly string[] prefix_3 = new string[] { "--", null };
        public static readonly string[] prefix_2 = new string[] { "/", "-", null };

        public static readonly List<OptionInfo> InfoTable = new List<OptionInfo>(2270);

        static UnitTest2()
        {
            InfoTable.Add(new OptionInfo(null, "<action group>", OPT_ID.OPT_Action_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<CompileOnly group>", OPT_ID.OPT_CompileOnly_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<g group>", OPT_ID.OPT_DebugInfo_Group, OptionKind.GroupClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<W/R group>", OPT_ID.OPT_Diag_Group, OptionKind.GroupClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<I group>", OPT_ID.OPT_I_Group, OptionKind.GroupClass, OPT_ID.OPT_IncludePath_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<I/i group>", OPT_ID.OPT_IncludePath_Group, OptionKind.GroupClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<T/e/s/t/u group>", OPT_ID.OPT_Link_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<M group>", OPT_ID.OPT_M_Group, OptionKind.GroupClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<O group>", OPT_ID.OPT_O_Group, OptionKind.GroupClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<Preprocessor group>", OPT_ID.OPT_Preprocessor_Group, OptionKind.GroupClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<R group>", OPT_ID.OPT_R_Group, OptionKind.GroupClass, OPT_ID.OPT_Diag_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<R (with value) group>", OPT_ID.OPT_R_value_Group, OptionKind.GroupClass, OPT_ID.OPT_R_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<Static analyzer group>", OPT_ID.OPT_StaticAnalyzer_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<T group>", OPT_ID.OPT_T_Group, OptionKind.GroupClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<W group>", OPT_ID.OPT_W_Group, OptionKind.GroupClass, OPT_ID.OPT_Diag_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<W (with value) group>", OPT_ID.OPT_W_value_Group, OptionKind.GroupClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "</M group>", OPT_ID.OPT__SLASH_M_Group, OptionKind.GroupClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "</volatile group>", OPT_ID.OPT__SLASH_volatile_Group, OptionKind.GroupClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang-cl options>", OPT_ID.OPT_cl_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "CL.EXE COMPATIBILITY OPTIONS", null, null));
            InfoTable.Add(new OptionInfo(null, "<clang-cl compile-only options>", OPT_ID.OPT_cl_compile_Group, OptionKind.GroupClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang-cl ignored options>", OPT_ID.OPT_cl_ignored_Group, OptionKind.GroupClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang i group>", OPT_ID.OPT_clang_i_Group, OptionKind.GroupClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang ignored f group>", OPT_ID.OPT_clang_ignored_f_Group, OptionKind.GroupClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang_ignored_gcc_optimization_f_Group>", OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OptionKind.GroupClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang legacy flags>", OPT_ID.OPT_clang_ignored_legacy_options_Group, OptionKind.GroupClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang ignored m group>", OPT_ID.OPT_clang_ignored_m_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<d group>", OPT_ID.OPT_d_Group, OptionKind.GroupClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<f group>", OPT_ID.OPT_f_Group, OptionKind.GroupClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<f (clang-only) group>", OPT_ID.OPT_f_clang_Group, OptionKind.GroupClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<gN group>", OPT_ID.OPT_gN_Group, OptionKind.GroupClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<gTune group>", OPT_ID.OPT_gTune_Group, OptionKind.GroupClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<g group>", OPT_ID.OPT_g_Group, OptionKind.GroupClass, OPT_ID.OPT_DebugInfo_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<g flags group>", OPT_ID.OPT_g_flags_Group, OptionKind.GroupClass, OPT_ID.OPT_DebugInfo_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<gfortran group>", OPT_ID.OPT_gfortran_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<ggdbN group>", OPT_ID.OPT_ggdbN_Group, OptionKind.GroupClass, OPT_ID.OPT_gN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<i group>", OPT_ID.OPT_i_Group, OptionKind.GroupClass, OPT_ID.OPT_IncludePath_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang internal options>", OPT_ID.OPT_internal_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<clang debug/development internal options>", OPT_ID.OPT_internal_debug_Group, OptionKind.GroupClass, OPT_ID.OPT_internal_Group, OPT_ID.OPT_INVALID, null, 0, 0, "DEBUG/DEVELOPMENT OPTIONS", null, null));
            InfoTable.Add(new OptionInfo(null, "<clang driver internal options>", OPT_ID.OPT_internal_driver_Group, OptionKind.GroupClass, OPT_ID.OPT_internal_Group, OPT_ID.OPT_INVALID, null, 0, 0, "DRIVER OPTIONS", null, null));
            InfoTable.Add(new OptionInfo(null, "<m group>", OPT_ID.OPT_m_Group, OptionKind.GroupClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<aarch64 features group>", OPT_ID.OPT_m_aarch64_Features_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<amdgpu features group>", OPT_ID.OPT_m_amdgpu_Features_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<arm features group>", OPT_ID.OPT_m_arm_Features_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<hexagon features group>", OPT_ID.OPT_m_hexagon_Features_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<hexagon features group>", OPT_ID.OPT_m_hexagon_Features_HVX_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<m libc group>", OPT_ID.OPT_m_libc_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<ppc features group>", OPT_ID.OPT_m_ppc_Features_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<wasm features group>", OPT_ID.OPT_m_wasm_Features_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<x86 features group>", OPT_ID.OPT_m_x86_Features_Group, OptionKind.GroupClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<opencl group>", OPT_ID.OPT_opencl_Group, OptionKind.GroupClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<pedantic group>", OPT_ID.OPT_pedantic_Group, OptionKind.GroupClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<reserved libs group>", OPT_ID.OPT_reserved_lib_Group, OptionKind.GroupClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(null, "<u group>", OPT_ID.OPT_u_Group, OptionKind.GroupClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_0, "<input>", OPT_ID.OPT_INPUT, OptionKind.InputClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_0, "<unknown>", OPT_ID.OPT_UNKNOWN, OptionKind.UnknownClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "###", OPT_ID.OPT__HASH_HASH_HASH, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Print (but do not run) the commands to run for this compilation", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "?", OPT_ID.OPT__SLASH_QUESTION, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_help, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Display available options", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "A-", OPT_ID.OPT_A_DASH, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "add-plugin", OPT_ID.OPT_add_plugin, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use the named plugin action in addition to the default action", "<name>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "AI", OPT_ID.OPT__SLASH_AI, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "all-warnings", OPT_ID.OPT__all_warnings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_Wall, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "all_load", OPT_ID.OPT_all__load, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "allowable_client", OPT_ID.OPT_allowable__client, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "analyze-auto", OPT_ID.OPT__analyze_auto, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyze-function=", OPT_ID.OPT_analyze_function_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyze_function, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyze-function", OPT_ID.OPT_analyze_function, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Run analysis on specific function (for C++ include parameters in name)", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "analyze-", OPT_ID.OPT__SLASH_analyze_, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-checker-help", OPT_ID.OPT_analyzer_checker_help, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Display the list of analyzer checkers that are available", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-checker=", OPT_ID.OPT_analyzer_checker_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_checker, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-checker", OPT_ID.OPT_analyzer_checker, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Choose analyzer checkers to enable", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-config", OPT_ID.OPT_analyzer_config, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Choose analyzer options to enable", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-constraints=", OPT_ID.OPT_analyzer_constraints_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_constraints, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-constraints", OPT_ID.OPT_analyzer_constraints, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Source Code Analysis - Symbolic Constraint Engines", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-disable-all-checks", OPT_ID.OPT_analyzer_disable_all_checks, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable all static analyzer checks", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-disable-checker=", OPT_ID.OPT_analyzer_disable_checker_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_disable_checker, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-disable-checker", OPT_ID.OPT_analyzer_disable_checker, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Choose analyzer checkers to disable", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-disable-retry-exhausted", OPT_ID.OPT_analyzer_disable_retry_exhausted, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not re-analyze paths leading to exhausted nodes with a different strategy (may decrease code coverage)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-display-progress", OPT_ID.OPT_analyzer_display_progress, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit verbose output about the analyzer's progress", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-eagerly-assume", OPT_ID.OPT_analyzer_eagerly_assume, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Eagerly assume the truth/falseness of some symbolic constraints", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-inline-max-stack-depth=", OPT_ID.OPT_analyzer_inline_max_stack_depth_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_inline_max_stack_depth, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-inline-max-stack-depth", OPT_ID.OPT_analyzer_inline_max_stack_depth, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Bound on stack depth while inlining (4 by default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-inlining-mode=", OPT_ID.OPT_analyzer_inlining_mode_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_inlining_mode, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-inlining-mode", OPT_ID.OPT_analyzer_inlining_mode, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Specify the function selection heuristic used during inlining", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-list-enabled-checkers", OPT_ID.OPT_analyzer_list_enabled_checkers, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Display the list of enabled analyzer checkers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-max-loop", OPT_ID.OPT_analyzer_max_loop, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "The maximum number of times the analyzer will go through a loop", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "analyzer-no-default-checks", OPT_ID.OPT__analyzer_no_default_checks, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-opt-analyze-headers", OPT_ID.OPT_analyzer_opt_analyze_headers, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Force the static analyzer to analyze functions defined in header files", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-opt-analyze-nested-blocks", OPT_ID.OPT_analyzer_opt_analyze_nested_blocks, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Analyze the definitions of blocks in addition to functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-output=", OPT_ID.OPT_analyzer_output_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_output, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "analyzer-output", OPT_ID.OPT__analyzer_output, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Static analyzer report output format (html|plist|plist-multi-file|plist-html|text).", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-output", OPT_ID.OPT_analyzer_output, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Source Code Analysis - Output Options", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-purge=", OPT_ID.OPT_analyzer_purge_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_purge, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-purge", OPT_ID.OPT_analyzer_purge, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Source Code Analysis - Dead Symbol Removal Frequency", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-stats", OPT_ID.OPT_analyzer_stats, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Print internal analyzer statistics.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-store=", OPT_ID.OPT_analyzer_store_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_analyzer_store, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-store", OPT_ID.OPT_analyzer_store, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Source Code Analysis - Abstract Memory Store Models", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-viz-egraph-graphviz", OPT_ID.OPT_analyzer_viz_egraph_graphviz, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Display exploded graph using GraphViz", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyzer-viz-egraph-ubigraph", OPT_ID.OPT_analyzer_viz_egraph_ubigraph, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Display exploded graph using Ubigraph", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "analyze", OPT_ID.OPT__analyze, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Run the static analyzer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "analyze", OPT_ID.OPT_analyze, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Run static analysis engine", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "ansi", OPT_ID.OPT_ansi, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arange_sections", OPT_ID.OPT_arange_sections, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit DWARF .debug_arange sections", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "arch:", OPT_ID.OPT__SLASH_arch, OptionKind.JoinedClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Set architecture for code generation", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arch_errors_fatal", OPT_ID.OPT_arch__errors__fatal, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arch_only", OPT_ID.OPT_arch__only, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arch", OPT_ID.OPT_arch, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arcmt-check", OPT_ID.OPT_arcmt_check, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Check for ARC migration issues that need manual handling", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arcmt-migrate-emit-errors", OPT_ID.OPT_arcmt_migrate_emit_arc_errors, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Emit ARC errors even if the migrator can fix them", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arcmt-migrate-report-output", OPT_ID.OPT_arcmt_migrate_report_output, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Output path for the plist report", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arcmt-migrate", OPT_ID.OPT_arcmt_migrate, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply modifications and produces temporary files that conform to ARC", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "arcmt-modify", OPT_ID.OPT_arcmt_modify, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply modifications to files to conform to ARC", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "assemble", OPT_ID.OPT__assemble, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_S, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "assert=", OPT_ID.OPT__assert_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_A, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "assert", OPT_ID.OPT__assert, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_A, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-dump-all", OPT_ID.OPT_ast_dump_all, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs and then debug dump them, forcing deserialization", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-dump-filter", OPT_ID.OPT_ast_dump_filter, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use with -ast-dump or -ast-print to dump/print only AST declaration nodes having a certain substring in a qualified name. Use -ast-list to list all filterable declaration node names.", "<dump_filter>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-dump-lookups", OPT_ID.OPT_ast_dump_lookups, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs and then debug dump their name lookup tables", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-dump", OPT_ID.OPT_ast_dump, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs and then debug dump them", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-list", OPT_ID.OPT_ast_list, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs and print the list of declaration node qualified names", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-merge", OPT_ID.OPT_ast_merge, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Merge the given AST file into the translation unit being compiled.", "<ast file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-print", OPT_ID.OPT_ast_print, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs and then pretty-print them", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ast-view", OPT_ID.OPT_ast_view, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs and view them with GraphViz", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "autocomplete=", OPT_ID.OPT_autocomplete, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "aux-triple", OPT_ID.OPT_aux_triple, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Auxiliary target triple.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "A", OPT_ID.OPT_A, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.RenderJoined), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "a", OPT_ID.OPT_a, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "backend-option", OPT_ID.OPT_backend_option, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Additional arguments to forward to LLVM backend (during code gen)", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "bigobj", OPT_ID.OPT__SLASH_bigobj, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "bind_at_load", OPT_ID.OPT_bind__at__load, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "bootclasspath=", OPT_ID.OPT__bootclasspath_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fbootclasspath_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "bootclasspath", OPT_ID.OPT__bootclasspath, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fbootclasspath_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Brepro-", OPT_ID.OPT__SLASH_Brepro_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_mincremental_linker_compatible, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Emit an object file which cannot be reproduced over time", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Brepro", OPT_ID.OPT__SLASH_Brepro, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_mno_incremental_linker_compatible, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Emit an object file which can be reproduced over time", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Bt+", OPT_ID.OPT__SLASH_Bt_plus, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Bt", OPT_ID.OPT__SLASH_Bt, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "bundle_loader", OPT_ID.OPT_bundle__loader, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "bundle", OPT_ID.OPT_bundle, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "B", OPT_ID.OPT_B, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Add <dir> to search path for binaries and object files used implicitly", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "b", OPT_ID.OPT_b, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "c-isystem", OPT_ID.OPT_c_isystem, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add directory to the C SYSTEM include search path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "cc1as", OPT_ID.OPT_cc1as, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cc1", OPT_ID.OPT_cc1, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-arcmt-check", OPT_ID.OPT_ccc_arcmt_check, OptionKind.FlagClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Check for ARC migration issues that need manual handling", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-arcmt-migrate", OPT_ID.OPT_ccc_arcmt_migrate, OptionKind.SeparateClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Apply modifications and produces temporary files that conform to ARC", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-arcmt-modify", OPT_ID.OPT_ccc_arcmt_modify, OptionKind.FlagClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Apply modifications to files to conform to ARC", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-gcc-name", OPT_ID.OPT_ccc_gcc_name, OptionKind.SeparateClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Name for native GCC compiler", "<gcc-path>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-install-dir", OPT_ID.OPT_ccc_install_dir, OptionKind.SeparateClass, OPT_ID.OPT_internal_debug_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden | ClangFlags.CoreOption), 0, "Simulate installation in the given directory", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-objcmt-migrate", OPT_ID.OPT_ccc_objcmt_migrate, OptionKind.SeparateClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Apply modifications and produces temporary files to migrate to modern ObjC syntax", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-pch-is-pch", OPT_ID.OPT_ccc_pch_is_pch, OptionKind.FlagClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Use lazy PCH for precompiled headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-pch-is-pth", OPT_ID.OPT_ccc_pch_is_pth, OptionKind.FlagClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Use pretokenized headers for precompiled headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-print-bindings", OPT_ID.OPT_ccc_print_bindings, OptionKind.FlagClass, OPT_ID.OPT_internal_debug_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden | ClangFlags.CoreOption), 0, "Show bindings of tools to actions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-print-phases", OPT_ID.OPT_ccc_print_phases, OptionKind.FlagClass, OPT_ID.OPT_internal_debug_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden | ClangFlags.CoreOption), 0, "Dump list of actions to perform", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ccc-", OPT_ID.OPT_ccc_, OptionKind.JoinedClass, OPT_ID.OPT_internal_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "CC", OPT_ID.OPT_CC, OptionKind.FlagClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Include comments from within macros in preprocessed output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cfg-add-implicit-dtors", OPT_ID.OPT_analysis_CFGAddImplicitDtors, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add C++ implicit destructors to CFGs for all analyses", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cfguard", OPT_ID.OPT_cfguard, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Emit tables required for Windows Control Flow Guard.", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "cgthreads", OPT_ID.OPT__SLASH_cgthreads, OptionKind.JoinedClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "chain-include", OPT_ID.OPT_chain_include, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include and chain a header file after turning it into PCH", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-denorms-are-zero", OPT_ID.OPT_cl_denorms_are_zero, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Allow denormals to be flushed to zero.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-ext=", OPT_ID.OPT_cl_ext_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "OpenCL only. Enable or disable OpenCL extensions. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-fast-relaxed-math", OPT_ID.OPT_cl_fast_relaxed_math, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-finite-math-only", OPT_ID.OPT_cl_finite_math_only, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-fp32-correctly-rounded-divide-sqrt", OPT_ID.OPT_cl_fp32_correctly_rounded_divide_sqrt, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-kernel-arg-info", OPT_ID.OPT_cl_kernel_arg_info, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Generate kernel argument metadata.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-mad-enable", OPT_ID.OPT_cl_mad_enable, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Allow use of less precise MAD computations in the generated binary.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-no-signed-zeros", OPT_ID.OPT_cl_no_signed_zeros, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-opt-disable", OPT_ID.OPT_cl_opt_disable, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. This option disables all optimizations. By default optimizations are enabled.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-single-precision-constant", OPT_ID.OPT_cl_single_precision_constant, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Treat double precision floating-point constant as single precision constant.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-std=", OPT_ID.OPT_cl_std_EQ, OptionKind.JoinedClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL language standard to compile for.", null, "cl,CL,cl1.1,CL1.1,cl1.2,CL1.2,cl2.0,CL2.0"));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-strict-aliasing", OPT_ID.OPT_cl_strict_aliasing, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. This option is added for compatibility with OpenCL 1.0.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-uniform-work-group-size", OPT_ID.OPT_cl_uniform_work_group_size, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cl-unsafe-math-optimizations", OPT_ID.OPT_cl_unsafe_math_optimizations, OptionKind.FlagClass, OPT_ID.OPT_opencl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "CLASSPATH=", OPT_ID.OPT__CLASSPATH_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fclasspath_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "classpath=", OPT_ID.OPT__classpath_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fclasspath_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "CLASSPATH", OPT_ID.OPT__CLASSPATH, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fclasspath_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "classpath", OPT_ID.OPT__classpath, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fclasspath_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "client_name", OPT_ID.OPT_client__name, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "clr", OPT_ID.OPT__SLASH_clr, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "code-completion-at=", OPT_ID.OPT_code_completion_at_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_code_completion_at, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "code-completion-at", OPT_ID.OPT_code_completion_at, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Dump code-completion information at a location", "<file>:<line>:<column>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "code-completion-brief-comments", OPT_ID.OPT_code_completion_brief_comments, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include brief documentation comments in code-completion results.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "code-completion-macros", OPT_ID.OPT_code_completion_macros, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include macros in code-completion results", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "code-completion-patterns", OPT_ID.OPT_code_completion_patterns, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include code patterns in code-completion results", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "combine", OPT_ID.OPT_combine, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "comments-in-macros", OPT_ID.OPT__comments_in_macros, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_CC, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "comments", OPT_ID.OPT__comments, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_C, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "compatibility_version", OPT_ID.OPT_compatibility__version, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "compile", OPT_ID.OPT__compile, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_c, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "compress-debug-sections=", OPT_ID.OPT_compress_debug_sections_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "DWARF debug sections compression type", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "compress-debug-sections", OPT_ID.OPT_compress_debug_sections, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "DWARF debug sections compression", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "config-system-dir=", OPT_ID.OPT_config_system_dir_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "System directory for configuration files", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "config-user-dir=", OPT_ID.OPT_config_user_dir_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "User directory for configuration files", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "config", OPT_ID.OPT_config, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Specifies configuration file", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "constant-cfstrings", OPT_ID.OPT__constant_cfstrings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-cfg-checksum", OPT_ID.OPT_coverage_cfg_checksum, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit CFG checksum for functions in .gcno files.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-data-file=", OPT_ID.OPT_coverage_data_file_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_coverage_data_file, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-data-file", OPT_ID.OPT_coverage_data_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit coverage data to this filename.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-exit-block-before-body", OPT_ID.OPT_coverage_exit_block_before_body, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit the exit block before the body blocks in .gcno files.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-no-function-names-in-data", OPT_ID.OPT_coverage_no_function_names_in_data, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit function names in .gcda files.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-notes-file=", OPT_ID.OPT_coverage_notes_file_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_coverage_notes_file, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-notes-file", OPT_ID.OPT_coverage_notes_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit coverage notes to this filename.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "coverage-version=", OPT_ID.OPT_coverage_version_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Four-byte version string for gcov files.", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "coverage", OPT_ID.OPT_coverage, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cpp-precomp", OPT_ID.OPT_cpp_precomp, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cpp", OPT_ID.OPT_cpp, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "cuda-compile-host-device", OPT_ID.OPT_cuda_compile_host_device, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Compile CUDA code for both host and device (default).  Has no effect on non-CUDA compilations.", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "cuda-device-only", OPT_ID.OPT_cuda_device_only, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Compile CUDA code for device only", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "cuda-gpu-arch=", OPT_ID.OPT_cuda_gpu_arch_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "CUDA GPU architecture (e.g. sm_35).  May be specified more than once.", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "cuda-host-only", OPT_ID.OPT_cuda_host_only, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Compile CUDA code for host only.  Has no effect on non-CUDA compilations.", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "cuda-noopt-device-debug", OPT_ID.OPT_cuda_noopt_device_debug, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Enable device-side debug info generation. Disables ptxas optimizations.", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "cuda-path-ignore-env", OPT_ID.OPT_cuda_path_ignore_env, OptionKind.FlagClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Ignore environment variables to detect CUDA installation", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "cuda-path=", OPT_ID.OPT_cuda_path_EQ, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, 0, 0, "CUDA installation path", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "current_version", OPT_ID.OPT_current__version, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "cxx-isystem", OPT_ID.OPT_cxx_isystem, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add directory to the C++ SYSTEM include search path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "C", OPT_ID.OPT_C, OptionKind.FlagClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Include comments in preprocessed output", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "C", OPT_ID.OPT__SLASH_C, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_C, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Don't discard comments when preprocessing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "c", OPT_ID.OPT_c, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Only run preprocess, compile, and assemble steps", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "c", OPT_ID.OPT__SLASH_c, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_c, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Compile only", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "d1PP", OPT_ID.OPT__SLASH_d1PP, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_dD, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Retain macro definitions in /E mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "d1reportAllClassLayout", OPT_ID.OPT__SLASH_d1reportAllClassLayout, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fdump_record_layouts, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Dump record layout information", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "d2FastFail", OPT_ID.OPT__SLASH_d2FastFail, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "d2Zi+", OPT_ID.OPT__SLASH_d2Zi_PLUS, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dA", OPT_ID.OPT_dA, OptionKind.FlagClass, OPT_ID.OPT_d_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dD", OPT_ID.OPT_dD, OptionKind.FlagClass, OPT_ID.OPT_d_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Print macro definitions in -E mode in addition to normal output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dead_strip", OPT_ID.OPT_dead__strip, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "debug-forward-template-params", OPT_ID.OPT_debug_forward_template_params, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit complete descriptions of template parameters in forward declarations", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "debug-info-kind=", OPT_ID.OPT_debug_info_kind_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "debug-info-macro", OPT_ID.OPT_debug_info_macro, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Emit macro debug information", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "debug=", OPT_ID.OPT__debug_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_g_Flag, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "debugger-tuning=", OPT_ID.OPT_debugger_tuning_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "debug", OPT_ID.OPT__debug, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_g_Flag, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "define-macro=", OPT_ID.OPT__define_macro_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_D, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "define-macro", OPT_ID.OPT__define_macro, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_D, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "defsym", OPT_ID.OPT_defsym, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Define a value for a symbol", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "dependencies", OPT_ID.OPT__dependencies, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_M, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dependency-dot", OPT_ID.OPT_dependency_dot, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Filename to write DOT-formatted header dependencies to", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dependency-file", OPT_ID.OPT_dependency_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Filename (or -) to write dependency output to", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "dependent-lib=", OPT_ID.OPT_dependent_lib, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add dependent library", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "detailed-preprocessing-record", OPT_ID.OPT_detailed_preprocessing_record, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "include a detailed record of preprocessing actions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "diagnostic-log-file", OPT_ID.OPT_diagnostic_log_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Filename (or -) to log diagnostics to", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "diagnostics:caret", OPT_ID.OPT__SLASH_diagnostics_caret, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable caret and column diagnostics (on by default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "diagnostics:classic", OPT_ID.OPT__SLASH_diagnostics_classic, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable column and caret diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "diagnostics:column", OPT_ID.OPT__SLASH_diagnostics_column, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable caret diagnostics but keep column info", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-free", OPT_ID.OPT_disable_free, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable freeing of memory on exit", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-lifetime-markers", OPT_ID.OPT_disable_lifetimemarkers, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable lifetime-markers emission even when optimizations are enabled", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-llvm-optzns", OPT_ID.OPT_disable_llvm_optzns, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_disable_llvm_passes, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-llvm-passes", OPT_ID.OPT_disable_llvm_passes, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use together with -emit-llvm to get pristine LLVM IR from the frontend by not running any LLVM passes at all", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-llvm-verifier", OPT_ID.OPT_disable_llvm_verifier, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Don't run the LLVM IR verifier pass", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-O0-optnone", OPT_ID.OPT_disable_O0_optnone, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable adding the optnone attribute to functions at O0", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-objc-default-synthesize-properties", OPT_ID.OPT_disable_objc_default_synthesize_properties, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "disable the default synthesis of Objective-C properties", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "disable-red-zone", OPT_ID.OPT_disable_red_zone, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not emit code that uses the red zone.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "discard-value-names", OPT_ID.OPT_discard_value_names, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Discard value names in LLVM IR", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dI", OPT_ID.OPT_dI, OptionKind.FlagClass, OPT_ID.OPT_d_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Print include directives in -E mode in addition to normal output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dM", OPT_ID.OPT_dM, OptionKind.FlagClass, OPT_ID.OPT_d_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Print macro definitions in -E mode instead of normal output", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "doc", OPT_ID.OPT__SLASH_doc, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "driver-mode=", OPT_ID.OPT_driver_mode, OptionKind.JoinedClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Set the driver mode to either 'gcc', 'g++', 'cpp', or 'cl'", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dump-coverage-mapping", OPT_ID.OPT_dump_coverage_mapping, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Dump the coverage mapping records, for testing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dump-deserialized-decls", OPT_ID.OPT_dump_deserialized_pch_decls, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Dump declarations that are deserialized from PCH, for testing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dump-raw-tokens", OPT_ID.OPT_dump_raw_tokens, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Lex file in raw mode and dump raw tokens", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dump-tokens", OPT_ID.OPT_dump_tokens, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Run preprocessor, dump internal rep of tokens", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dumpmachine", OPT_ID.OPT_dumpmachine, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dumpspecs", OPT_ID.OPT_dumpspecs, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dumpversion", OPT_ID.OPT_dumpversion, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dwarf-column-info", OPT_ID.OPT_dwarf_column_info, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Turn on column location information.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dwarf-debug-flags", OPT_ID.OPT_dwarf_debug_flags, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "The string to embed in the Dwarf debug flags record.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dwarf-debug-producer", OPT_ID.OPT_dwarf_debug_producer, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "The string to embed in the Dwarf debug AT_producer record.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dwarf-explicit-import", OPT_ID.OPT_dwarf_explicit_import, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate explicit import from anonymous namespace to containing scope", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dwarf-ext-refs", OPT_ID.OPT_dwarf_ext_refs, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate debug info with external references to clang modules or precompiled headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dwarf-version=", OPT_ID.OPT_dwarf_version_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "dyld-prefix=", OPT_ID.OPT__dyld_prefix_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "dyld-prefix", OPT_ID.OPT__dyld_prefix, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT__dyld_prefix_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dylib_file", OPT_ID.OPT_dylib__file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dylinker_install_name", OPT_ID.OPT_dylinker__install__name, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dylinker", OPT_ID.OPT_dylinker, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dynamiclib", OPT_ID.OPT_dynamiclib, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "dynamic", OPT_ID.OPT_dynamic, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "D", OPT_ID.OPT_D, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Define <macro> to <value> (or 1 if <value> omitted)", "<macro>=<value>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "D", OPT_ID.OPT__SLASH_D, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_D, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Define macro", "<macro[=value]>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "d", OPT_ID.OPT_d_Flag, OptionKind.FlagClass, OPT_ID.OPT_d_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "d", OPT_ID.OPT_d_Joined, OptionKind.JoinedClass, OPT_ID.OPT_d_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "EB", OPT_ID.OPT_EB, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mbig_endian, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "EH", OPT_ID.OPT__SLASH_EH, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Exception handling model", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "EL", OPT_ID.OPT_EL, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mlittle_endian, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-ast", OPT_ID.OPT_emit_ast, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Emit Clang AST files for source inputs", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-codegen-only", OPT_ID.OPT_emit_codegen_only, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate machine code, but discard output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-html", OPT_ID.OPT_emit_html, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Output input source as HTML", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-llvm-bc", OPT_ID.OPT_emit_llvm_bc, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs then convert to LLVM, emit .bc file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-llvm-only", OPT_ID.OPT_emit_llvm_only, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Build ASTs and convert to LLVM, discarding output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-llvm-uselists", OPT_ID.OPT_emit_llvm_uselists, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Preserve order of LLVM use-lists when serializing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-llvm", OPT_ID.OPT_emit_llvm, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use the LLVM representation for assembler and object files", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-module-interface", OPT_ID.OPT_emit_module_interface, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate pre-compiled module file from a C++ module interface", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-module", OPT_ID.OPT_emit_module, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate pre-compiled module file from a module map", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-obj", OPT_ID.OPT_emit_obj, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit native object files", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-pch", OPT_ID.OPT_emit_pch, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate pre-compiled header file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "emit-pth", OPT_ID.OPT_emit_pth, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate pre-tokenized header file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "enable-split-dwarf", OPT_ID.OPT_enable_split_dwarf, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use split dwarf/Fission", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "encoding=", OPT_ID.OPT__encoding_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fencoding_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "encoding", OPT_ID.OPT__encoding, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fencoding_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "entry", OPT_ID.OPT__entry, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_e, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Eonly", OPT_ID.OPT_Eonly, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Just run preprocessor, no output (for timings)", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "EP", OPT_ID.OPT__SLASH_EP, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable linemarker output and preprocess to stdout", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "error-on-deserialized-decl=", OPT_ID.OPT_error_on_deserialized_pch_decl_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_error_on_deserialized_pch_decl, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "error-on-deserialized-decl", OPT_ID.OPT_error_on_deserialized_pch_decl, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit error if a specific declaration is deserialized from PCH, for testing", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "errorReport", OPT_ID.OPT__SLASH_errorReport, OptionKind.JoinedClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "execution-charset:", OPT_ID.OPT__SLASH_execution_charset, OptionKind.JoinedClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_fexec_charset_EQ, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Runtime encoding, supports only UTF-8", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "exported_symbols_list", OPT_ID.OPT_exported__symbols__list, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "extdirs=", OPT_ID.OPT__extdirs_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fextdirs_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "extdirs", OPT_ID.OPT__extdirs, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fextdirs_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "extra-warnings", OPT_ID.OPT__extra_warnings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_W_Joined, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "E", OPT_ID.OPT_E, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Only run the preprocessor", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "E", OPT_ID.OPT__SLASH_E, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_E, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Preprocess to stdout", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "e", OPT_ID.OPT_e, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "faccess-control", OPT_ID.OPT_faccess_control, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "faddress-space-map-mangling=", OPT_ID.OPT_faddress_space_map_mangling_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the mode for address space map based mangling; OpenCL testing purposes only", "<yes|no|target>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "faggressive-function-elimination", OPT_ID.OPT_aggressive_function_elimination_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-commons", OPT_ID.OPT_align_commons_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-functions=", OPT_ID.OPT_falign_functions_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-functions", OPT_ID.OPT_align_functions_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-jumps=", OPT_ID.OPT_falign_jumps_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-jumps", OPT_ID.OPT_align_jumps_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-labels=", OPT_ID.OPT_falign_labels_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-labels", OPT_ID.OPT_align_labels_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-loops=", OPT_ID.OPT_falign_loops_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "falign-loops", OPT_ID.OPT_align_loops_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "faligned-alloc-unavailable", OPT_ID.OPT_aligned_alloc_unavailable, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Aligned allocation/deallocation functions are unavailable", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "faligned-allocation", OPT_ID.OPT_faligned_allocation, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable C++17 aligned allocation functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "faligned-new=", OPT_ID.OPT_faligned_new_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "faligned-new", OPT_ID.OPT_anonymous_14, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_faligned_allocation, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fall-intrinsics", OPT_ID.OPT_all_intrinsics_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "fallback", OPT_ID.OPT__SLASH_fallback, OptionKind.FlagClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Fall back to cl.exe if clang-cl fails to compile", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fallow-editor-placeholders", OPT_ID.OPT_fallow_editor_placeholders, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Treat editor placeholders as valid source code", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fallow-half-arguments-and-returns", OPT_ID.OPT_fallow_half_arguments_and_returns, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Allow function arguments and returns of type half", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fallow-pch-with-compiler-errors", OPT_ID.OPT_fallow_pch_with_errors, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Accept a PCH file that was created with compiler errors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fallow-unsupported", OPT_ID.OPT_fallow_unsupported, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "faltivec", OPT_ID.OPT_faltivec, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fansi-escape-codes", OPT_ID.OPT_fansi_escape_codes, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Use ANSI escape codes for diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fapple-kext", OPT_ID.OPT_fapple_kext, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use Apple's kernel extensions ABI", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fapple-pragma-pack", OPT_ID.OPT_fapple_pragma_pack, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable Apple gcc-compatible #pragma pack handling", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fapplication-extension", OPT_ID.OPT_fapplication_extension, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Restrict code to those available for App Extensions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fasm-blocks", OPT_ID.OPT_fasm_blocks, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fasm", OPT_ID.OPT_fasm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fassociative-math", OPT_ID.OPT_fassociative_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fassume-sane-operator-new", OPT_ID.OPT_fassume_sane_operator_new, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fastcp", OPT_ID.OPT_fastcp, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fastf", OPT_ID.OPT_fastf, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fast", OPT_ID.OPT_fast, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fasynchronous-unwind-tables", OPT_ID.OPT_fasynchronous_unwind_tables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fauto-profile-accurate", OPT_ID.OPT_fauto_profile_accurate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_fprofile_sample_accurate, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fauto-profile=", OPT_ID.OPT_fauto_profile_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fprofile_sample_use_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fauto-profile", OPT_ID.OPT_fauto_profile, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_fprofile_sample_use, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fautolink", OPT_ID.OPT_fautolink, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fautomatic", OPT_ID.OPT_automatic_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "favor", OPT_ID.OPT__SLASH_favor, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "FA", OPT_ID.OPT__SLASH_FA, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Output assembly code file during compilation", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "FA", OPT_ID.OPT__SLASH_FA_joined, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fa", OPT_ID.OPT__SLASH_Fa, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Output assembly code to this file during compilation (with /FA)", "<file or directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbackslash", OPT_ID.OPT_backslash_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbacktrace", OPT_ID.OPT_backtrace_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fblas-matmul-limit=", OPT_ID.OPT_fblas_matmul_limit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fblocks-runtime-optional", OPT_ID.OPT_fblocks_runtime_optional, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Weakly link in the blocks runtime", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fblocks", OPT_ID.OPT_fblocks, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable the 'blocks' language feature", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbootclasspath=", OPT_ID.OPT_fbootclasspath_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fborland-extensions", OPT_ID.OPT_fborland_extensions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Accept non-standard constructs supported by the Borland compiler", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbounds-check", OPT_ID.OPT_bounds_check_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbracket-depth=", OPT_ID.OPT_fbracket_depth_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbracket-depth", OPT_ID.OPT_fbracket_depth, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Maximum nesting level for parentheses, brackets, and braces", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbranch-count-reg", OPT_ID.OPT_branch_count_reg_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbuild-session-file=", OPT_ID.OPT_fbuild_session_file, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Use the last modification time of <file> as the build session timestamp", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbuild-session-timestamp=", OPT_ID.OPT_fbuild_session_timestamp, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Time when the current build session started", "<time since Epoch in seconds>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbuiltin-module-map", OPT_ID.OPT_fbuiltin_module_map, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Load the clang builtins module map file.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fbuiltin", OPT_ID.OPT_fbuiltin, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcaller-saves", OPT_ID.OPT_caller_saves_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcaret-diagnostics-max-lines", OPT_ID.OPT_fcaret_diagnostics_max_lines, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the maximum number of source lines to show in a caret diagnostic", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcaret-diagnostics", OPT_ID.OPT_fcaret_diagnostics, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcf-protection=", OPT_ID.OPT_fcf_protection_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Instrument control-flow architecture protection. Options: return, branch, full, none.", null, "return,branch,full,none"));
            InfoTable.Add(new OptionInfo(prefix_1, "fcf-protection", OPT_ID.OPT_fcf_protection, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_fcf_protection_EQ, "full\0", (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Enable cf-protection in 'full' mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcheck-array-temporaries", OPT_ID.OPT_check_array_temporaries_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcheck-new", OPT_ID.OPT_fcheck_new_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcheck=", OPT_ID.OPT_fcheck_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fclang-abi-compat=", OPT_ID.OPT_fclang_abi_compat_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Attempt to match the ABI of Clang <version>", "<version>", "<major>.<minor>,latest"));
            InfoTable.Add(new OptionInfo(prefix_1, "fclasspath=", OPT_ID.OPT_fclasspath_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcoarray=", OPT_ID.OPT_fcoarray_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcolor-diagnostics", OPT_ID.OPT_fcolor_diagnostics, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Use colors in diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcomment-block-commands=", OPT_ID.OPT_fcomment_block_commands, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Treat each comma separated argument in <arg> as a documentation comment block command", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcommon", OPT_ID.OPT_fcommon, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcompile-resource=", OPT_ID.OPT_fcompile_resource_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconcepts-ts", OPT_ID.OPT_fconcepts_ts, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable C++ Extensions for Concepts.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconst-strings", OPT_ID.OPT_fconst_strings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use a const qualified type for string literals in C and ObjC", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstant-cfstrings", OPT_ID.OPT_fconstant_cfstrings, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstant-string-class=", OPT_ID.OPT_fconstant_string_class_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstant-string-class", OPT_ID.OPT_fconstant_string_class, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Specify the class to use for constant Objective-C string objects.", "<class name>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstexpr-backtrace-limit=", OPT_ID.OPT_fconstexpr_backtrace_limit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstexpr-backtrace-limit", OPT_ID.OPT_fconstexpr_backtrace_limit, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the maximum number of entries to print in a constexpr evaluation backtrace (0 = no limit).", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstexpr-depth=", OPT_ID.OPT_fconstexpr_depth_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstexpr-depth", OPT_ID.OPT_fconstexpr_depth, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Maximum depth of recursive constexpr function calls", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstexpr-steps=", OPT_ID.OPT_fconstexpr_steps_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconstexpr-steps", OPT_ID.OPT_fconstexpr_steps, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Maximum number of steps in constexpr function evaluation", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fconvert=", OPT_ID.OPT_fconvert_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcoroutines-ts", OPT_ID.OPT_fcoroutines_ts, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Enable support for the C++ Coroutines TS", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcoverage-mapping", OPT_ID.OPT_fcoverage_mapping, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Generate coverage mapping to enable code coverage analysis", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcray-pointer", OPT_ID.OPT_cray_pointer_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcreate-profile", OPT_ID.OPT_fcreate_profile, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcuda-allow-variadic-functions", OPT_ID.OPT_fcuda_allow_variadic_functions, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Allow variadic functions in CUDA device code.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcuda-approx-transcendentals", OPT_ID.OPT_fcuda_approx_transcendentals, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use approximate transcendental functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcuda-flush-denormals-to-zero", OPT_ID.OPT_fcuda_flush_denormals_to_zero, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Flush denormal floating point values to zero in CUDA device mode.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcuda-include-gpubinary", OPT_ID.OPT_fcuda_include_gpubinary, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Incorporate CUDA device-side binary into host object file.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcuda-is-device", OPT_ID.OPT_fcuda_is_device, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate code for CUDA device", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcuda-rdc", OPT_ID.OPT_fcuda_rdc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, "Generate relocatable device code, also known as separate compilation mode.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcxx-exceptions", OPT_ID.OPT_fcxx_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable C++ exceptions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fcxx-modules", OPT_ID.OPT_fcxx_modules, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "FC", OPT_ID.OPT__SLASH_FC, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fd-lines-as-code", OPT_ID.OPT_d_lines_as_code_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fd-lines-as-comments", OPT_ID.OPT_d_lines_as_comments_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdata-sections", OPT_ID.OPT_fdata_sections, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Place each data in its own section (ELF Only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-compilation-dir", OPT_ID.OPT_fdebug_compilation_dir, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "The compilation directory to embed in the debug info.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-info-for-profiling", OPT_ID.OPT_fdebug_info_for_profiling, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Emit extra debug info to make sample profile more accurate.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-macro", OPT_ID.OPT_fdebug_macro, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Emit macro debug information", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-pass-arguments", OPT_ID.OPT_fdebug_pass_arguments, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-pass-manager", OPT_ID.OPT_fdebug_pass_manager, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Prints debug information for the new pass manager", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-pass-structure", OPT_ID.OPT_fdebug_pass_structure, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-prefix-map=", OPT_ID.OPT_fdebug_prefix_map_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "remap file source paths in debug info", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebug-types-section", OPT_ID.OPT_fdebug_types_section, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Place debug types in their own section (ELF Only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebugger-cast-result-to-id", OPT_ID.OPT_fdebugger_cast_result_to_id, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable casting unknown expression results to id", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebugger-objc-literal", OPT_ID.OPT_fdebugger_objc_literal, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable special debugger support for Objective-C subscripting and literals", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdebugger-support", OPT_ID.OPT_fdebugger_support, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable special debugger support behavior", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdeclspec", OPT_ID.OPT_fdeclspec, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Allow __declspec as a keyword", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdefault-calling-conv=", OPT_ID.OPT_fdefault_calling_conv_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set default calling convention", null, "cdecl,fastcall,stdcall,vectorcall,regcall"));
            InfoTable.Add(new OptionInfo(prefix_1, "fdefault-double-8", OPT_ID.OPT_default_double_8_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdefault-inline", OPT_ID.OPT_default_inline_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdefault-integer-8", OPT_ID.OPT_default_integer_8_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdefault-real-8", OPT_ID.OPT_default_real_8_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdefer-pop", OPT_ID.OPT_anonymous_6, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdelayed-template-parsing", OPT_ID.OPT_fdelayed_template_parsing, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Parse templated function definitions at the end of the translation unit", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdelete-null-pointer-checks", OPT_ID.OPT_delete_null_pointer_checks_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdenormal-fp-math=", OPT_ID.OPT_fdenormal_fp_math_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdepfile-entry=", OPT_ID.OPT_fdepfile_entry, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdeprecated-macro", OPT_ID.OPT_fdeprecated_macro, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Defines the __DEPRECATED macro", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdevirtualize-speculatively", OPT_ID.OPT_devirtualize_speculatively_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdevirtualize", OPT_ID.OPT_devirtualize_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-absolute-paths", OPT_ID.OPT_fdiagnostics_absolute_paths, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Print absolute paths in diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-color=", OPT_ID.OPT_fdiagnostics_color_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-color", OPT_ID.OPT_fdiagnostics_color, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-fixit-info", OPT_ID.OPT_fdiagnostics_fixit_info, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-format=", OPT_ID.OPT_fdiagnostics_format_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-format", OPT_ID.OPT_fdiagnostics_format, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Change diagnostic formatting to match IDE and command line tools", null, "clang,msvc,msvc-fallback,vi"));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-hotness-threshold=", OPT_ID.OPT_fdiagnostics_hotness_threshold_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Prevent optimization remarks from being output if they do not have at least this profile count", "<number>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-parseable-fixits", OPT_ID.OPT_fdiagnostics_parseable_fixits, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Print fix-its in machine parseable form", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-print-source-range-info", OPT_ID.OPT_fdiagnostics_print_source_range_info, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Print source range spans in numeric form", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-show-category=", OPT_ID.OPT_fdiagnostics_show_category_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-show-category", OPT_ID.OPT_fdiagnostics_show_category, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Print diagnostic category", null, "none,id,name"));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-show-hotness", OPT_ID.OPT_fdiagnostics_show_hotness, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable profile hotness information in diagnostic line", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-show-location=", OPT_ID.OPT_fdiagnostics_show_location_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-show-note-include-stack", OPT_ID.OPT_fdiagnostics_show_note_include_stack, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Display include stacks for diagnostic notes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-show-option", OPT_ID.OPT_fdiagnostics_show_option, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Print option name with mappable diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiagnostics-show-template-tree", OPT_ID.OPT_fdiagnostics_show_template_tree, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Print a template comparison tree for differing templates", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdisable-module-hash", OPT_ID.OPT_fdisable_module_hash, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable the module hash", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdiscard-value-names", OPT_ID.OPT_fdiscard_value_names, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Discard value names in LLVM IR", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdollar-ok", OPT_ID.OPT_dollar_ok_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdollars-in-identifiers", OPT_ID.OPT_fdollars_in_identifiers, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Allow '$' in identifiers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdouble-square-bracket-attributes", OPT_ID.OPT_fdouble_square_bracket_attributes, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Enable '[[]]' attributes in all C and C++ language modes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdump-fortran-optimized", OPT_ID.OPT_dump_fortran_optimized_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdump-fortran-original", OPT_ID.OPT_dump_fortran_original_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdump-parse-tree", OPT_ID.OPT_dump_parse_tree_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdump-record-layouts-simple", OPT_ID.OPT_fdump_record_layouts_simple, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Dump record layout information in a simple form used for testing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdump-record-layouts", OPT_ID.OPT_fdump_record_layouts, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Dump record layout information", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdump-vtable-layouts", OPT_ID.OPT_fdump_vtable_layouts, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Dump the layouts of all vtables that will be emitted in a translation unit", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdwarf-directory-asm", OPT_ID.OPT_fdwarf_directory_asm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdwarf-exceptions", OPT_ID.OPT_fdwarf_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use DWARF style exceptions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fdwarf2-cfi-asm", OPT_ID.OPT_fdwarf2_cfi_asm, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fd", OPT_ID.OPT__SLASH_Fd, OptionKind.JoinedClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "felide-constructors", OPT_ID.OPT_felide_constructors, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "feliminate-unused-debug-symbols", OPT_ID.OPT_feliminate_unused_debug_symbols, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "feliminate-unused-debug-types", OPT_ID.OPT_eliminate_unused_debug_types_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fembed-bitcode-marker", OPT_ID.OPT_fembed_bitcode_marker, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fembed_bitcode_EQ, "marker\0", 0, 0, "Embed placeholder LLVM IR data as a marker", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fembed-bitcode=", OPT_ID.OPT_fembed_bitcode_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Embed LLVM bitcode (option: off, all, bitcode, marker)", "<option>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fembed-bitcode", OPT_ID.OPT_fembed_bitcode, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_fembed_bitcode_EQ, "all\0", 0, 0, "Embed LLVM IR bitcode as data", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "femit-all-decls", OPT_ID.OPT_femit_all_decls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Emit all declarations, even if unused", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "femit-coverage-data", OPT_ID.OPT_femit_coverage_data, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Instrument the program to emit gcov coverage data when run.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "femit-coverage-notes", OPT_ID.OPT_femit_coverage_notes, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit a gcov coverage notes file when compiling.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "femulated-tls", OPT_ID.OPT_femulated_tls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use emutls functions to access thread_local variables", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fencode-extended-block-signature", OPT_ID.OPT_fencode_extended_block_signature, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "enable extended encoding of block type signature", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fencoding=", OPT_ID.OPT_fencoding_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ferror-limit=", OPT_ID.OPT_ferror_limit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ferror-limit", OPT_ID.OPT_ferror_limit, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the maximum number of errors to emit before stopping (0 = no limit).", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fescaping-block-tail-calls", OPT_ID.OPT_fescaping_block_tail_calls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexceptions", OPT_ID.OPT_fexceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable support for exception handling", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexcess-precision=", OPT_ID.OPT_fexcess_precision_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexec-charset=", OPT_ID.OPT_fexec_charset_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexpensive-optimizations", OPT_ID.OPT_anonymous_4, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexperimental-isel", OPT_ID.OPT_fexperimental_isel, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enables the experimental global instruction selector", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexperimental-new-pass-manager", OPT_ID.OPT_fexperimental_new_pass_manager, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enables an experimental new pass manager in LLVM.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fextdirs=", OPT_ID.OPT_fextdirs_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fextended-identifiers", OPT_ID.OPT_anonymous_8, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexternal-blas", OPT_ID.OPT_external_blas_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fexternc-nounwind", OPT_ID.OPT_fexternc_nounwind, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Assume all functions with C linkage do not unwind", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fe", OPT_ID.OPT__SLASH_Fe, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set output executable file or directory (ends in / or \\)", "<file or directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ff2c", OPT_ID.OPT_f2c_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffake-address-space-map", OPT_ID.OPT_ffake_address_space_map, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use a fake address space map; OpenCL testing purposes only", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffast-math", OPT_ID.OPT_ffast_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Allow aggressive, lossy floating-point optimizations", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffat-lto-objects", OPT_ID.OPT_fat_lto_objects_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffine-grained-bitfield-accesses", OPT_ID.OPT_ffine_grained_bitfield_accesses, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use separate accesses for bitfields with legal widths and alignments.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffinite-math-only", OPT_ID.OPT_ffinite_math_only, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffixed-form", OPT_ID.OPT_fixed_form_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffixed-line-length-", OPT_ID.OPT_ffixed_line_length_VALUE, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffixed-r19", OPT_ID.OPT_ffixed_r19, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Reserve the r19 register (Hexagon only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffixed-r9", OPT_ID.OPT_ffixed_r9, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Reserve the r9 register (ARM only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffixed-x18", OPT_ID.OPT_ffixed_x18, OptionKind.FlagClass, OPT_ID.OPT_m_aarch64_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Reserve the x18 register (AArch64 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffloat-store", OPT_ID.OPT_float_store_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffor-scope", OPT_ID.OPT_ffor_scope, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fforbid-guard-variables", OPT_ID.OPT_fforbid_guard_variables, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit an error if a C++ static local initializer would need a guard variable", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fforce-addr", OPT_ID.OPT_force_addr, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fforce-enable-int128", OPT_ID.OPT_fforce_enable_int128, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable support for int128_t type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffp-contract=", OPT_ID.OPT_ffp_contract, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Form fused FP ops (e.g. FMAs): fast (everywhere) | on (according to FP_CONTRACT pragma, default) | off (never fuse)", null, "fast,on,off"));
            InfoTable.Add(new OptionInfo(prefix_1, "ffpe-trap=", OPT_ID.OPT_ffpe_trap_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffree-form", OPT_ID.OPT_free_form_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffree-line-length-", OPT_ID.OPT_ffree_line_length_VALUE, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffreestanding", OPT_ID.OPT_ffreestanding, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Assert that the compilation takes place in a freestanding environment", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffriend-injection", OPT_ID.OPT_friend_injection_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffrontend-optimize", OPT_ID.OPT_frontend_optimize_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffunction-attribute-list", OPT_ID.OPT_function_attribute_list_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ffunction-sections", OPT_ID.OPT_ffunction_sections, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Place each function in its own section (ELF Only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgcse-after-reload", OPT_ID.OPT_gcse_after_reload_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgcse-las", OPT_ID.OPT_gcse_las_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgcse-sm", OPT_ID.OPT_gcse_sm_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgcse", OPT_ID.OPT_gcse_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgnu-inline-asm", OPT_ID.OPT_fgnu_inline_asm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgnu-keywords", OPT_ID.OPT_fgnu_keywords, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Allow GNU-extension keywords regardless of language standard", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgnu-runtime", OPT_ID.OPT_fgnu_runtime, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate output compatible with the standard GNU Objective-C runtime", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgnu89-inline", OPT_ID.OPT_fgnu89_inline, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use the gnu89 inline semantics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fgnu", OPT_ID.OPT_gnu_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fheinous-gnu-extensions", OPT_ID.OPT_fheinous_gnu_extensions, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fhonor-infinites", OPT_ID.OPT_anonymous_10, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fhonor_infinities, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fhonor-infinities", OPT_ID.OPT_fhonor_infinities, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fhonor-nans", OPT_ID.OPT_fhonor_nans, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fhosted", OPT_ID.OPT_fhosted, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fident", OPT_ID.OPT_ident_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "filelist", OPT_ID.OPT_filelist, OptionKind.SeparateClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "filetype", OPT_ID.OPT_filetype, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Specify the output file type ('asm', 'null', or 'obj')", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fimplement-inlines", OPT_ID.OPT_implement_inlines_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fimplicit-module-maps", OPT_ID.OPT_fimplicit_module_maps, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Implicitly search the file system for module map files.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fimplicit-modules", OPT_ID.OPT_fimplicit_modules, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fimplicit-none", OPT_ID.OPT_implicit_none_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fimplicit-templates", OPT_ID.OPT_implicit_templates_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finclude-default-header", OPT_ID.OPT_finclude_default_header, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include the default header file for OpenCL", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "find-pch-source=", OPT_ID.OPT_find_pch_source_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "When building a pch, try to find the input file in include directories, as if it had been included by the argument passed to this flag.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "findirect-virtual-calls", OPT_ID.OPT_anonymous_12, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fapple_kext, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finit-character=", OPT_ID.OPT_finit_character_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finit-integer=", OPT_ID.OPT_finit_integer_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finit-local-zero", OPT_ID.OPT_init_local_zero_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finit-logical=", OPT_ID.OPT_finit_logical_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finit-real=", OPT_ID.OPT_finit_real_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finline-functions-called-once", OPT_ID.OPT_inline_functions_called_once_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finline-functions", OPT_ID.OPT_finline_functions, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Inline suitable functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finline-hint-functions", OPT_ID.OPT_finline_hint_functions, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Inline functions which are (explicitly or implicitly) marked inline", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finline-limit=", OPT_ID.OPT_finline_limit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finline-limit", OPT_ID.OPT_finline_limit_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finline-small-functions", OPT_ID.OPT_inline_small_functions_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finline", OPT_ID.OPT_finline, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finput-charset=", OPT_ID.OPT_finput_charset_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finstrument-function-entry-bare", OPT_ID.OPT_finstrument_function_entry_bare, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Instrument function entry only, after inlining, without arguments to the instrumentation call", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finstrument-functions-after-inlining", OPT_ID.OPT_finstrument_functions_after_inlining, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Like -finstrument-functions, but insert the calls after inlining", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finstrument-functions", OPT_ID.OPT_finstrument_functions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Generate calls to instrument function entry and exit", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "finteger-4-integer-8", OPT_ID.OPT_integer_4_integer_8_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fintegrated-as", OPT_ID.OPT_fintegrated_as, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Enable the integrated assembler", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fintrinsic-modules-path", OPT_ID.OPT_intrinsic_modules_path_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fipa-cp", OPT_ID.OPT_ipa_cp_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fivopts", OPT_ID.OPT_ivopts_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fix-only-warnings", OPT_ID.OPT_fix_only_warnings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply fix-it advice only for warnings, not errors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fix-what-you-can", OPT_ID.OPT_fix_what_you_can, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply fix-it advice even in the presence of unfixable errors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fixit-recompile", OPT_ID.OPT_fixit_recompile, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply fix-it changes and recompile", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fixit-to-temporary", OPT_ID.OPT_fixit_to_temp, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply fix-it changes to temporary files", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fixit=", OPT_ID.OPT_fixit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply fix-it advice creating a file with the given suffix", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fixit", OPT_ID.OPT_fixit, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Apply fix-it advice to the input source", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "FI", OPT_ID.OPT__SLASH_FI, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_include, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Include file before parsing", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fi", OPT_ID.OPT__SLASH_Fi, OptionKind.JoinedClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Set preprocess output file name (with /P)", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fjump-tables", OPT_ID.OPT_fjump_tables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fkeep-inline-functions", OPT_ID.OPT_anonymous_26_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flat_namespace", OPT_ID.OPT_flat__namespace, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flax-vector-conversions", OPT_ID.OPT_flax_vector_conversions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flimit-debug-info", OPT_ID.OPT_flimit_debug_info, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_standalone_debug, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flimited-precision=", OPT_ID.OPT_flimited_precision_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flto-jobs=", OPT_ID.OPT_flto_jobs_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flto-unit", OPT_ID.OPT_flto_unit, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit IR to support LTO unit features (CFI, whole program vtable opt)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flto-visibility-public-std", OPT_ID.OPT_flto_visibility_public_std, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use public LTO visibility for classes in std and stdext namespaces", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "flto=", OPT_ID.OPT_flto_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Set LTO mode to either 'full' or 'thin'", null, "thin,full"));
            InfoTable.Add(new OptionInfo(prefix_1, "flto", OPT_ID.OPT_flto, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Enable LTO in 'full' mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmacro-backtrace-limit=", OPT_ID.OPT_fmacro_backtrace_limit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmacro-backtrace-limit", OPT_ID.OPT_fmacro_backtrace_limit, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the maximum number of entries to print in a macro expansion backtrace (0 = no limit).", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmath-errno", OPT_ID.OPT_fmath_errno, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Require math functions to indicate errors by setting errno", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmax-array-constructor=", OPT_ID.OPT_fmax_array_constructor_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmax-errors=", OPT_ID.OPT_fmax_errors_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmax-identifier-length", OPT_ID.OPT_max_identifier_length_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmax-stack-var-size=", OPT_ID.OPT_fmax_stack_var_size_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmax-subrecord-length=", OPT_ID.OPT_fmax_subrecord_length_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmax-type-align=", OPT_ID.OPT_fmax_type_align_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specify the maximum alignment to enforce on pointers lacking an explicit alignment", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmerge-all-constants", OPT_ID.OPT_fmerge_all_constants, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmerge-constants", OPT_ID.OPT_merge_constants_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmerge-functions", OPT_ID.OPT_fmerge_functions, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Permit merging of identical functions when optimizing.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmessage-length=", OPT_ID.OPT_fmessage_length_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmessage-length", OPT_ID.OPT_fmessage_length, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Format message diagnostics so that they fit within N columns or fewer, when possible.", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-feature", OPT_ID.OPT_fmodule_feature, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable <feature> in module map requires declarations", "<feature>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-file-deps", OPT_ID.OPT_fmodule_file_deps, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-file=", OPT_ID.OPT_fmodule_file, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.", "[<name>=]<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-format=", OPT_ID.OPT_fmodule_format_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Select the container format for clang modules and PCH. Supported options are 'raw' and 'obj'.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-implementation-of", OPT_ID.OPT_fmodule_implementation_of, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fmodule_name_EQ, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-map-file-home-is-cwd", OPT_ID.OPT_fmodule_map_file_home_is_cwd, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use the current working directory as the home directory of module maps specified by -fmodule-map-file=<FILE>", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-map-file=", OPT_ID.OPT_fmodule_map_file, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Load this module map file", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-maps", OPT_ID.OPT_fmodule_maps, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fimplicit_module_maps, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-name=", OPT_ID.OPT_fmodule_name_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Specify the name of the module to build", "<name>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-name", OPT_ID.OPT_fmodule_name, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fmodule_name_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodule-private", OPT_ID.OPT_module_private_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-cache-path=", OPT_ID.OPT_fmodules_cache_path, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Specify the module cache path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-codegen", OPT_ID.OPT_fmodules_codegen, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate code for uses of this module that assumes an explicit object file will be built for the module", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-debuginfo", OPT_ID.OPT_fmodules_debuginfo, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate debug info for types in an object file built from this module and do not generate them elsewhere", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-decluse", OPT_ID.OPT_fmodules_decluse, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Require declaration of modules used within a module", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-disable-diagnostic-validation", OPT_ID.OPT_fmodules_disable_diagnostic_validation, OptionKind.FlagClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable validation of the diagnostic options when loading the module", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-embed-all-files", OPT_ID.OPT_fmodules_embed_all_files, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Embed the contents of all files read by this compilation into the produced module file.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-embed-file=", OPT_ID.OPT_fmodules_embed_file_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Embed the contents of the specified file into the module file being compiled.", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-hash-content", OPT_ID.OPT_fmodules_hash_content, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable hashing the content of a module file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-ignore-macro=", OPT_ID.OPT_fmodules_ignore_macro, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Ignore the definition of the given macro when building and loading modules", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-local-submodule-visibility", OPT_ID.OPT_fmodules_local_submodule_visibility, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enforce name visibility rules across submodules of the same top-level module.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-prune-after=", OPT_ID.OPT_fmodules_prune_after, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specify the interval (in seconds) after which a module file will be considered unused", "<seconds>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-prune-interval=", OPT_ID.OPT_fmodules_prune_interval, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specify the interval (in seconds) between attempts to prune the module cache", "<seconds>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-search-all", OPT_ID.OPT_fmodules_search_all, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Search even non-imported modules to resolve references", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-strict-decluse", OPT_ID.OPT_fmodules_strict_decluse, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Like -fmodules-decluse but requires all headers to be in modules", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-ts", OPT_ID.OPT_fmodules_ts, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable support for the C++ Modules TS", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-user-build-path", OPT_ID.OPT_fmodules_user_build_path, OptionKind.SeparateClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Specify the module user build path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-validate-once-per-build-session", OPT_ID.OPT_fmodules_validate_once_per_build_session, OptionKind.FlagClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Don't verify input files for the modules if the module has been successfully validated or loaded during this build session", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules-validate-system-headers", OPT_ID.OPT_fmodules_validate_system_headers, OptionKind.FlagClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Validate the system headers that a module depends on when loading the module", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodules", OPT_ID.OPT_fmodules, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Enable the 'modules' language feature", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodulo-sched-allow-regmoves", OPT_ID.OPT_modulo_sched_allow_regmoves_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmodulo-sched", OPT_ID.OPT_modulo_sched_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fms-compatibility-version=", OPT_ID.OPT_fms_compatibility_version, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fms-compatibility", OPT_ID.OPT_fms_compatibility, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable full Microsoft Visual C++ compatibility", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fms-extensions", OPT_ID.OPT_fms_extensions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Accept some non-standard constructs supported by the Microsoft compiler", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fms-memptr-rep=", OPT_ID.OPT_fms_memptr_rep_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fms-volatile", OPT_ID.OPT_fms_volatile, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmsc-version=", OPT_ID.OPT_fmsc_version, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmudflapth", OPT_ID.OPT_fmudflapth, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fmudflap", OPT_ID.OPT_fmudflap, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fm", OPT_ID.OPT__SLASH_Fm, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnative-half-arguments-and-returns", OPT_ID.OPT_fnative_half_arguments_and_returns, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use the native __fp16 type for arguments and returns (and skip ABI-specific lowering)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnative-half-type", OPT_ID.OPT_fnative_half_type, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use the native half type for __fp16 instead of promoting to float", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnested-functions", OPT_ID.OPT_fnested_functions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnew-alignment=", OPT_ID.OPT_fnew_alignment_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specifies the largest alignment guaranteed by '::operator new(size_t)'", "<align>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnew-alignment", OPT_ID.OPT_anonymous_13, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fnew_alignment_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnext-runtime", OPT_ID.OPT_fnext_runtime, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-access-control", OPT_ID.OPT_fno_access_control, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable C++ access control", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-aggressive-function-elimination", OPT_ID.OPT_aggressive_function_elimination_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-align-commons", OPT_ID.OPT_align_commons_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-align-functions", OPT_ID.OPT_align_functions_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-align-jumps", OPT_ID.OPT_align_jumps_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-align-labels", OPT_ID.OPT_align_labels_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-align-loops", OPT_ID.OPT_align_loops_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-aligned-allocation", OPT_ID.OPT_fno_aligned_allocation, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-aligned-new", OPT_ID.OPT_anonymous_15, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_aligned_allocation, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-all-intrinsics", OPT_ID.OPT_all_intrinsics_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-allow-editor-placeholders", OPT_ID.OPT_fno_allow_editor_placeholders, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-altivec", OPT_ID.OPT_fno_altivec, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-apple-pragma-pack", OPT_ID.OPT_fno_apple_pragma_pack, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-application-extension", OPT_ID.OPT_fno_application_extension, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-asm-blocks", OPT_ID.OPT_fno_asm_blocks, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-asm", OPT_ID.OPT_fno_asm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-associative-math", OPT_ID.OPT_fno_associative_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-assume-sane-operator-new", OPT_ID.OPT_fno_assume_sane_operator_new, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Don't assume that C++'s global operator new can't alias any pointer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-asynchronous-unwind-tables", OPT_ID.OPT_fno_asynchronous_unwind_tables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-auto-profile-accurate", OPT_ID.OPT_fno_auto_profile_accurate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_fno_profile_sample_accurate, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-auto-profile", OPT_ID.OPT_fno_auto_profile, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_fno_profile_sample_use, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-autolink", OPT_ID.OPT_fno_autolink, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Disable generation of linker directives for automatic library linking", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-automatic", OPT_ID.OPT_automatic_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-backslash", OPT_ID.OPT_backslash_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-backtrace", OPT_ID.OPT_backtrace_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-bitfield-type-align", OPT_ID.OPT_fno_bitfield_type_align, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Ignore bit-field types when aligning structures", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-blocks", OPT_ID.OPT_fno_blocks, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-borland-extensions", OPT_ID.OPT_fno_borland_extensions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-bounds-check", OPT_ID.OPT_bounds_check_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-branch-count-reg", OPT_ID.OPT_branch_count_reg_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-builtin-", OPT_ID.OPT_fno_builtin_, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable implicit builtin knowledge of a specific function", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-builtin", OPT_ID.OPT_fno_builtin, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable implicit builtin knowledge of functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-caller-saves", OPT_ID.OPT_caller_saves_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-caret-diagnostics", OPT_ID.OPT_fno_caret_diagnostics, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-check-array-temporaries", OPT_ID.OPT_check_array_temporaries_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-check-new", OPT_ID.OPT_fcheck_new_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-color-diagnostics", OPT_ID.OPT_fno_color_diagnostics, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-common", OPT_ID.OPT_fno_common, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Compile common globals like normal definitions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-const-strings", OPT_ID.OPT_fno_const_strings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Don't use a const qualified type for string literals in C and ObjC", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-constant-cfstrings", OPT_ID.OPT_fno_constant_cfstrings, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable creation of CodeFoundation-type constant strings", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-coroutines-ts", OPT_ID.OPT_fno_coroutines_ts, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-coverage-mapping", OPT_ID.OPT_fno_coverage_mapping, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Disable code coverage analysis", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-crash-diagnostics", OPT_ID.OPT_fno_crash_diagnostics, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, "Disable auto-generation of preprocessed source files and a script for reproduction during a clang crash", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-cray-pointer", OPT_ID.OPT_cray_pointer_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-cuda-approx-transcendentals", OPT_ID.OPT_fno_cuda_approx_transcendentals, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-cuda-flush-denormals-to-zero", OPT_ID.OPT_fno_cuda_flush_denormals_to_zero, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-cuda-host-device-constexpr", OPT_ID.OPT_fno_cuda_host_device_constexpr, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Don't treat unattributed constexpr functions as __host__ __device__.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-cuda-rdc", OPT_ID.OPT_fno_cuda_rdc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-cxx-exceptions", OPT_ID.OPT_fno_cxx_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-cxx-modules", OPT_ID.OPT_fno_cxx_modules, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-d-lines-as-code", OPT_ID.OPT_d_lines_as_code_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-d-lines-as-comments", OPT_ID.OPT_d_lines_as_comments_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-data-sections", OPT_ID.OPT_fno_data_sections, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-debug-info-for-profiling", OPT_ID.OPT_fno_debug_info_for_profiling, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Do not emit extra debug info for sample profiler.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-debug-macro", OPT_ID.OPT_fno_debug_macro, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Do not emit macro debug information", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-debug-pass-manager", OPT_ID.OPT_fno_debug_pass_manager, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disables debug printing for the new pass manager", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-debug-types-section", OPT_ID.OPT_fno_debug_types_section, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-declspec", OPT_ID.OPT_fno_declspec, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disallow __declspec as a keyword", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-default-double-8", OPT_ID.OPT_default_double_8_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-default-inline", OPT_ID.OPT_default_inline_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-default-integer-8", OPT_ID.OPT_default_integer_8_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-default-real-8", OPT_ID.OPT_default_real_8_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-defer-pop", OPT_ID.OPT_anonymous_7, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-delayed-template-parsing", OPT_ID.OPT_fno_delayed_template_parsing, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Disable delayed template parsing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-delete-null-pointer-checks", OPT_ID.OPT_delete_null_pointer_checks_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-deprecated-macro", OPT_ID.OPT_fno_deprecated_macro, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Undefines the __DEPRECATED macro", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-devirtualize-speculatively", OPT_ID.OPT_devirtualize_speculatively_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-devirtualize", OPT_ID.OPT_devirtualize_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-diagnostics-color", OPT_ID.OPT_fno_diagnostics_color, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-diagnostics-fixit-info", OPT_ID.OPT_fno_diagnostics_fixit_info, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not include fixit information in diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-diagnostics-show-hotness", OPT_ID.OPT_fno_diagnostics_show_hotness, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-diagnostics-show-note-include-stack", OPT_ID.OPT_fno_diagnostics_show_note_include_stack, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-diagnostics-show-option", OPT_ID.OPT_fno_diagnostics_show_option, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-diagnostics-use-presumed-location", OPT_ID.OPT_fno_diagnostics_use_presumed_location, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Ignore #line directives when displaying diagnostic locations", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-discard-value-names", OPT_ID.OPT_fno_discard_value_names, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Do not discard value names in LLVM IR", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-dollar-ok", OPT_ID.OPT_dollar_ok_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-dollars-in-identifiers", OPT_ID.OPT_fno_dollars_in_identifiers, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disallow '$' in identifiers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-double-square-bracket-attributes", OPT_ID.OPT_fno_double_square_bracket_attributes, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Disable '[[]]' attributes in all C and C++ language modes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-dump-fortran-optimized", OPT_ID.OPT_dump_fortran_optimized_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-dump-fortran-original", OPT_ID.OPT_dump_fortran_original_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-dump-parse-tree", OPT_ID.OPT_dump_parse_tree_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-dwarf-directory-asm", OPT_ID.OPT_fno_dwarf_directory_asm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-dwarf2-cfi-asm", OPT_ID.OPT_fno_dwarf2_cfi_asm, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-elide-constructors", OPT_ID.OPT_fno_elide_constructors, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable C++ copy constructor elision", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-elide-type", OPT_ID.OPT_fno_elide_type, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not elide types when printing diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-eliminate-unused-debug-symbols", OPT_ID.OPT_fno_eliminate_unused_debug_symbols, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-eliminate-unused-debug-types", OPT_ID.OPT_eliminate_unused_debug_types_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-emulated-tls", OPT_ID.OPT_fno_emulated_tls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-escaping-block-tail-calls", OPT_ID.OPT_fno_escaping_block_tail_calls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-exceptions", OPT_ID.OPT_fno_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-expensive-optimizations", OPT_ID.OPT_anonymous_5, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-experimental-isel", OPT_ID.OPT_fno_experimental_isel, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disables the experimental global instruction selector", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-experimental-new-pass-manager", OPT_ID.OPT_fno_experimental_new_pass_manager, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disables an experimental new pass manager in LLVM.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-extended-identifiers", OPT_ID.OPT_anonymous_9, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-external-blas", OPT_ID.OPT_external_blas_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-f2c", OPT_ID.OPT_f2c_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-fast-math", OPT_ID.OPT_fno_fast_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-fat-lto-objects", OPT_ID.OPT_fat_lto_objects_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-fine-grained-bitfield-accesses", OPT_ID.OPT_fno_fine_grained_bitfield_accesses, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use large-integer access for consecutive bitfield runs.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-finite-math-only", OPT_ID.OPT_fno_finite_math_only, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-fixed-form", OPT_ID.OPT_fixed_form_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-float-store", OPT_ID.OPT_float_store_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-for-scope", OPT_ID.OPT_fno_for_scope, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-force-enable-int128", OPT_ID.OPT_fno_force_enable_int128, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable support for int128_t type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-free-form", OPT_ID.OPT_free_form_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-friend-injection", OPT_ID.OPT_friend_injection_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-frontend-optimize", OPT_ID.OPT_frontend_optimize_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-function-attribute-list", OPT_ID.OPT_function_attribute_list_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-function-sections", OPT_ID.OPT_fno_function_sections, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gcse-after-reload", OPT_ID.OPT_gcse_after_reload_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gcse-las", OPT_ID.OPT_gcse_las_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gcse-sm", OPT_ID.OPT_gcse_sm_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gcse", OPT_ID.OPT_gcse_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gnu-inline-asm", OPT_ID.OPT_fno_gnu_inline_asm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Disable GNU style inline asm", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gnu-keywords", OPT_ID.OPT_fno_gnu_keywords, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gnu89-inline", OPT_ID.OPT_fno_gnu89_inline, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-gnu", OPT_ID.OPT_gnu_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-honor-infinites", OPT_ID.OPT_anonymous_11, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_honor_infinities, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-honor-infinities", OPT_ID.OPT_fno_honor_infinities, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-honor-nans", OPT_ID.OPT_fno_honor_nans, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-ident", OPT_ID.OPT_ident_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-implement-inlines", OPT_ID.OPT_implement_inlines_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-implicit-module-maps", OPT_ID.OPT_fno_implicit_module_maps, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-implicit-modules", OPT_ID.OPT_fno_implicit_modules, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-implicit-none", OPT_ID.OPT_implicit_none_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-implicit-templates", OPT_ID.OPT_implicit_templates_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-init-local-zero", OPT_ID.OPT_init_local_zero_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-inline-functions-called-once", OPT_ID.OPT_inline_functions_called_once_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-inline-functions", OPT_ID.OPT_fno_inline_functions, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-inline-limit", OPT_ID.OPT_finline_limit_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-inline-small-functions", OPT_ID.OPT_inline_small_functions_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-inline", OPT_ID.OPT_fno_inline, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-integer-4-integer-8", OPT_ID.OPT_integer_4_integer_8_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-integrated-as", OPT_ID.OPT_fno_integrated_as, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.DriverOption), 0, "Disable the integrated assembler", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-intrinsic-modules-path", OPT_ID.OPT_intrinsic_modules_path_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-ipa-cp", OPT_ID.OPT_ipa_cp_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-ivopts", OPT_ID.OPT_ivopts_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-jump-tables", OPT_ID.OPT_fno_jump_tables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not use jump tables for lowering switches", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-keep-inline-functions", OPT_ID.OPT_anonymous_26_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-lax-vector-conversions", OPT_ID.OPT_fno_lax_vector_conversions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disallow implicit conversions between vectors with a different number of elements or different element types", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-limit-debug-info", OPT_ID.OPT_fno_limit_debug_info, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fstandalone_debug, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-lto-unit", OPT_ID.OPT_fno_lto_unit, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-lto", OPT_ID.OPT_fno_lto, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable LTO mode (default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-math-builtin", OPT_ID.OPT_fno_math_builtin, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Disable implicit builtin knowledge of math functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-math-errno", OPT_ID.OPT_fno_math_errno, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-max-identifier-length", OPT_ID.OPT_max_identifier_length_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-max-type-align", OPT_ID.OPT_fno_max_type_align, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-merge-all-constants", OPT_ID.OPT_fno_merge_all_constants, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disallow merging of constants", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-merge-constants", OPT_ID.OPT_merge_constants_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-module-file-deps", OPT_ID.OPT_fno_module_file_deps, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-module-maps", OPT_ID.OPT_fno_module_maps, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_implicit_module_maps, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-module-private", OPT_ID.OPT_module_private_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-modules-decluse", OPT_ID.OPT_fno_modules_decluse, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-modules-error-recovery", OPT_ID.OPT_fno_modules_error_recovery, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not automatically import modules for error recovery", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-modules-global-index", OPT_ID.OPT_fno_modules_global_index, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not automatically generate or update the global module index", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-modules-search-all", OPT_ID.OPT_fno_modules_search_all, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-modules", OPT_ID.OPT_fno_modules, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-modulo-sched-allow-regmoves", OPT_ID.OPT_modulo_sched_allow_regmoves_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-modulo-sched", OPT_ID.OPT_modulo_sched_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-ms-compatibility", OPT_ID.OPT_fno_ms_compatibility, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-ms-extensions", OPT_ID.OPT_fno_ms_extensions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-non-call-exceptions", OPT_ID.OPT_non_call_exceptions_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-objc-arc-exceptions", OPT_ID.OPT_fno_objc_arc_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-objc-arc", OPT_ID.OPT_fno_objc_arc, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-objc-exceptions", OPT_ID.OPT_fno_objc_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-objc-infer-related-result-type", OPT_ID.OPT_fno_objc_infer_related_result_type, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "do not infer Objective-C related result type based on method family", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-objc-legacy-dispatch", OPT_ID.OPT_fno_objc_legacy_dispatch, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-objc-nonfragile-abi", OPT_ID.OPT_fno_objc_nonfragile_abi, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-objc-weak", OPT_ID.OPT_fno_objc_weak, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-omit-frame-pointer", OPT_ID.OPT_fno_omit_frame_pointer, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-openmp-cuda-mode", OPT_ID.OPT_fno_openmp_cuda_mode, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-openmp-simd", OPT_ID.OPT_fno_openmp_simd, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-openmp", OPT_ID.OPT_fno_openmp, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-operator-names", OPT_ID.OPT_fno_operator_names, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not treat C++ operator name keywords as synonyms for operators", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-optimize-sibling-calls", OPT_ID.OPT_fno_optimize_sibling_calls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-pack-derived", OPT_ID.OPT_pack_derived_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-pack-struct", OPT_ID.OPT_fno_pack_struct, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-pascal-strings", OPT_ID.OPT_fno_pascal_strings, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-pch-timestamp", OPT_ID.OPT_fno_pch_timestamp, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable inclusion of timestamp in precompiled headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-peel-loops", OPT_ID.OPT_peel_loops_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-permissive", OPT_ID.OPT_permissive_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-PIC", OPT_ID.OPT_fno_PIC, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-pic", OPT_ID.OPT_fno_pic, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-PIE", OPT_ID.OPT_fno_PIE, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-pie", OPT_ID.OPT_fno_pie, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-plt", OPT_ID.OPT_fno_plt, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not use the PLT to make function calls", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-prefetch-loop-arrays", OPT_ID.OPT_prefetch_loop_arrays_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-preserve-as-comments", OPT_ID.OPT_fno_preserve_as_comments, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not preserve comments in inline assembly", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-printf", OPT_ID.OPT_printf_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-arcs", OPT_ID.OPT_fno_profile_arcs, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-correction", OPT_ID.OPT_profile_correction_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-generate-sampling", OPT_ID.OPT_profile_generate_sampling_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-generate", OPT_ID.OPT_fno_profile_generate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Disable generation of profile instrumentation.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-instr-generate", OPT_ID.OPT_fno_profile_instr_generate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Disable generation of profile instrumentation.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-instr-use", OPT_ID.OPT_fno_profile_instr_use, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Disable using instrumentation data for profile-guided optimization", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-reusedist", OPT_ID.OPT_profile_reusedist_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-sample-accurate", OPT_ID.OPT_fno_profile_sample_accurate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-sample-use", OPT_ID.OPT_fno_profile_sample_use, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-use", OPT_ID.OPT_fno_profile_use, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_profile_instr_use, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile-values", OPT_ID.OPT_profile_values_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-profile", OPT_ID.OPT_profile_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-protect-parens", OPT_ID.OPT_protect_parens_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-range-check", OPT_ID.OPT_range_check_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-real-4-real-10", OPT_ID.OPT_real_4_real_10_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-real-4-real-16", OPT_ID.OPT_real_4_real_16_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-real-4-real-8", OPT_ID.OPT_real_4_real_8_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-real-8-real-10", OPT_ID.OPT_real_8_real_10_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-real-8-real-16", OPT_ID.OPT_real_8_real_16_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-real-8-real-4", OPT_ID.OPT_real_8_real_4_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-realloc-lhs", OPT_ID.OPT_realloc_lhs_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-reciprocal-math", OPT_ID.OPT_fno_reciprocal_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-recursive", OPT_ID.OPT_recursive_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-regs-graph", OPT_ID.OPT_regs_graph_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-relaxed-template-template-args", OPT_ID.OPT_fno_relaxed_template_template_args, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rename-registers", OPT_ID.OPT_rename_registers_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-reorder-blocks", OPT_ID.OPT_reorder_blocks_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-repack-arrays", OPT_ID.OPT_repack_arrays_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-reroll-loops", OPT_ID.OPT_fno_reroll_loops, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Turn off loop reroller", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rewrite-imports", OPT_ID.OPT_fno_rewrite_imports, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rewrite-includes", OPT_ID.OPT_fno_rewrite_includes, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-ripa", OPT_ID.OPT_ripa_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-ropi", OPT_ID.OPT_fno_ropi, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rounding-math", OPT_ID.OPT_rounding_math_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rtlib-add-rpath", OPT_ID.OPT_fno_rtlib_add_rpath, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, "Do not add -rpath with architecture-specific resource directory to the linker flags", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rtti-data", OPT_ID.OPT_fno_rtti_data, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Control emission of RTTI data", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rtti", OPT_ID.OPT_fno_rtti, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable generation of rtti information", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-rwpi", OPT_ID.OPT_fno_rwpi, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-address-poison-class-member-array-new-cookie", OPT_ID.OPT_fno_sanitize_address_poison_class_member_array_new_cookie, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable poisoning array cookies when using class member operator new[] in AddressSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-address-use-after-scope", OPT_ID.OPT_fno_sanitize_address_use_after_scope, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable use-after-scope detection in AddressSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-blacklist", OPT_ID.OPT_fno_sanitize_blacklist, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Don't use blacklist file for sanitizers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-cfi-cross-dso", OPT_ID.OPT_fno_sanitize_cfi_cross_dso, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable control flow integrity (CFI) checks for cross-DSO calls.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-coverage=", OPT_ID.OPT_fno_sanitize_coverage, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable specified features of coverage instrumentation for Sanitizers", null, "func,bb,edge,indirect-calls,trace-bb,trace-cmp,trace-div,trace-gep,8bit-counters,trace-pc,trace-pc-guard,no-prune,inline-8bit-counters"));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-memory-track-origins", OPT_ID.OPT_fno_sanitize_memory_track_origins, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable origins tracking in MemorySanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-memory-use-after-dtor", OPT_ID.OPT_fno_sanitize_memory_use_after_dtor, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable use-after-destroy detection in MemorySanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-minimal-runtime", OPT_ID.OPT_fno_sanitize_minimal_runtime, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-recover=", OPT_ID.OPT_fno_sanitize_recover_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable recovery for specified sanitizers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-recover", OPT_ID.OPT_fno_sanitize_recover, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-stats", OPT_ID.OPT_fno_sanitize_stats, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable sanitizer statistics gathering.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-thread-atomics", OPT_ID.OPT_fno_sanitize_thread_atomics, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable atomic operations instrumentation in ThreadSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-thread-func-entry-exit", OPT_ID.OPT_fno_sanitize_thread_func_entry_exit, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable function entry/exit instrumentation in ThreadSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-thread-memory-access", OPT_ID.OPT_fno_sanitize_thread_memory_access, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable memory access instrumentation in ThreadSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-trap=", OPT_ID.OPT_fno_sanitize_trap_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable trapping for specified sanitizers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize-undefined-trap-on-error", OPT_ID.OPT_fno_sanitize_undefined_trap_on_error, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sanitize=", OPT_ID.OPT_fno_sanitize_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-save-optimization-record", OPT_ID.OPT_fno_save_optimization_record, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-schedule-insns2", OPT_ID.OPT_schedule_insns2_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-schedule-insns", OPT_ID.OPT_schedule_insns_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-second-underscore", OPT_ID.OPT_second_underscore_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-see", OPT_ID.OPT_see_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-short-enums", OPT_ID.OPT_fno_short_enums, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-short-wchar", OPT_ID.OPT_fno_short_wchar, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Force wchar_t to be an unsigned int", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-show-column", OPT_ID.OPT_fno_show_column, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not include column number on diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-show-source-location", OPT_ID.OPT_fno_show_source_location, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not include source location information with diagnostics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sign-zero", OPT_ID.OPT_sign_zero_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-signaling-math", OPT_ID.OPT_fno_signaling_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-signaling-nans", OPT_ID.OPT_signaling_nans_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-signed-char", OPT_ID.OPT_fno_signed_char, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Char is unsigned", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-signed-wchar", OPT_ID.OPT_fno_signed_wchar, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use an unsigned type for wchar_t", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-signed-zeros", OPT_ID.OPT_fno_signed_zeros, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Allow optimizations that ignore the sign of floating point zeros", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-single-precision-constant", OPT_ID.OPT_single_precision_constant_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-sized-deallocation", OPT_ID.OPT_fno_sized_deallocation, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-slp-vectorize-aggressive", OPT_ID.OPT_anonymous_1, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_legacy_options_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-slp-vectorize", OPT_ID.OPT_fno_slp_vectorize, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-spec-constr-count", OPT_ID.OPT_spec_constr_count_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-spell-checking", OPT_ID.OPT_fno_spell_checking, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable spell-checking", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-split-dwarf-inlining", OPT_ID.OPT_fno_split_dwarf_inlining, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-stack-arrays", OPT_ID.OPT_stack_arrays_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-stack-check", OPT_ID.OPT_stack_check_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-stack-protector", OPT_ID.OPT_fno_stack_protector, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable the use of stack protectors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-stack-size-section", OPT_ID.OPT_fno_stack_size_section, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Don't emit section containing metadata on function stack sizes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-standalone-debug", OPT_ID.OPT_fno_standalone_debug, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Limit debug information produced to reduce size of debug binary", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-strength-reduce", OPT_ID.OPT_strength_reduce_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-strict-aliasing", OPT_ID.OPT_fno_strict_aliasing, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-strict-enums", OPT_ID.OPT_fno_strict_enums, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-strict-modules-decluse", OPT_ID.OPT_fno_modules_strict_decluse, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-strict-overflow", OPT_ID.OPT_fno_strict_overflow, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-strict-return", OPT_ID.OPT_fno_strict_return, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-strict-vtable-pointers", OPT_ID.OPT_fno_strict_vtable_pointers, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-struct-path-tbaa", OPT_ID.OPT_fno_struct_path_tbaa, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-threadsafe-statics", OPT_ID.OPT_fno_threadsafe_statics, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not emit code to make initialization of local statics thread safe", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tls-model", OPT_ID.OPT_tls_model_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tracer", OPT_ID.OPT_tracer_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-trapping-math", OPT_ID.OPT_fno_trapping_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree-dce", OPT_ID.OPT_tree_dce_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree-salias", OPT_ID.OPT_tree_salias_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree-slp-vectorize", OPT_ID.OPT_anonymous_20, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_slp_vectorize, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree-ter", OPT_ID.OPT_tree_ter_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree-vectorizer-verbose", OPT_ID.OPT_tree_vectorizer_verbose_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree-vectorize", OPT_ID.OPT_anonymous_18, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_vectorize, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree-vrp", OPT_ID.OPT_tree_vrp_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree_loop_im", OPT_ID.OPT_tree_loop_im_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree_loop_ivcanon", OPT_ID.OPT_tree_loop_ivcanon_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-tree_loop_linear", OPT_ID.OPT_tree_loop_linear_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-trigraphs", OPT_ID.OPT_fno_trigraphs, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Do not process trigraph sequences", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-underscoring", OPT_ID.OPT_underscoring_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unique-section-names", OPT_ID.OPT_fno_unique_section_names, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unit-at-a-time", OPT_ID.OPT_fno_unit_at_a_time, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unroll-all-loops", OPT_ID.OPT_unroll_all_loops_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unroll-loops", OPT_ID.OPT_fno_unroll_loops, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Turn off loop unroller", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unsafe-loop-optimizations", OPT_ID.OPT_unsafe_loop_optimizations_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unsafe-math-optimizations", OPT_ID.OPT_fno_unsafe_math_optimizations, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unsigned-char", OPT_ID.OPT_fno_unsigned_char, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unswitch-loops", OPT_ID.OPT_unswitch_loops_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-unwind-tables", OPT_ID.OPT_fno_unwind_tables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-use-cxa-atexit", OPT_ID.OPT_fno_use_cxa_atexit, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Don't use __cxa_atexit for calling destructors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-use-init-array", OPT_ID.OPT_fno_use_init_array, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Don't use .init_array instead of .ctors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-use-line-directives", OPT_ID.OPT_fno_use_line_directives, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-use-linker-plugin", OPT_ID.OPT_use_linker_plugin_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-validate-pch", OPT_ID.OPT_fno_validate_pch, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable validation of precompiled headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-var-tracking", OPT_ID.OPT_fno_var_tracking, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-variable-expansion-in-unroller", OPT_ID.OPT_variable_expansion_in_unroller_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-vect-cost-model", OPT_ID.OPT_vect_cost_model_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-vectorize", OPT_ID.OPT_fno_vectorize, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-verbose-asm", OPT_ID.OPT_fno_verbose_asm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-wchar", OPT_ID.OPT_fno_wchar, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable C++ builtin type wchar_t", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-web", OPT_ID.OPT_web_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-whole-file", OPT_ID.OPT_whole_file_fno, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-whole-program-vtables", OPT_ID.OPT_fno_whole_program_vtables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-whole-program", OPT_ID.OPT_whole_program_fno, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-working-directory", OPT_ID.OPT_fno_working_directory, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-wrapv", OPT_ID.OPT_fno_wrapv, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-xray-always-emit-customevents", OPT_ID.OPT_fnoxray_always_emit_customevents, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-xray-instrument", OPT_ID.OPT_fnoxray_instrument, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-zero-initialized-in-bss", OPT_ID.OPT_fno_zero_initialized_in_bss, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fno-zvector", OPT_ID.OPT_fno_zvector, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnon-call-exceptions", OPT_ID.OPT_non_call_exceptions_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnoopenmp-relocatable-target", OPT_ID.OPT_fnoopenmp_relocatable_target, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fnoopenmp-use-tls", OPT_ID.OPT_fnoopenmp_use_tls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-abi-version=", OPT_ID.OPT_fobjc_abi_version_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-arc-cxxlib=", OPT_ID.OPT_fobjc_arc_cxxlib_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Objective-C++ Automatic Reference Counting standard library kind", null, "libc++,libstdc++,none"));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-arc-exceptions", OPT_ID.OPT_fobjc_arc_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use EH-safe code when synthesizing retains and releases in -fobjc-arc", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-arc", OPT_ID.OPT_fobjc_arc, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Synthesize retain and release calls for Objective-C pointers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-atdefs", OPT_ID.OPT_fobjc_atdefs, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-call-cxx-cdtors", OPT_ID.OPT_fobjc_call_cxx_cdtors, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-dispatch-method=", OPT_ID.OPT_fobjc_dispatch_method_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Objective-C dispatch method to use", null, "legacy,non-legacy,mixed"));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-exceptions", OPT_ID.OPT_fobjc_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable Objective-C exceptions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-gc-only", OPT_ID.OPT_fobjc_gc_only, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use GC exclusively for Objective-C related memory management", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-gc", OPT_ID.OPT_fobjc_gc, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable Objective-C garbage collection", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-infer-related-result-type", OPT_ID.OPT_fobjc_infer_related_result_type, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-legacy-dispatch", OPT_ID.OPT_fobjc_legacy_dispatch, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-link-runtime", OPT_ID.OPT_fobjc_link_runtime, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-new-property", OPT_ID.OPT_fobjc_new_property, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-nonfragile-abi-version=", OPT_ID.OPT_fobjc_nonfragile_abi_version_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-nonfragile-abi", OPT_ID.OPT_fobjc_nonfragile_abi, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-runtime-has-weak", OPT_ID.OPT_fobjc_runtime_has_weak, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "The target Objective-C runtime supports ARC weak operations", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-runtime=", OPT_ID.OPT_fobjc_runtime_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specify the target Objective-C runtime kind and version", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-sender-dependent-dispatch", OPT_ID.OPT_fobjc_sender_dependent_dispatch, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-subscripting-legacy-runtime", OPT_ID.OPT_fobjc_subscripting_legacy_runtime, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Allow Objective-C array and dictionary subscripting in legacy runtime", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fobjc-weak", OPT_ID.OPT_fobjc_weak, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable ARC-style weak references in Objective-C", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fomit-frame-pointer", OPT_ID.OPT_fomit_frame_pointer, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-cuda-mode", OPT_ID.OPT_fopenmp_cuda_mode, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-dump-offload-linker-script", OPT_ID.OPT_fopenmp_dump_offload_linker_script, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-host-ir-file-path", OPT_ID.OPT_fopenmp_host_ir_file_path, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Path to the IR file produced by the frontend for the host.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-is-device", OPT_ID.OPT_fopenmp_is_device, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate code only for an OpenMP target device.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-relocatable-target", OPT_ID.OPT_fopenmp_relocatable_target, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-simd", OPT_ID.OPT_fopenmp_simd, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused), 0, "Emit OpenMP code only for SIMD-based constructs.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-targets=", OPT_ID.OPT_fopenmp_targets_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Specify comma-separated list of triples OpenMP offloading targets to be supported", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-use-tls", OPT_ID.OPT_fopenmp_use_tls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp-version=", OPT_ID.OPT_fopenmp_version_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp=", OPT_ID.OPT_fopenmp_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fopenmp", OPT_ID.OPT_fopenmp, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoArgumentUnused), 0, "Parse OpenMP pragmas and generate parallel code.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "foperator-arrow-depth=", OPT_ID.OPT_foperator_arrow_depth_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "foperator-arrow-depth", OPT_ID.OPT_foperator_arrow_depth, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Maximum number of 'operator->'s to call for a member access", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "foptimization-record-file=", OPT_ID.OPT_foptimization_record_file_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Specify the file name of any generated YAML optimization record", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "foptimize-sibling-calls", OPT_ID.OPT_foptimize_sibling_calls, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "for-linker=", OPT_ID.OPT__for_linker_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_Xlinker, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "for-linker", OPT_ID.OPT__for_linker, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_Xlinker, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "force-link=", OPT_ID.OPT__force_link_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_u, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "force-link", OPT_ID.OPT__force_link, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_u, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "force_cpusubtype_ALL", OPT_ID.OPT_force__cpusubtype__ALL, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "force_flat_namespace", OPT_ID.OPT_force__flat__namespace, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "force_load", OPT_ID.OPT_force__load, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "foutput-class-dir=", OPT_ID.OPT_foutput_class_dir_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "foverride-record-layout=", OPT_ID.OPT_foverride_record_layout_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Override record layouts with those in the given file", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fo", OPT_ID.OPT__SLASH_Fo, OptionKind.JoinedClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Set output object file, or directory (ends in / or \\) (with /c)", "<file or directory>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "fp:except-", OPT_ID.OPT__SLASH_fp_except_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_trapping_math, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "fp:except", OPT_ID.OPT__SLASH_fp_except, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_ftrapping_math, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "fp:fast", OPT_ID.OPT__SLASH_fp_fast, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_ffast_math, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "fp:precise", OPT_ID.OPT__SLASH_fp_precise, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_fast_math, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "fp:strict", OPT_ID.OPT__SLASH_fp_strict, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_fast_math, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpack-derived", OPT_ID.OPT_pack_derived_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpack-struct=", OPT_ID.OPT_fpack_struct_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specify the default maximum struct packing alignment", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpack-struct", OPT_ID.OPT_fpack_struct, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fparse-all-comments", OPT_ID.OPT_fparse_all_comments, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpascal-strings", OPT_ID.OPT_fpascal_strings, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Recognize and construct Pascal-style string literals", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpcc-struct-return", OPT_ID.OPT_fpcc_struct_return, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Override the default ABI to return all structs on the stack", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpch-preprocess", OPT_ID.OPT_fpch_preprocess, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpeel-loops", OPT_ID.OPT_peel_loops_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpermissive", OPT_ID.OPT_permissive_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fPIC", OPT_ID.OPT_fPIC, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpic", OPT_ID.OPT_fpic, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fPIE", OPT_ID.OPT_fPIE, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpie", OPT_ID.OPT_fpie, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fplt", OPT_ID.OPT_fplt, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use the PLT to make function calls", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fplugin=", OPT_ID.OPT_fplugin_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Load the named plugin (dynamic shared object)", "<dsopath>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprebuilt-module-path=", OPT_ID.OPT_fprebuilt_module_path, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Specify the prebuilt module path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprefetch-loop-arrays", OPT_ID.OPT_prefetch_loop_arrays_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpreserve-as-comments", OPT_ID.OPT_fpreserve_as_comments, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fpreserve-vec3-type", OPT_ID.OPT_fpreserve_vec3_type, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Preserve 3-component vector type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprintf", OPT_ID.OPT_printf_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-arcs", OPT_ID.OPT_fprofile_arcs, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-correction", OPT_ID.OPT_profile_correction_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-dir=", OPT_ID.OPT_fprofile_dir, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-generate-sampling", OPT_ID.OPT_profile_generate_sampling_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-generate=", OPT_ID.OPT_fprofile_generate_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Generate instrumented code to collect execution counts into <directory>/default.profraw (overridden by LLVM_PROFILE_FILE env var)", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-generate", OPT_ID.OPT_fprofile_generate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Generate instrumented code to collect execution counts into default.profraw (overridden by LLVM_PROFILE_FILE env var)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-instr-generate=", OPT_ID.OPT_fprofile_instr_generate_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-instr-generate", OPT_ID.OPT_fprofile_instr_generate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Generate instrumented code to collect execution counts into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-instr-use=", OPT_ID.OPT_fprofile_instr_use_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Use instrumentation data for profile-guided optimization", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-instr-use", OPT_ID.OPT_fprofile_instr_use, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-instrument-path=", OPT_ID.OPT_fprofile_instrument_path_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-instrument-use-path=", OPT_ID.OPT_fprofile_instrument_use_path_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Specify the profile path in PGO use compilation", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-instrument=", OPT_ID.OPT_fprofile_instrument_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable PGO instrumentation. The accepted value is clang, llvm, or none", null, "none,clang,llvm"));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-reusedist", OPT_ID.OPT_profile_reusedist_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-sample-accurate", OPT_ID.OPT_fprofile_sample_accurate, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Specifies that the sample profile is accurate", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-sample-use=", OPT_ID.OPT_fprofile_sample_use_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Enable sample-based profile guided optimizations", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-sample-use", OPT_ID.OPT_fprofile_sample_use, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-use=", OPT_ID.OPT_fprofile_use_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Use instrumentation data for profile-guided optimization. If pathname is a directory, it reads from <pathname>/default.profdata. Otherwise, it reads from file <pathname>.", "<pathname>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-use", OPT_ID.OPT_fprofile_use, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_fprofile_instr_use, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile-values", OPT_ID.OPT_profile_values_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprofile", OPT_ID.OPT_profile_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fprotect-parens", OPT_ID.OPT_protect_parens_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fp", OPT_ID.OPT__SLASH_Fp, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set pch filename (with /Yc and /Yu)", "<filename>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "framework", OPT_ID.OPT_framework, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frandom-seed=", OPT_ID.OPT_frandom_seed_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frange-check", OPT_ID.OPT_range_check_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freal-4-real-10", OPT_ID.OPT_real_4_real_10_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freal-4-real-16", OPT_ID.OPT_real_4_real_16_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freal-4-real-8", OPT_ID.OPT_real_4_real_8_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freal-8-real-10", OPT_ID.OPT_real_8_real_10_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freal-8-real-16", OPT_ID.OPT_real_8_real_16_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freal-8-real-4", OPT_ID.OPT_real_8_real_4_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frealloc-lhs", OPT_ID.OPT_realloc_lhs_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freciprocal-math", OPT_ID.OPT_freciprocal_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Allow division operations to be reassociated", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frecord-marker=", OPT_ID.OPT_frecord_marker_EQ, OptionKind.JoinedClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frecursive", OPT_ID.OPT_recursive_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freg-struct-return", OPT_ID.OPT_freg_struct_return, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Override the default ABI to return small structs in registers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fregs-graph", OPT_ID.OPT_regs_graph_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frelaxed-template-template-args", OPT_ID.OPT_frelaxed_template_template_args, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable C++17 relaxed template template argument matching", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frename-registers", OPT_ID.OPT_rename_registers_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freorder-blocks", OPT_ID.OPT_reorder_blocks_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frepack-arrays", OPT_ID.OPT_repack_arrays_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "freroll-loops", OPT_ID.OPT_freroll_loops, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Turn on loop reroller", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fretain-comments-from-system-headers", OPT_ID.OPT_fretain_comments_from_system_headers, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frewrite-imports", OPT_ID.OPT_frewrite_imports, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frewrite-includes", OPT_ID.OPT_frewrite_includes, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frewrite-map-file=", OPT_ID.OPT_frewrite_map_file_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frewrite-map-file", OPT_ID.OPT_frewrite_map_file, OptionKind.SeparateClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fripa", OPT_ID.OPT_ripa_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fropi", OPT_ID.OPT_fropi, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frounding-math", OPT_ID.OPT_rounding_math_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frtlib-add-rpath", OPT_ID.OPT_frtlib_add_rpath, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, "Add -rpath with architecture-specific resource directory to the linker flags", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frtti", OPT_ID.OPT_frtti, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "frwpi", OPT_ID.OPT_frwpi, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "FR", OPT_ID.OPT__SLASH_FR, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fr", OPT_ID.OPT__SLASH_Fr, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-address-field-padding=", OPT_ID.OPT_fsanitize_address_field_padding, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Level of field padding for AddressSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-address-globals-dead-stripping", OPT_ID.OPT_fsanitize_address_globals_dead_stripping, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable linker dead stripping of globals in AddressSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-address-poison-class-member-array-new-cookie", OPT_ID.OPT_fsanitize_address_poison_class_member_array_new_cookie, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable poisoning array cookies when using class member operator new[] in AddressSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-address-use-after-scope", OPT_ID.OPT_fsanitize_address_use_after_scope, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable use-after-scope detection in AddressSanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-blacklist=", OPT_ID.OPT_fsanitize_blacklist, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Path to blacklist file for sanitizers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-cfi-cross-dso", OPT_ID.OPT_fsanitize_cfi_cross_dso, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable control flow integrity (CFI) checks for cross-DSO calls.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-cfi-icall-generalize-pointers", OPT_ID.OPT_fsanitize_cfi_icall_generalize_pointers, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Generalize pointers in CFI indirect call type signature checks", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-8bit-counters", OPT_ID.OPT_fsanitize_coverage_8bit_counters, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable frequency counters in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-indirect-calls", OPT_ID.OPT_fsanitize_coverage_indirect_calls, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable sanitizer coverage for indirect calls", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-inline-8bit-counters", OPT_ID.OPT_fsanitize_coverage_inline_8bit_counters, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable inline 8-bit counters in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-no-prune", OPT_ID.OPT_fsanitize_coverage_no_prune, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable coverage pruning (i.e. instrument all blocks/edges)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-pc-table", OPT_ID.OPT_fsanitize_coverage_pc_table, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Create a table of coverage-instrumented PCs", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-stack-depth", OPT_ID.OPT_fsanitize_coverage_stack_depth, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable max stack depth tracing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-trace-bb", OPT_ID.OPT_fsanitize_coverage_trace_bb, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable basic block tracing in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-trace-cmp", OPT_ID.OPT_fsanitize_coverage_trace_cmp, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable cmp instruction tracing in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-trace-div", OPT_ID.OPT_fsanitize_coverage_trace_div, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable div instruction tracing in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-trace-gep", OPT_ID.OPT_fsanitize_coverage_trace_gep, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable gep instruction tracing in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-trace-pc-guard", OPT_ID.OPT_fsanitize_coverage_trace_pc_guard, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable PC tracing with guard in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-trace-pc", OPT_ID.OPT_fsanitize_coverage_trace_pc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable PC tracing in sanitizer coverage", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage-type=", OPT_ID.OPT_fsanitize_coverage_type, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Sanitizer coverage type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-coverage=", OPT_ID.OPT_fsanitize_coverage, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Specify the type of coverage instrumentation for Sanitizers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-link-c++-runtime", OPT_ID.OPT_fsanitize_link_cxx_runtime, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-memory-track-origins=", OPT_ID.OPT_fsanitize_memory_track_origins_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable origins tracking in MemorySanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-memory-track-origins", OPT_ID.OPT_fsanitize_memory_track_origins, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable origins tracking in MemorySanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-memory-use-after-dtor", OPT_ID.OPT_fsanitize_memory_use_after_dtor, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable use-after-destroy detection in MemorySanitizer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-minimal-runtime", OPT_ID.OPT_fsanitize_minimal_runtime, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-recover=", OPT_ID.OPT_fsanitize_recover_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable recovery for specified sanitizers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-recover", OPT_ID.OPT_fsanitize_recover, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-stats", OPT_ID.OPT_fsanitize_stats, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable sanitizer statistics gathering.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-thread-atomics", OPT_ID.OPT_fsanitize_thread_atomics, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable atomic operations instrumentation in ThreadSanitizer (default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-thread-func-entry-exit", OPT_ID.OPT_fsanitize_thread_func_entry_exit, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable function entry/exit instrumentation in ThreadSanitizer (default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-thread-memory-access", OPT_ID.OPT_fsanitize_thread_memory_access, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable memory access instrumentation in ThreadSanitizer (default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-trap=", OPT_ID.OPT_fsanitize_trap_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable trapping for specified sanitizers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-undefined-strip-path-components=", OPT_ID.OPT_fsanitize_undefined_strip_path_components_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Strip (or keep only, if negative) a given number of path components when emitting check metadata.", "<number>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize-undefined-trap-on-error", OPT_ID.OPT_fsanitize_undefined_trap_on_error, OptionKind.FlagClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsanitize=", OPT_ID.OPT_fsanitize_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_f_clang_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks", "<check>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsave-optimization-record", OPT_ID.OPT_fsave_optimization_record, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate a YAML optimization record file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsched-interblock", OPT_ID.OPT_anonymous_16, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fschedule-insns2", OPT_ID.OPT_schedule_insns2_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fschedule-insns", OPT_ID.OPT_schedule_insns_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsecond-underscore", OPT_ID.OPT_second_underscore_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsee", OPT_ID.OPT_see_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fseh-exceptions", OPT_ID.OPT_fseh_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use SEH style exceptions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fshort-enums", OPT_ID.OPT_fshort_enums, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Allocate to an enum type only as many bytes as it needs for the declared range of possible values", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fshort-wchar", OPT_ID.OPT_fshort_wchar, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Force wchar_t to be a short unsigned int", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fshow-column", OPT_ID.OPT_fshow_column, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fshow-overloads=", OPT_ID.OPT_fshow_overloads_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Which overload candidates to show when overload resolution fails: best|all; defaults to all", null, "best,all"));
            InfoTable.Add(new OptionInfo(prefix_1, "fshow-source-location", OPT_ID.OPT_fshow_source_location, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsign-zero", OPT_ID.OPT_sign_zero_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsignaling-math", OPT_ID.OPT_fsignaling_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsignaling-nans", OPT_ID.OPT_signaling_nans_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsigned-bitfields", OPT_ID.OPT_fsigned_bitfields, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsigned-char", OPT_ID.OPT_fsigned_char, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsigned-wchar", OPT_ID.OPT_fsigned_wchar, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use a signed type for wchar_t", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsigned-zeros", OPT_ID.OPT_fsigned_zeros, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsingle-precision-constant", OPT_ID.OPT_single_precision_constant_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsized-deallocation", OPT_ID.OPT_fsized_deallocation, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable C++14 sized global deallocation functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsjlj-exceptions", OPT_ID.OPT_fsjlj_exceptions, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use SjLj style exceptions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fslp-vectorize-aggressive", OPT_ID.OPT_anonymous_0, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_legacy_options_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fslp-vectorize", OPT_ID.OPT_fslp_vectorize, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable the superword-level parallelism vectorization passes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fspec-constr-count", OPT_ID.OPT_spec_constr_count_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fspell-checking-limit=", OPT_ID.OPT_fspell_checking_limit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fspell-checking-limit", OPT_ID.OPT_fspell_checking_limit, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the maximum number of times to perform spell checking on unrecognized identifiers (0 = no limit).", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "fspell-checking", OPT_ID.OPT_fspell_checking, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsplit-dwarf-inlining", OPT_ID.OPT_fsplit_dwarf_inlining, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Provide minimal debug info in the object/executable to facilitate online symbolication/stack traces in the absence of .dwo/.dwp files when using Split DWARF", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsplit-stack", OPT_ID.OPT_fsplit_stack, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstack-arrays", OPT_ID.OPT_stack_arrays_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstack-check", OPT_ID.OPT_stack_check_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstack-protector-all", OPT_ID.OPT_fstack_protector_all, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Force the usage of stack protectors for all functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstack-protector-strong", OPT_ID.OPT_fstack_protector_strong, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Use a strong heuristic to apply stack protectors to functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstack-protector", OPT_ID.OPT_fstack_protector, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable stack protectors for functions potentially vulnerable to stack smashing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstack-size-section", OPT_ID.OPT_fstack_size_section, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Emit section containing metadata on function stack sizes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstandalone-debug", OPT_ID.OPT_fstandalone_debug, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Emit full debug info for all types used by the program", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstrength-reduce", OPT_ID.OPT_strength_reduce_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstrict-aliasing", OPT_ID.OPT_fstrict_aliasing, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstrict-enums", OPT_ID.OPT_fstrict_enums, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable optimizations based on the strict definition of an enum's value range", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstrict-overflow", OPT_ID.OPT_fstrict_overflow, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstrict-return", OPT_ID.OPT_fstrict_return, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Always treat control flow paths that fall off the end of a non-void function as unreachable", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstrict-vtable-pointers", OPT_ID.OPT_fstrict_vtable_pointers, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable optimizations based on the strict rules for overwriting polymorphic C++ objects", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fstruct-path-tbaa", OPT_ID.OPT_fstruct_path_tbaa, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fsyntax-only", OPT_ID.OPT_fsyntax_only, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption | ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "FS", OPT_ID.OPT__SLASH_FS, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftabstop=", OPT_ID.OPT_ftabstop_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftabstop", OPT_ID.OPT_ftabstop, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the tab stop distance.", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftemplate-backtrace-limit=", OPT_ID.OPT_ftemplate_backtrace_limit_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftemplate-backtrace-limit", OPT_ID.OPT_ftemplate_backtrace_limit, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Set the maximum number of entries to print in a template instantiation backtrace (0 = no limit).", "<N>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftemplate-depth-", OPT_ID.OPT_ftemplate_depth_, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftemplate-depth=", OPT_ID.OPT_ftemplate_depth_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftemplate-depth", OPT_ID.OPT_ftemplate_depth, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Maximum depth of recursive template instantiation", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fterminated-vtables", OPT_ID.OPT_anonymous_21, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fapple_kext, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftest-coverage", OPT_ID.OPT_ftest_coverage, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftest-module-file-extension=", OPT_ID.OPT_ftest_module_file_extension_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "introduce a module file extension for testing purposes. The argument is parsed as blockname:major:minor:hashed:user info", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fthin-link-bitcode=", OPT_ID.OPT_fthin_link_bitcode_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Write minimized bitcode to <file> for the ThinLTO thin link only", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fthinlto-index=", OPT_ID.OPT_fthinlto_index_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Perform ThinLTO importing using provided function summary index", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fthreadsafe-statics", OPT_ID.OPT_fthreadsafe_statics, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftime-report", OPT_ID.OPT_ftime_report, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftls-model=", OPT_ID.OPT_ftlsmodel_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftls-model", OPT_ID.OPT_tls_model_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftracer", OPT_ID.OPT_tracer_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftrap-function=", OPT_ID.OPT_ftrap_function_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Issue call to specified function rather than a trap instruction", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftrapping-math", OPT_ID.OPT_ftrapping_math, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftrapv-handler=", OPT_ID.OPT_ftrapv_handler_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Specify the function to be called on overflow", "<function name>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftrapv-handler", OPT_ID.OPT_ftrapv_handler, OptionKind.SeparateClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftrapv", OPT_ID.OPT_ftrapv, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Trap on integer overflow", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree-dce", OPT_ID.OPT_tree_dce_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree-salias", OPT_ID.OPT_tree_salias_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree-slp-vectorize", OPT_ID.OPT_anonymous_19, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fslp_vectorize, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree-ter", OPT_ID.OPT_tree_ter_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree-vectorizer-verbose", OPT_ID.OPT_tree_vectorizer_verbose_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree-vectorize", OPT_ID.OPT_anonymous_17, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fvectorize, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree-vrp", OPT_ID.OPT_tree_vrp_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree_loop_im", OPT_ID.OPT_tree_loop_im_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree_loop_ivcanon", OPT_ID.OPT_tree_loop_ivcanon_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftree_loop_linear", OPT_ID.OPT_tree_loop_linear_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftrigraphs", OPT_ID.OPT_ftrigraphs, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Process trigraph sequences", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ftype-visibility", OPT_ID.OPT_ftype_visibility, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Default type visibility", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funderscoring", OPT_ID.OPT_underscoring_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funique-section-names", OPT_ID.OPT_funique_section_names, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use unique names for text and data sections (ELF Only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funit-at-a-time", OPT_ID.OPT_funit_at_a_time, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funknown-anytype", OPT_ID.OPT_funknown_anytype, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable parser support for the __unknown_anytype type; for testing purposes only", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funroll-all-loops", OPT_ID.OPT_unroll_all_loops_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funroll-loops", OPT_ID.OPT_funroll_loops, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Turn on loop unroller", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funsafe-loop-optimizations", OPT_ID.OPT_unsafe_loop_optimizations_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funsafe-math-optimizations", OPT_ID.OPT_funsafe_math_optimizations, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funsigned-bitfields", OPT_ID.OPT_funsigned_bitfields, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funsigned-char", OPT_ID.OPT_funsigned_char, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funswitch-loops", OPT_ID.OPT_unswitch_loops_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "funwind-tables", OPT_ID.OPT_funwind_tables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fuse-cxa-atexit", OPT_ID.OPT_fuse_cxa_atexit, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fuse-init-array", OPT_ID.OPT_fuse_init_array, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use .init_array instead of .ctors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fuse-ld=", OPT_ID.OPT_fuse_ld_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fuse-line-directives", OPT_ID.OPT_fuse_line_directives, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fuse-linker-plugin", OPT_ID.OPT_use_linker_plugin_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fuse-register-sized-bitfield-access", OPT_ID.OPT_fuse_register_sized_bitfield_access, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use register sized accesses to bit-fields, when possible.", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "FU", OPT_ID.OPT__SLASH_FU, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fvariable-expansion-in-unroller", OPT_ID.OPT_variable_expansion_in_unroller_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fveclib=", OPT_ID.OPT_fveclib, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use the given vector functions library", null, "Accelerate,SVML,none"));
            InfoTable.Add(new OptionInfo(prefix_1, "fvect-cost-model", OPT_ID.OPT_vect_cost_model_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fvectorize", OPT_ID.OPT_fvectorize, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable the loop vectorization passes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fverbose-asm", OPT_ID.OPT_fverbose_asm, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fvisibility-inlines-hidden", OPT_ID.OPT_fvisibility_inlines_hidden, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Give inline C++ member functions default visibility by default", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fvisibility-ms-compat", OPT_ID.OPT_fvisibility_ms_compat, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Give global types 'default' visibility and global functions and variables 'hidden' visibility by default", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fvisibility=", OPT_ID.OPT_fvisibility_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Set the default symbol visibility for all global declarations", null, "hidden,default"));
            InfoTable.Add(new OptionInfo(prefix_1, "fvisibility", OPT_ID.OPT_fvisibility, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Default type and symbol visibility", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fwchar-type=", OPT_ID.OPT_fwchar_type_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Select underlying type for wchar_t", null, "char,short,int"));
            InfoTable.Add(new OptionInfo(prefix_1, "fweb", OPT_ID.OPT_web_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fwhole-file", OPT_ID.OPT_whole_file_f, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fwhole-program-vtables", OPT_ID.OPT_fwhole_program_vtables, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Enables whole-program vtable optimization. Requires -flto", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fwhole-program", OPT_ID.OPT_whole_program_f, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_gcc_optimization_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fwrapv", OPT_ID.OPT_fwrapv, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Treat signed integer overflow as two's complement", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fwritable-strings", OPT_ID.OPT_fwritable_strings, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Store string literals as writable data", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fxray-always-emit-customevents", OPT_ID.OPT_fxray_always_emit_customevents, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Determine whether to always emit __xray_customevent(...) calls even if the function it appears in is not always instrumented.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fxray-always-instrument=", OPT_ID.OPT_fxray_always_instrument, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fxray-instruction-threshold=", OPT_ID.OPT_fxray_instruction_threshold_EQ, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Sets the minimum function size to instrument with XRay", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fxray-instruction-threshold", OPT_ID.OPT_fxray_instruction_threshold_, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fxray-instrument", OPT_ID.OPT_fxray_instrument, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Generate XRay instrumentation sleds on function entry and exit", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fxray-never-instrument=", OPT_ID.OPT_fxray_never_instrument, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Fx", OPT_ID.OPT__SLASH_Fx, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fzero-initialized-in-bss", OPT_ID.OPT_fzero_initialized_in_bss, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "fzvector", OPT_ID.OPT_fzvector, OptionKind.FlagClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable System z vector language extension", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "F", OPT_ID.OPT_F, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.RenderJoined | ClangFlags.CC1Option), 0, "Add directory to framework include search path", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "F", OPT_ID.OPT__SLASH_F, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "g0", OPT_ID.OPT_g0, OptionKind.FlagClass, OPT_ID.OPT_gN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "G1", OPT_ID.OPT__SLASH_G1, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "g1", OPT_ID.OPT_g1, OptionKind.FlagClass, OPT_ID.OPT_gN_Group, OPT_ID.OPT_gline_tables_only, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "G2", OPT_ID.OPT__SLASH_G2, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "g2", OPT_ID.OPT_g2, OptionKind.FlagClass, OPT_ID.OPT_gN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "g3", OPT_ID.OPT_g3, OptionKind.FlagClass, OPT_ID.OPT_gN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "G=", OPT_ID.OPT_G_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_G, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GA", OPT_ID.OPT__SLASH_GA, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_ftlsmodel_EQ, "local-exec\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Assume thread-local variables are defined in the executable", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "gcc-toolchain=", OPT_ID.OPT_gcc_toolchain, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Use the gcc toolchain at the given directory", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gcc-toolchain", OPT_ID.OPT_gcc_toolchain_legacy_spelling, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_gcc_toolchain, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gcodeview", OPT_ID.OPT_gcodeview, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.CoreOption), 0, "Generate CodeView debug information", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gcoff", OPT_ID.OPT_gcoff, OptionKind.JoinedClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gcolumn-info", OPT_ID.OPT_gcolumn_info, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gdwarf-2", OPT_ID.OPT_gdwarf_2, OptionKind.FlagClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate source-level debug information with dwarf version 2", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gdwarf-3", OPT_ID.OPT_gdwarf_3, OptionKind.FlagClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate source-level debug information with dwarf version 3", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gdwarf-4", OPT_ID.OPT_gdwarf_4, OptionKind.FlagClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate source-level debug information with dwarf version 4", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gdwarf-5", OPT_ID.OPT_gdwarf_5, OptionKind.FlagClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate source-level debug information with dwarf version 5", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gdwarf-aranges", OPT_ID.OPT_gdwarf_aranges, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gdwarf", OPT_ID.OPT_gdwarf, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_gdwarf_4, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gd", OPT_ID.OPT__SLASH_Gd, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set __cdecl as a default calling convention", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gembed-source", OPT_ID.OPT_gembed_source, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Embed source text in DWARF debug sections", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gen-reproducer", OPT_ID.OPT_gen_reproducer, OptionKind.FlagClass, OPT_ID.OPT_internal_debug_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden | ClangFlags.CoreOption), 0, "Auto-generates preprocessed source files and a reproduction script", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Ge", OPT_ID.OPT__SLASH_Ge, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GF-", OPT_ID.OPT__SLASH_GF_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fwritable_strings, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable string pooling", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gfull", OPT_ID.OPT_gfull, OptionKind.FlagClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GF", OPT_ID.OPT__SLASH_GF, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ggdb0", OPT_ID.OPT_ggdb0, OptionKind.FlagClass, OPT_ID.OPT_ggdbN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ggdb1", OPT_ID.OPT_ggdb1, OptionKind.FlagClass, OPT_ID.OPT_ggdbN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ggdb2", OPT_ID.OPT_ggdb2, OptionKind.FlagClass, OPT_ID.OPT_ggdbN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ggdb3", OPT_ID.OPT_ggdb3, OptionKind.FlagClass, OPT_ID.OPT_ggdbN_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ggdb", OPT_ID.OPT_ggdb, OptionKind.FlagClass, OPT_ID.OPT_gTune_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ggnu-pubnames", OPT_ID.OPT_ggnu_pubnames, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GH", OPT_ID.OPT__SLASH_GH, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gh", OPT_ID.OPT__SLASH_Gh, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GL-", OPT_ID.OPT__SLASH_GL_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gline-tables-only", OPT_ID.OPT_gline_tables_only, OptionKind.FlagClass, OPT_ID.OPT_gN_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, "Emit debug line number tables only", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "glldb", OPT_ID.OPT_glldb, OptionKind.FlagClass, OPT_ID.OPT_gTune_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GL", OPT_ID.OPT__SLASH_GL, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gm-", OPT_ID.OPT__SLASH_Gm_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gmlt", OPT_ID.OPT_gmlt, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_gline_tables_only, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gmodules", OPT_ID.OPT_gmodules, OptionKind.FlagClass, OPT_ID.OPT_gN_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate debug info with external references to clang modules or precompiled headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gm", OPT_ID.OPT__SLASH_Gm, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gno-column-info", OPT_ID.OPT_gno_column_info, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gno-embed-source", OPT_ID.OPT_gno_embed_source, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Restore the default behavior of not embedding source text in DWARF debug sections", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gno-record-gcc-switches", OPT_ID.OPT_gno_record_gcc_switches, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gno-strict-dwarf", OPT_ID.OPT_gno_strict_dwarf, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gnu-pubnames", OPT_ID.OPT_gnu_pubnames, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit newer GNU style pubnames", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GR-", OPT_ID.OPT__SLASH_GR_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable emission of RTTI data", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "grecord-gcc-switches", OPT_ID.OPT_grecord_gcc_switches, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gregcall", OPT_ID.OPT__SLASH_Gregcall, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set __regcall as a default calling convention", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GR", OPT_ID.OPT__SLASH_GR, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable emission of RTTI data", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gr", OPT_ID.OPT__SLASH_Gr, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set __fastcall as a default calling convention", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GS-", OPT_ID.OPT__SLASH_GS_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable buffer security check", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gsce", OPT_ID.OPT_gsce, OptionKind.FlagClass, OPT_ID.OPT_gTune_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gsplit-dwarf", OPT_ID.OPT_gsplit_dwarf, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gstabs", OPT_ID.OPT_gstabs, OptionKind.JoinedClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gstrict-dwarf", OPT_ID.OPT_gstrict_dwarf, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GS", OPT_ID.OPT__SLASH_GS, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable buffer security check", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gs", OPT_ID.OPT__SLASH_Gs, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_mstack_probe_size, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set stack probe size", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gtoggle", OPT_ID.OPT_gtoggle, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GT", OPT_ID.OPT__SLASH_GT, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "guard:", OPT_ID.OPT__SLASH_Guard, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable Control Flow Guard with /guard:cf", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gused", OPT_ID.OPT_gused, OptionKind.FlagClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gvms", OPT_ID.OPT_gvms, OptionKind.JoinedClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gv", OPT_ID.OPT__SLASH_Gv, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set __vectorcall as a default calling convention", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gw-", OPT_ID.OPT__SLASH_Gw_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_data_sections, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Don't put each data item in its own section", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gw", OPT_ID.OPT__SLASH_Gw, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fdata_sections, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Put each data item in its own section", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GX-", OPT_ID.OPT__SLASH_GX_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable exception handling", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gxcoff", OPT_ID.OPT_gxcoff, OptionKind.JoinedClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GX", OPT_ID.OPT__SLASH_GX, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable exception handling", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gy-", OPT_ID.OPT__SLASH_Gy_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_function_sections, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Don't put each function in its own section", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gy", OPT_ID.OPT__SLASH_Gy, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_ffunction_sections, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Put each function in its own section", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gz=", OPT_ID.OPT_gz_EQ, OptionKind.JoinedClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, "DWARF debug sections compression type", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "GZ", OPT_ID.OPT__SLASH_GZ, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Gz", OPT_ID.OPT__SLASH_Gz, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set __stdcall as a default calling convention", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "gz", OPT_ID.OPT_gz, OptionKind.FlagClass, OPT_ID.OPT_g_flags_Group, OPT_ID.OPT_INVALID, null, 0, 0, "DWARF debug sections compression type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "G", OPT_ID.OPT_G, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Put objects of at most <size> bytes into small data section (MIPS / Hexagon)", "<size>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "g", OPT_ID.OPT_g_Flag, OptionKind.FlagClass, OPT_ID.OPT_g_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate source-level debug information", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "header-include-file", OPT_ID.OPT_header_include_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Filename (or -) to write header include output to", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "headerpad_max_install_names", OPT_ID.OPT_headerpad__max__install__names, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "help-hidden", OPT_ID.OPT__help_hidden, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Display help for hidden options", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "HELP", OPT_ID.OPT__SLASH_HELP, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_help, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "help", OPT_ID.OPT_help, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption), 0, "Display available options", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "help", OPT_ID.OPT__SLASH_help, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_help, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Display available options", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "homeparams", OPT_ID.OPT__SLASH_homeparams, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "hotpatch", OPT_ID.OPT__SLASH_hotpatch, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "H", OPT_ID.OPT_H, OptionKind.FlagClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Show header includes and nesting depth", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "H", OPT_ID.OPT__SLASH_H, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "I-", OPT_ID.OPT_I_, OptionKind.FlagClass, OPT_ID.OPT_I_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Restrict all prior -I flags to double-quoted inclusion and remove current directory from include path", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "idirafter", OPT_ID.OPT_idirafter, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add directory to AFTER include search path", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "iframeworkwithsysroot", OPT_ID.OPT_iframeworkwithsysroot, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "iframework", OPT_ID.OPT_iframework, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add directory to SYSTEM framework search path", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "imacros=", OPT_ID.OPT__imacros_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_imacros, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "imacros", OPT_ID.OPT_imacros, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Include macros from file before parsing", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "image_base", OPT_ID.OPT_image__base, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "imsvc", OPT_ID.OPT__SLASH_imsvc, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Add directory to system include search path, as if part of %INCLUDE%", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "imultilib", OPT_ID.OPT_imultilib, OptionKind.SeparateClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-barrier", OPT_ID.OPT__include_barrier, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_I_, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-directory-after=", OPT_ID.OPT__include_directory_after_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_idirafter, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-directory-after", OPT_ID.OPT__include_directory_after, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_idirafter, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-directory=", OPT_ID.OPT__include_directory_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_I, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-directory", OPT_ID.OPT__include_directory, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_I, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "include-pch", OPT_ID.OPT_include_pch, OptionKind.SeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Include precompiled header file", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-prefix=", OPT_ID.OPT__include_prefix_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iprefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-prefix", OPT_ID.OPT__include_prefix, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iprefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "include-pth", OPT_ID.OPT_include_pth, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include file before parsing", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-with-prefix-after=", OPT_ID.OPT__include_with_prefix_after_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iwithprefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-with-prefix-after", OPT_ID.OPT__include_with_prefix_after, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iwithprefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-with-prefix-before=", OPT_ID.OPT__include_with_prefix_before_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iwithprefixbefore, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-with-prefix-before", OPT_ID.OPT__include_with_prefix_before, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iwithprefixbefore, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-with-prefix=", OPT_ID.OPT__include_with_prefix_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iwithprefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include-with-prefix", OPT_ID.OPT__include_with_prefix, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_iwithprefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "include=", OPT_ID.OPT__include_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_include, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "include", OPT_ID.OPT_include, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Include file before parsing", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "index-header-map", OPT_ID.OPT_index_header_map, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Make the next included directory (-I or -F) an indexer header map", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "init-only", OPT_ID.OPT_init_only, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Only execute frontend initialization", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "init", OPT_ID.OPT_init, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "install_name", OPT_ID.OPT_install__name, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "integrated-as", OPT_ID.OPT_anonymous_24, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fintegrated_as, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "internal-externc-isystem", OPT_ID.OPT_internal_externc_isystem, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add directory to the internal system include search path with implicit extern \"C\" semantics; these are assumed to not be user-provided and are used to model system and standard headers' paths.", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "internal-isystem", OPT_ID.OPT_internal_isystem, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add directory to the internal system include search path; these are assumed to not be user-provided and are used to model system and standard headers' paths.", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "iprefix", OPT_ID.OPT_iprefix, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set the -iwithprefix/-iwithprefixbefore prefix", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "iquote", OPT_ID.OPT_iquote, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add directory to QUOTE include search path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "isysroot", OPT_ID.OPT_isysroot, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set the system root directory (usually /)", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "isystem-after", OPT_ID.OPT_isystem_after, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Add directory to end of the SYSTEM include search path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "isystem", OPT_ID.OPT_isystem, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add directory to SYSTEM include search path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ivfsoverlay", OPT_ID.OPT_ivfsoverlay, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Overlay the virtual filesystem described by file over the real file system", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "iwithprefixbefore", OPT_ID.OPT_iwithprefixbefore, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set directory to include search path with prefix", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "iwithprefix", OPT_ID.OPT_iwithprefix, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set directory to SYSTEM include search path with prefix", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "iwithsysroot", OPT_ID.OPT_iwithsysroot, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add directory to SYSTEM include search path, absolute paths are relative to -isysroot", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "I", OPT_ID.OPT_I, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_I_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption), 0, "Add directory to include search path", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "I", OPT_ID.OPT__SLASH_I, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_I, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Add directory to include search path", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "J", OPT_ID.OPT_J, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.RenderJoined), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "J", OPT_ID.OPT__SLASH_J, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_funsigned_char, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Make char type unsigned", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "keep_private_externs", OPT_ID.OPT_keep__private__externs, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "kernel-", OPT_ID.OPT__SLASH_kernel_, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "kernel", OPT_ID.OPT__SLASH_kernel, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "language=", OPT_ID.OPT__language_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_x, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "language", OPT_ID.OPT__language, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_x, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "lazy_framework", OPT_ID.OPT_lazy__framework, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "lazy_library", OPT_ID.OPT_lazy__library, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "LDd", OPT_ID.OPT__SLASH_LDd, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Create debug DLL", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "LD", OPT_ID.OPT__SLASH_LD, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Create DLL", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "library-directory=", OPT_ID.OPT__library_directory_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_L, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "library-directory", OPT_ID.OPT__library_directory, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_L, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "linker-option=", OPT_ID.OPT_linker_option, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add linker option", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "link", OPT_ID.OPT__SLASH_link, OptionKind.RemainingArgsJoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Forward options to the linker", "<options>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "LN", OPT_ID.OPT__SLASH_LN, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "load", OPT_ID.OPT_load, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Load the named plugin (dynamic shared object)", "<dsopath>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "L", OPT_ID.OPT_L, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.RenderJoined), 0, "Add directory to library search path", "<dir>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "l", OPT_ID.OPT_l, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput | (int)DriverFlag.RenderJoined), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "m16", OPT_ID.OPT_m16, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "m32", OPT_ID.OPT_m32, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "m3dnowa", OPT_ID.OPT_m3dnowa, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "m3dnow", OPT_ID.OPT_m3dnow, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "m64", OPT_ID.OPT_m64, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "m80387", OPT_ID.OPT_m80387, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mx87, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mabi=", OPT_ID.OPT_mabi_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mabicalls", OPT_ID.OPT_mabicalls, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable SVR4-style position-independent code (Mips only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mabs=", OPT_ID.OPT_mabs_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Mach", OPT_ID.OPT_Mach, OptionKind.FlagClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "madx", OPT_ID.OPT_madx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "maes", OPT_ID.OPT_maes, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "main-file-name", OPT_ID.OPT_main_file_name, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Main file name to use for debug info", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "malign-double", OPT_ID.OPT_malign_double, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Align doubles to two words in structs (x86 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "malign-functions=", OPT_ID.OPT_malign_functions_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "malign-jumps=", OPT_ID.OPT_malign_jumps_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "malign-loops=", OPT_ID.OPT_malign_loops_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "maltivec", OPT_ID.OPT_maltivec, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mamdgpu-debugger-abi=", OPT_ID.OPT_mamdgpu_debugger_abi, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, "Generate additional code for specified <version> of debugger ABI (AMDGPU only)", "<version>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "mappletvos-version-min=", OPT_ID.OPT_mappletvos_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mtvos_version_min_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mappletvsimulator-version-min=", OPT_ID.OPT_mappletvsimulator_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mtvos_simulator_version_min_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "march=", OPT_ID.OPT_march_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "marm", OPT_ID.OPT_marm, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mno_thumb, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "masm-verbose", OPT_ID.OPT_masm_verbose, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate verbose assembly output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "masm=", OPT_ID.OPT_masm_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "massembler-fatal-warnings", OPT_ID.OPT_massembler_fatal_warnings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Make assembler warnings fatal", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx2", OPT_ID.OPT_mavx2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512bitalg", OPT_ID.OPT_mavx512bitalg, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512bw", OPT_ID.OPT_mavx512bw, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512cd", OPT_ID.OPT_mavx512cd, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512dq", OPT_ID.OPT_mavx512dq, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512er", OPT_ID.OPT_mavx512er, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512f", OPT_ID.OPT_mavx512f, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512ifma", OPT_ID.OPT_mavx512ifma, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512pf", OPT_ID.OPT_mavx512pf, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512vbmi2", OPT_ID.OPT_mavx512vbmi2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512vbmi", OPT_ID.OPT_mavx512vbmi, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512vl", OPT_ID.OPT_mavx512vl, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512vnni", OPT_ID.OPT_mavx512vnni, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx512vpopcntdq", OPT_ID.OPT_mavx512vpopcntdq, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mavx", OPT_ID.OPT_mavx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mbackchain", OPT_ID.OPT_mbackchain, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Link stack frames through backchain on System Z", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mbig-endian", OPT_ID.OPT_mbig_endian, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mbmi2", OPT_ID.OPT_mbmi2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mbmi", OPT_ID.OPT_mbmi, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mbranch-likely", OPT_ID.OPT_mbranch_likely, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcheck-zero-division", OPT_ID.OPT_mcheck_zero_division, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mclflushopt", OPT_ID.OPT_mclflushopt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mclwb", OPT_ID.OPT_mclwb, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mclzero", OPT_ID.OPT_mclzero, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcmodel=", OPT_ID.OPT_mcmodel_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcmpb", OPT_ID.OPT_mcmpb, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcode-model", OPT_ID.OPT_mcode_model, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "The code model to use", null, "small,kernel,medium,large"));
            InfoTable.Add(new OptionInfo(prefix_1, "mcompact-branches=", OPT_ID.OPT_mcompact_branches_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mconsole", OPT_ID.OPT_mconsole, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mconstant-cfstrings", OPT_ID.OPT_mconstant_cfstrings, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mconstructor-aliases", OPT_ID.OPT_mconstructor_aliases, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Emit complete constructors and destructors as aliases when possible", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcpu=", OPT_ID.OPT_mcpu_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcrbits", OPT_ID.OPT_mcrbits, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcrc", OPT_ID.OPT_mcrc, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Allow use of CRC instructions (ARM only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcrypto", OPT_ID.OPT_mpower8_crypto, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mcx16", OPT_ID.OPT_mcx16, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "MDd", OPT_ID.OPT__SLASH_MDd, OptionKind.FlagClass, OPT_ID.OPT__SLASH_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Use DLL debug run-time", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdebug-pass", OPT_ID.OPT_mdebug_pass, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable additional debug output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdefault-build-attributes", OPT_ID.OPT_mdefault_build_attributes, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdirect-move", OPT_ID.OPT_mdirect_move, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdisable-fp-elim", OPT_ID.OPT_mdisable_fp_elim, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable frame pointer elimination optimization", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdisable-tail-calls", OPT_ID.OPT_mdisable_tail_calls, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable tail call optimization, keeping the call stack accurate", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdll", OPT_ID.OPT_mdll, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdouble-float", OPT_ID.OPT_mdouble_float, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdspr2", OPT_ID.OPT_mdspr2, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdsp", OPT_ID.OPT_mdsp, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mdynamic-no-pic", OPT_ID.OPT_mdynamic_no_pic, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MD", OPT_ID.OPT_MD, OptionKind.FlagClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Write a depfile containing user and system headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "MD", OPT_ID.OPT__SLASH_MD, OptionKind.FlagClass, OPT_ID.OPT__SLASH_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Use DLL run-time", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "meabi", OPT_ID.OPT_meabi, OptionKind.SeparateClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set EABI type, e.g. 4, 5 or gnu (default depends on triple)", null, "default,4,5,gnu"));
            InfoTable.Add(new OptionInfo(prefix_1, "membedded-data", OPT_ID.OPT_membedded_data, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Place constants in the .rodata section instead of the .sdata section even if they meet the -G <size> threshold (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "menable-no-infs", OPT_ID.OPT_menable_no_infinities, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Allow optimization to assume there are no infinities.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "menable-no-nans", OPT_ID.OPT_menable_no_nans, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Allow optimization to assume there are no NaNs.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "menable-unsafe-fp-math", OPT_ID.OPT_menable_unsafe_fp_math, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Allow unsafe floating-point math optimizations which may decrease precision", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mexception-handling", OPT_ID.OPT_mexception_handing, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mexecute-only", OPT_ID.OPT_mexecute_only, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disallow generation of data access to code sections (ARM only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mextern-sdata", OPT_ID.OPT_mextern_sdata, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mf16c", OPT_ID.OPT_mf16c, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfancy-math-387", OPT_ID.OPT_mfancy_math_387, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfentry", OPT_ID.OPT_mfentry, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Insert calls to fentry at function entry (x86 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfix-and-continue", OPT_ID.OPT_mfix_and_continue, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfix-cortex-a53-835769", OPT_ID.OPT_mfix_cortex_a53_835769, OptionKind.FlagClass, OPT_ID.OPT_m_aarch64_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Workaround Cortex-A53 erratum 835769 (AArch64 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfloat-abi=", OPT_ID.OPT_mfloat_abi_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, "soft,softfp,hard"));
            InfoTable.Add(new OptionInfo(prefix_1, "mfloat-abi", OPT_ID.OPT_mfloat_abi, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "The float ABI to use", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfloat128", OPT_ID.OPT_mfloat128, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfma4", OPT_ID.OPT_mfma4, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfma", OPT_ID.OPT_mfma, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfp32", OPT_ID.OPT_mfp32, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Use 32-bit floating point registers (MIPS only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfp64", OPT_ID.OPT_mfp64, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Use 64-bit floating point registers (MIPS only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfpmath=", OPT_ID.OPT_mfpmath_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfpmath", OPT_ID.OPT_mfpmath, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Which unit to use for fp math", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfprnd", OPT_ID.OPT_mfprnd, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfpu=", OPT_ID.OPT_mfpu_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfpxx", OPT_ID.OPT_mfpxx, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, "Avoid FPU mode dependent operations when used with the O32 ABI", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfsgsbase", OPT_ID.OPT_mfsgsbase, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mfxsr", OPT_ID.OPT_mfxsr, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MF", OPT_ID.OPT_MF, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Write depfile output from -MMD, -MD, -MM, or -M to <file>", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "mgeneral-regs-only", OPT_ID.OPT_mgeneral_regs_only, OptionKind.FlagClass, OPT_ID.OPT_m_aarch64_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate code which only uses the general purpose registers (AArch64 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mgfni", OPT_ID.OPT_mgfni, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mglibc", OPT_ID.OPT_mglibc, OptionKind.FlagClass, OPT_ID.OPT_m_libc_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mglobal-merge", OPT_ID.OPT_mglobal_merge, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable merging of globals", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mgpopt", OPT_ID.OPT_mgpopt, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Use GP relative accesses for symbols known to be in a small data section (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MG", OPT_ID.OPT_MG, OptionKind.FlagClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Add missing headers to depfile", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mhard-float", OPT_ID.OPT_mhard_float, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mhtm", OPT_ID.OPT_mhtm, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mhvx-double", OPT_ID.OPT_mhexagon_hvx_double, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_HVX_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable Hexagon Double Vector eXtensions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mhvx-length=", OPT_ID.OPT_mhexagon_hvx_length_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_hexagon_Features_HVX_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Set Hexagon Vector Length", null, "64B,128B"));
            InfoTable.Add(new OptionInfo(prefix_1, "mhvx=", OPT_ID.OPT_mhexagon_hvx_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_hexagon_Features_HVX_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable Hexagon Vector eXtensions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mhvx", OPT_ID.OPT_mhexagon_hvx, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_HVX_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable Hexagon Vector eXtensions", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "mhwdiv=", OPT_ID.OPT__mhwdiv_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mhwdiv_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mhwdiv=", OPT_ID.OPT_mhwdiv_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "mhwdiv", OPT_ID.OPT__mhwdiv, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mhwdiv_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "miamcu", OPT_ID.OPT_miamcu, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Use Intel MCU ABI", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mibt", OPT_ID.OPT_mibt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mieee-fp", OPT_ID.OPT_mieee_fp, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mieee-rnd-near", OPT_ID.OPT_mieee_rnd_near, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "migrate", OPT_ID.OPT__migrate, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Run the migrator", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "migrate", OPT_ID.OPT_migrate, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Migrate source code", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mimplicit-float", OPT_ID.OPT_mimplicit_float, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mimplicit-it=", OPT_ID.OPT_mimplicit_it_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mincremental-linker-compatible", OPT_ID.OPT_mincremental_linker_compatible, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption), 0, "(integrated-as) Emit an object file which can be used with an incremental linker", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mindirect-jump=", OPT_ID.OPT_mindirect_jump_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Change indirect jump instructions to inhibit speculation", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "minline-all-stringops", OPT_ID.OPT_minline_all_stringops, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "minvariant-function-descriptors", OPT_ID.OPT_minvariant_function_descriptors, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mios-simulator-version-min=", OPT_ID.OPT_mios_simulator_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mios-version-min=", OPT_ID.OPT_mios_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_miphoneos_version_min_EQ, null, 0, 0, "Set iOS deployment target", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "miphoneos-version-min=", OPT_ID.OPT_miphoneos_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "miphonesimulator-version-min=", OPT_ID.OPT_miphonesimulator_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mios_simulator_version_min_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips16", OPT_ID.OPT_mips16, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips1", OPT_ID.OPT_mips1, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips1\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips1", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips2", OPT_ID.OPT_mips2, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips2\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips2", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips32r2", OPT_ID.OPT_mips32r2, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips32r2\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips32r2", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips32r3", OPT_ID.OPT_mips32r3, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips32r3\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips32r3", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips32r5", OPT_ID.OPT_mips32r5, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips32r5\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips32r5", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips32r6", OPT_ID.OPT_mips32r6, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips32r6\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips32r6", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips32", OPT_ID.OPT_mips32, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips32\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips32", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips3", OPT_ID.OPT_mips3, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips3\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips3", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips4", OPT_ID.OPT_mips4, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips4\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips4", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips5", OPT_ID.OPT_mips5, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips5\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips5", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips64r2", OPT_ID.OPT_mips64r2, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips64r2\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips64r2", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips64r3", OPT_ID.OPT_mips64r3, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips64r3\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips64r3", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips64r5", OPT_ID.OPT_mips64r5, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips64r5\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips64r5", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips64r6", OPT_ID.OPT_mips64r6, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips64r6\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips64r6", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mips64", OPT_ID.OPT_mips64, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_march_EQ, "mips64\0", (ushort)((int)DriverFlag.HelpHidden), 0, "Equivalent to -march=mips64", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "misel", OPT_ID.OPT_misel, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MJ", OPT_ID.OPT_MJ, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Write a compilation database entry per input", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mkernel", OPT_ID.OPT_mkernel, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mldc1-sdc1", OPT_ID.OPT_mldc1_sdc1, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlimit-float-precision", OPT_ID.OPT_mlimit_float_precision, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Limit float precision to the given value", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlink-bitcode-file", OPT_ID.OPT_mlink_bitcode_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Link the given bitcode file before performing optimizations.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlink-cuda-bitcode", OPT_ID.OPT_mlink_cuda_bitcode, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Link and internalize needed symbols from the given bitcode file before performing optimizations.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlinker-version=", OPT_ID.OPT_mlinker_version_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlittle-endian", OPT_ID.OPT_mlittle_endian, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mllvm", OPT_ID.OPT_mllvm, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.CoreOption), 0, "Additional arguments to forward to LLVM's option processing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlocal-sdata", OPT_ID.OPT_mlocal_sdata, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Extend the -G behaviour to object local data (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlong-calls", OPT_ID.OPT_mlong_calls, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Generate branches with extended addressability, usually via indirect jumps.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlongcall", OPT_ID.OPT_mlongcall, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlwp", OPT_ID.OPT_mlwp, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mlzcnt", OPT_ID.OPT_mlzcnt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmacos-version-min=", OPT_ID.OPT_mmacos_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_mmacosx_version_min_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmacosx-version-min=", OPT_ID.OPT_mmacosx_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Set Mac OS X deployment target", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmadd4", OPT_ID.OPT_mmadd4, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable the generation of 4-operand madd.s, madd.d and related instructions.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmcu=", OPT_ID.OPT_mmcu_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MMD", OPT_ID.OPT_MMD, OptionKind.FlagClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Write a depfile containing user headers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmfcrf", OPT_ID.OPT_mmfcrf, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mmfocrf, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmfocrf", OPT_ID.OPT_mmfocrf, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmicromips", OPT_ID.OPT_mmicromips, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmmx", OPT_ID.OPT_mmmx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmovbe", OPT_ID.OPT_mmovbe, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmpx", OPT_ID.OPT_mmpx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mms-bitfields", OPT_ID.OPT_mms_bitfields, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set the default structure layout to be compatible with the Microsoft compiler standard", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmsa", OPT_ID.OPT_mmsa, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable MSA ASE (MIPS only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmt", OPT_ID.OPT_mmt, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable MT ASE (MIPS only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mmwaitx", OPT_ID.OPT_mmwaitx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MM", OPT_ID.OPT_MM, OptionKind.FlagClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Like -MMD, but also implies -E and writes to stdout by default", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mnan=", OPT_ID.OPT_mnan_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-3dnowa", OPT_ID.OPT_mno_3dnowa, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-3dnow", OPT_ID.OPT_mno_3dnow, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-80387", OPT_ID.OPT_mno_80387, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mno_x87, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-abicalls", OPT_ID.OPT_mno_abicalls, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable SVR4-style position-independent code (Mips only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-adx", OPT_ID.OPT_mno_adx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-aes", OPT_ID.OPT_mno_aes, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-altivec", OPT_ID.OPT_mno_altivec, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx2", OPT_ID.OPT_mno_avx2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512bitalg", OPT_ID.OPT_mno_avx512bitalg, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512bw", OPT_ID.OPT_mno_avx512bw, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512cd", OPT_ID.OPT_mno_avx512cd, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512dq", OPT_ID.OPT_mno_avx512dq, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512er", OPT_ID.OPT_mno_avx512er, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512f", OPT_ID.OPT_mno_avx512f, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512ifma", OPT_ID.OPT_mno_avx512ifma, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512pf", OPT_ID.OPT_mno_avx512pf, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512vbmi2", OPT_ID.OPT_mno_avx512vbmi2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512vbmi", OPT_ID.OPT_mno_avx512vbmi, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512vl", OPT_ID.OPT_mno_avx512vl, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512vnni", OPT_ID.OPT_mno_avx512vnni, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx512vpopcntdq", OPT_ID.OPT_mno_avx512vpopcntdq, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-avx", OPT_ID.OPT_mno_avx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-backchain", OPT_ID.OPT_mno_backchain, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-bmi2", OPT_ID.OPT_mno_bmi2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-bmi", OPT_ID.OPT_mno_bmi, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-branch-likely", OPT_ID.OPT_mno_branch_likely, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-check-zero-division", OPT_ID.OPT_mno_check_zero_division, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-clflushopt", OPT_ID.OPT_mno_clflushopt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-clwb", OPT_ID.OPT_mno_clwb, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-clzero", OPT_ID.OPT_mno_clzero, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-cmpb", OPT_ID.OPT_mno_cmpb, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-constant-cfstrings", OPT_ID.OPT_mno_constant_cfstrings, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-crbits", OPT_ID.OPT_mno_crbits, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-crypto", OPT_ID.OPT_mnopower8_crypto, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-cx16", OPT_ID.OPT_mno_cx16, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-default-build-attributes", OPT_ID.OPT_mno_default_build_attributes, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-direct-move", OPT_ID.OPT_mnodirect_move, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-dspr2", OPT_ID.OPT_mno_dspr2, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-dsp", OPT_ID.OPT_mno_dsp, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-embedded-data", OPT_ID.OPT_mno_embedded_data, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Do not place constants in the .rodata section instead of the .sdata if they meet the -G <size> threshold (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-exception-handling", OPT_ID.OPT_mno_exception_handing, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-execute-only", OPT_ID.OPT_mno_execute_only, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Allow generation of data access to code sections (ARM only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-extern-sdata", OPT_ID.OPT_mno_extern_sdata, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Do not assume that externally defined data is in the small data if it meets the -G <size> threshold (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-f16c", OPT_ID.OPT_mno_f16c, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-fix-cortex-a53-835769", OPT_ID.OPT_mno_fix_cortex_a53_835769, OptionKind.FlagClass, OPT_ID.OPT_m_aarch64_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Don't workaround Cortex-A53 erratum 835769 (AArch64 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-float128", OPT_ID.OPT_mno_float128, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-fma4", OPT_ID.OPT_mno_fma4, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-fma", OPT_ID.OPT_mno_fma, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-fprnd", OPT_ID.OPT_mno_fprnd, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-fsgsbase", OPT_ID.OPT_mno_fsgsbase, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-fxsr", OPT_ID.OPT_mno_fxsr, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-gfni", OPT_ID.OPT_mno_gfni, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-global-merge", OPT_ID.OPT_mno_global_merge, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable merging of globals", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-gpopt", OPT_ID.OPT_mno_gpopt, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Do not use GP relative accesses for symbols known to be in a small data section (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-htm", OPT_ID.OPT_mno_htm, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-hvx-double", OPT_ID.OPT_mno_hexagon_hvx_double, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_HVX_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable Hexagon Double Vector eXtensions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-hvx", OPT_ID.OPT_mno_hexagon_hvx, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_HVX_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable Hexagon Vector eXtensions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-iamcu", OPT_ID.OPT_mno_iamcu, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-ibt", OPT_ID.OPT_mno_ibt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-implicit-float", OPT_ID.OPT_mno_implicit_float, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Don't generate implicit floating point instructions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-incremental-linker-compatible", OPT_ID.OPT_mno_incremental_linker_compatible, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "(integrated-as) Emit an object file which cannot be used with an incremental linker", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-inline-all-stringops", OPT_ID.OPT_mno_inline_all_stringops, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-invariant-function-descriptors", OPT_ID.OPT_mno_invariant_function_descriptors, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-isel", OPT_ID.OPT_mno_isel, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-ldc1-sdc1", OPT_ID.OPT_mno_ldc1_sdc1, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-local-sdata", OPT_ID.OPT_mno_local_sdata, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Do not extend the -G behaviour to object local data (MIPS)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-long-calls", OPT_ID.OPT_mno_long_calls, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Restore the default behaviour of not generating long calls", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-longcall", OPT_ID.OPT_mno_longcall, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-lwp", OPT_ID.OPT_mno_lwp, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-lzcnt", OPT_ID.OPT_mno_lzcnt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-madd4", OPT_ID.OPT_mno_madd4, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable the generation of 4-operand madd.s, madd.d and related instructions.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-mfcrf", OPT_ID.OPT_mno_mfcrf, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mno_mfocrf, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-mfocrf", OPT_ID.OPT_mno_mfocrf, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-micromips", OPT_ID.OPT_mno_micromips, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-mips16", OPT_ID.OPT_mno_mips16, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-mmx", OPT_ID.OPT_mno_mmx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-movbe", OPT_ID.OPT_mno_movbe, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-movt", OPT_ID.OPT_mno_movt, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disallow use of movt/movw pairs (ARM only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-mpx", OPT_ID.OPT_mno_mpx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-ms-bitfields", OPT_ID.OPT_mno_ms_bitfields, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Do not set the default structure layout to be compatible with the Microsoft compiler standard", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-msa", OPT_ID.OPT_mno_msa, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable MSA ASE (MIPS only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-mt", OPT_ID.OPT_mno_mt, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable MT ASE (MIPS only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-mwaitx", OPT_ID.OPT_mno_mwaitx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-neg-immediates", OPT_ID.OPT_mno_neg_immediates, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disallow converting instructions with negative immediates to their negation or inversion.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-nontrapping-fptoint", OPT_ID.OPT_mno_nontrapping_fptoint, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-odd-spreg", OPT_ID.OPT_mno_odd_spreg, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, "Disable odd single-precision floating point registers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-omit-leaf-frame-pointer", OPT_ID.OPT_mno_omit_leaf_frame_pointer, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-packets", OPT_ID.OPT_mno_packets, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable generation of instruction packets", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-pascal-strings", OPT_ID.OPT_mno_pascal_strings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_pascal_strings, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-pclmul", OPT_ID.OPT_mno_pclmul, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-pie-copy-relocations", OPT_ID.OPT_mno_pie_copy_relocations, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-pku", OPT_ID.OPT_mno_pku, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-popcntd", OPT_ID.OPT_mno_popcntd, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-popcnt", OPT_ID.OPT_mno_popcnt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-power8-vector", OPT_ID.OPT_mno_power8_vector, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-power9-vector", OPT_ID.OPT_mno_power9_vector, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-prefetchwt1", OPT_ID.OPT_mno_prefetchwt1, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-prfchw", OPT_ID.OPT_mno_prfchw, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-pure-code", OPT_ID.OPT_mno_pure_code, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mno_execute_only, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-qpx", OPT_ID.OPT_mno_qpx, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-rdpid", OPT_ID.OPT_mno_rdpid, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-rdrnd", OPT_ID.OPT_mno_rdrnd, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-rdseed", OPT_ID.OPT_mno_rdseed, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-red-zone", OPT_ID.OPT_mno_red_zone, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-relax-all", OPT_ID.OPT_mno_relax_all, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-restrict-it", OPT_ID.OPT_mno_restrict_it, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Allow generation of deprecated IT blocks for ARMv8. It is off by default for ARMv8 Thumb mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-retpoline-external-thunk", OPT_ID.OPT_mno_retpoline_external_thunk, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-retpoline", OPT_ID.OPT_mno_retpoline, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-rtd", OPT_ID.OPT_mno_rtd, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-rtm", OPT_ID.OPT_mno_rtm, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sahf", OPT_ID.OPT_mno_sahf, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sgx", OPT_ID.OPT_mno_sgx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sha", OPT_ID.OPT_mno_sha, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-shstk", OPT_ID.OPT_mno_shstk, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sign-ext", OPT_ID.OPT_mno_sign_ext, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-simd128", OPT_ID.OPT_mno_simd128, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-soft-float", OPT_ID.OPT_mno_soft_float, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sse2", OPT_ID.OPT_mno_sse2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sse3", OPT_ID.OPT_mno_sse3, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sse4.1", OPT_ID.OPT_mno_sse4_1, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sse4.2", OPT_ID.OPT_mno_sse4_2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sse4a", OPT_ID.OPT_mno_sse4a, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sse4", OPT_ID.OPT_mno_sse4, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mno_sse4_1, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-sse", OPT_ID.OPT_mno_sse, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-ssse3", OPT_ID.OPT_mno_ssse3, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-stack-arg-probe", OPT_ID.OPT_mno_stack_arg_probe, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable stack probes which are enabled by default", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-stackrealign", OPT_ID.OPT_mno_stackrealign, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-tbm", OPT_ID.OPT_mno_tbm, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-thumb", OPT_ID.OPT_mno_thumb, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-unaligned-access", OPT_ID.OPT_mno_unaligned_access, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Force all memory accesses to be aligned (AArch32/AArch64 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-vaes", OPT_ID.OPT_mno_vaes, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-vpclmulqdq", OPT_ID.OPT_mno_vpclmulqdq, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-vsx", OPT_ID.OPT_mno_vsx, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-vx", OPT_ID.OPT_mno_vx, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-warn-nonportable-cfstrings", OPT_ID.OPT_mno_warn_nonportable_cfstrings, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-x87", OPT_ID.OPT_mno_x87, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-xgot", OPT_ID.OPT_mno_xgot, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-xnack", OPT_ID.OPT_mno_xnack, OptionKind.FlagClass, OPT_ID.OPT_m_amdgpu_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disable XNACK (AMDGPU only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-xop", OPT_ID.OPT_mno_xop, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-xsavec", OPT_ID.OPT_mno_xsavec, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-xsaveopt", OPT_ID.OPT_mno_xsaveopt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-xsaves", OPT_ID.OPT_mno_xsaves, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-xsave", OPT_ID.OPT_mno_xsave, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-zero-initialized-in-bss", OPT_ID.OPT_mno_zero_initialized_in_bss, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not put zero initialized data in the BSS", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mno-zvector", OPT_ID.OPT_mno_zvector, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_zvector, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mnocrc", OPT_ID.OPT_mnocrc, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disallow use of CRC instructions (ARM only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mnoexecstack", OPT_ID.OPT_mno_exec_stack, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Mark the file as not needing an executable stack", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mnontrapping-fptoint", OPT_ID.OPT_mnontrapping_fptoint, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "modd-spreg", OPT_ID.OPT_modd_spreg, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, "Enable odd single-precision floating point registers", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "module-dependency-dir", OPT_ID.OPT_module_dependency_dir, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Directory to dump module dependencies to", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "module-file-deps", OPT_ID.OPT_module_file_deps, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include module files in dependency output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "module-file-info", OPT_ID.OPT_module_file_info, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Provide information about a particular module file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "momit-leaf-frame-pointer", OPT_ID.OPT_momit_leaf_frame_pointer, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Omit frame pointer setup for leaf functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "moslib=", OPT_ID.OPT_moslib_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpackets", OPT_ID.OPT_mpackets, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable generation of instruction packets", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpascal-strings", OPT_ID.OPT_mpascal_strings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fpascal_strings, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpclmul", OPT_ID.OPT_mpclmul, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpie-copy-relocations", OPT_ID.OPT_mpie_copy_relocations, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use copy relocations support for PIE builds", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpku", OPT_ID.OPT_mpku, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpopcntd", OPT_ID.OPT_mpopcntd, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpopcnt", OPT_ID.OPT_mpopcnt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpower8-vector", OPT_ID.OPT_mpower8_vector, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpower9-vector", OPT_ID.OPT_mpower9_vector, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mprefer-vector-width=", OPT_ID.OPT_mprefer_vector_width_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mprefetchwt1", OPT_ID.OPT_mprefetchwt1, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mprfchw", OPT_ID.OPT_mprfchw, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mpure-code", OPT_ID.OPT_mpure_code, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mexecute_only, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MP", OPT_ID.OPT_MP, OptionKind.FlagClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Create phony target for each dependency (other than main file)", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "MP", OPT_ID.OPT__SLASH_MP, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mqdsp6-compat", OPT_ID.OPT_mqdsp6_compat, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Enable hexagon-qdsp6 backward compatibility", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mqpx", OPT_ID.OPT_mqpx, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MQ", OPT_ID.OPT_MQ, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specify name of main file output to quote in depfile", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrdpid", OPT_ID.OPT_mrdpid, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrdrnd", OPT_ID.OPT_mrdrnd, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrdseed", OPT_ID.OPT_mrdseed, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mreassociate", OPT_ID.OPT_mreassociate, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Allow reassociation transformations for floating-point instructions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrecip=", OPT_ID.OPT_mrecip_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrecip", OPT_ID.OPT_mrecip, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mred-zone", OPT_ID.OPT_mred_zone, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mregparm=", OPT_ID.OPT_mregparm_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mregparm", OPT_ID.OPT_mregparm, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Limit the number of registers available for integer arguments", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrelax-all", OPT_ID.OPT_mrelax_all, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption), 0, "(integrated-as) Relax all machine instructions", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "mrelax-relocations", OPT_ID.OPT_mrelax_relocations, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Use relaxable elf relocations", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrelocation-model", OPT_ID.OPT_mrelocation_model, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "The relocation model to use", null, "static,pic,ropi,rwpi,ropi-rwpi,dynamic-no-pic"));
            InfoTable.Add(new OptionInfo(prefix_1, "mrestrict-it", OPT_ID.OPT_mrestrict_it, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Disallow generation of deprecated IT blocks for ARMv8. It is on by default for ARMv8 Thumb mode.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mretpoline-external-thunk", OPT_ID.OPT_mretpoline_external_thunk, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mretpoline", OPT_ID.OPT_mretpoline, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrtd", OPT_ID.OPT_mrtd, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Make StdCall calling convention the default", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mrtm", OPT_ID.OPT_mrtm, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msahf", OPT_ID.OPT_msahf, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msave-temp-labels", OPT_ID.OPT_msave_temp_labels, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Save temporary labels in the symbol table. Note this may change .s semantics and shouldn't generally be used on compiler-generated code.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msgx", OPT_ID.OPT_msgx, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msha", OPT_ID.OPT_msha, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mshstk", OPT_ID.OPT_mshstk, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msign-ext", OPT_ID.OPT_msign_ext, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msimd128", OPT_ID.OPT_msimd128, OptionKind.FlagClass, OPT_ID.OPT_m_wasm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msingle-float", OPT_ID.OPT_msingle_float, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msmall-data-threshold=", OPT_ID.OPT_msmall_data_threshold_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_G, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msoft-float", OPT_ID.OPT_msoft_float, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use software floating point", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msse2", OPT_ID.OPT_msse2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msse3", OPT_ID.OPT_msse3, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msse4.1", OPT_ID.OPT_msse4_1, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msse4.2", OPT_ID.OPT_msse4_2, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msse4a", OPT_ID.OPT_msse4a, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msse4", OPT_ID.OPT_msse4, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_msse4_2, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "msse", OPT_ID.OPT_msse, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mssse3", OPT_ID.OPT_mssse3, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mstack-alignment=", OPT_ID.OPT_mstack_alignment, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set the stack alignment", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mstack-arg-probe", OPT_ID.OPT_mstack_arg_probe, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable stack probes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mstack-probe-size=", OPT_ID.OPT_mstack_probe_size, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Set the stack probe size", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mstackrealign", OPT_ID.OPT_mstackrealign, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Force realign the stack at entry to every function", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mstrict-align", OPT_ID.OPT_mstrict_align, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mno_unaligned_access, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, "Force all memory accesses to be aligned (same as mno-unaligned-access)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mt-migrate-directory", OPT_ID.OPT_mt_migrate_directory, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Directory for temporary files produced during ARC or ObjC migration", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mtbm", OPT_ID.OPT_mtbm, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "MTd", OPT_ID.OPT__SLASH_MTd, OptionKind.FlagClass, OPT_ID.OPT__SLASH_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Use static debug run-time", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mthread-model", OPT_ID.OPT_mthread_model, OptionKind.SeparateClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "The thread model to use, e.g. posix, single (posix by default)", null, "posix,single"));
            InfoTable.Add(new OptionInfo(prefix_1, "mthreads", OPT_ID.OPT_mthreads, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mthumb", OPT_ID.OPT_mthumb, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mtp=", OPT_ID.OPT_mtp_mode_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Read thread pointer from coprocessor register (ARM only)", null, "soft, cp15"));
            InfoTable.Add(new OptionInfo(prefix_1, "mtp", OPT_ID.OPT_mtp, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Mode for reading thread pointer", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mtune=", OPT_ID.OPT_mtune_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mtvos-simulator-version-min=", OPT_ID.OPT_mtvos_simulator_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mtvos-version-min=", OPT_ID.OPT_mtvos_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MT", OPT_ID.OPT_MT, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Specify name of main file output in depfile", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "MT", OPT_ID.OPT__SLASH_MT, OptionKind.FlagClass, OPT_ID.OPT__SLASH_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Use static run-time", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "muclibc", OPT_ID.OPT_muclibc, OptionKind.FlagClass, OPT_ID.OPT_m_libc_Group, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "multi_module", OPT_ID.OPT_multi__module, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "multiply_defined_unused", OPT_ID.OPT_multiply__defined__unused, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "multiply_defined", OPT_ID.OPT_multiply__defined, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "munaligned-access", OPT_ID.OPT_munaligned_access, OptionKind.FlagClass, OPT_ID.OPT_m_arm_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Allow memory accesses to be unaligned (AArch32/AArch64 only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "municode", OPT_ID.OPT_municode, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "munwind-tables", OPT_ID.OPT_munwind_tables, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate unwinding tables for all functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mv4", OPT_ID.OPT_mv4, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_mcpu_EQ, "hexagonv4\0", 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mv55", OPT_ID.OPT_mv55, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_mcpu_EQ, "hexagonv55\0", 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mv5", OPT_ID.OPT_mv5, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_mcpu_EQ, "hexagonv5\0", 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mv60", OPT_ID.OPT_mv60, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_mcpu_EQ, "hexagonv60\0", 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mv62", OPT_ID.OPT_mv62, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_mcpu_EQ, "hexagonv62\0", 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mv65", OPT_ID.OPT_mv65, OptionKind.FlagClass, OPT_ID.OPT_m_hexagon_Features_Group, OPT_ID.OPT_mcpu_EQ, "hexagonv65\0", 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mvaes", OPT_ID.OPT_mvaes, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mvpclmulqdq", OPT_ID.OPT_mvpclmulqdq, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mvsx", OPT_ID.OPT_mvsx, OptionKind.FlagClass, OPT_ID.OPT_m_ppc_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mvx", OPT_ID.OPT_mvx, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "MV", OPT_ID.OPT_MV, OptionKind.FlagClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Use NMake/Jom format for the depfile", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mwarn-nonportable-cfstrings", OPT_ID.OPT_mwarn_nonportable_cfstrings, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mwatchos-simulator-version-min=", OPT_ID.OPT_mwatchos_simulator_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mwatchos-version-min=", OPT_ID.OPT_mwatchos_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mwatchsimulator-version-min=", OPT_ID.OPT_mwatchsimulator_version_min_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_mwatchos_simulator_version_min_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mwindows", OPT_ID.OPT_mwindows, OptionKind.JoinedClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mx32", OPT_ID.OPT_mx32, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mx87", OPT_ID.OPT_mx87, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mxgot", OPT_ID.OPT_mxgot, OptionKind.FlagClass, OPT_ID.OPT_m_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mxnack", OPT_ID.OPT_mxnack, OptionKind.FlagClass, OPT_ID.OPT_m_amdgpu_Features_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Enable XNACK (AMDGPU only)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mxop", OPT_ID.OPT_mxop, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mxsavec", OPT_ID.OPT_mxsavec, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mxsaveopt", OPT_ID.OPT_mxsaveopt, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mxsaves", OPT_ID.OPT_mxsaves, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mxsave", OPT_ID.OPT_mxsave, OptionKind.FlagClass, OPT_ID.OPT_m_x86_Features_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "mzvector", OPT_ID.OPT_mzvector, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fzvector, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "M", OPT_ID.OPT_M, OptionKind.FlagClass, OPT_ID.OPT_M_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Like -MD, but also implies -E and writes to stdout by default", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "new-struct-path-tbaa", OPT_ID.OPT_new_struct_path_tbaa, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable enhanced struct-path aware Type Based Alias Analysis", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-canonical-prefixes", OPT_ID.OPT_no_canonical_prefixes, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, "Use relative instead of canonical paths", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-code-completion-globals", OPT_ID.OPT_no_code_completion_globals, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not include global declarations in code-completion results.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-code-completion-ns-level-decls", OPT_ID.OPT_no_code_completion_ns_level_decls, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not include declarations inside namespaces (incl. global namespace) in the code-completion results.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-cpp-precomp", OPT_ID.OPT_no_cpp_precomp, OptionKind.FlagClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-cuda-gpu-arch=", OPT_ID.OPT_no_cuda_gpu_arch_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Remove GPU architecture (e.g. sm_35) from the list of GPUs to compile for. 'all' resets the list to its default value.", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-cuda-noopt-device-debug", OPT_ID.OPT_no_cuda_noopt_device_debug, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-cuda-version-check", OPT_ID.OPT_no_cuda_version_check, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Don't error out if the detected version of the CUDA install is too low for the requested CUDA gpu architecture.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-emit-llvm-uselists", OPT_ID.OPT_no_emit_llvm_uselists, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Don't preserve order of LLVM use-lists when serializing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-finalize-removal", OPT_ID.OPT_migrator_no_finalize_removal, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not remove finalize method in gc mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-implicit-float", OPT_ID.OPT_no_implicit_float, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Don't generate implicit floating point instructions", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-integrated-as", OPT_ID.OPT_anonymous_25, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fno_integrated_as, null, (ushort)(ClangFlags.CC1Option | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "no-integrated-cpp", OPT_ID.OPT_no_integrated_cpp, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-line-commands", OPT_ID.OPT__no_line_commands, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_P, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-ns-alloc-error", OPT_ID.OPT_migrator_no_nsalloc_error, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not error on use of NSAllocateCollectable/NSReallocateCollectable", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "no-pedantic", OPT_ID.OPT_no_pedantic, OptionKind.FlagClass, OPT_ID.OPT_pedantic_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-pie", OPT_ID.OPT_no_pie, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_nopie, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-pthread", OPT_ID.OPT_no_pthread, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-standard-includes", OPT_ID.OPT__no_standard_includes, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_nostdinc, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-standard-libraries", OPT_ID.OPT__no_standard_libraries, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_nostdlib, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no-struct-path-tbaa", OPT_ID.OPT_no_struct_path_tbaa, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Turn off struct-path aware Type Based Alias Analysis", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-system-header-prefix=", OPT_ID.OPT_no_system_header_prefix, OptionKind.JoinedClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Treat all #include paths starting with <prefix> as not including a system header.", "<prefix>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-system-header-prefix", OPT_ID.OPT_anonymous_23, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_no_system_header_prefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-undefined", OPT_ID.OPT__no_undefined, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "no-warnings", OPT_ID.OPT__no_warnings, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_w, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "no_dead_strip_inits_and_terms", OPT_ID.OPT_no__dead__strip__inits__and__terms, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nobuiltininc", OPT_ID.OPT_nobuiltininc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Disable builtin #include directories", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nocpp", OPT_ID.OPT_nocpp, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nocudainc", OPT_ID.OPT_nocudainc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nocudalib", OPT_ID.OPT_nocudalib, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nodefaultlibs", OPT_ID.OPT_nodefaultlibs, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nofixprebinding", OPT_ID.OPT_nofixprebinding, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nolibc", OPT_ID.OPT_nolibc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "nologo", OPT_ID.OPT__SLASH_nologo, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nomultidefs", OPT_ID.OPT_nomultidefs, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nopie", OPT_ID.OPT_nopie, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "noprebind", OPT_ID.OPT_noprebind, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "noseglinkedit", OPT_ID.OPT_noseglinkedit, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nostartfiles", OPT_ID.OPT_nostartfiles, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nostdinc++", OPT_ID.OPT_nostdincxx, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable standard #include directories for the C++ standard library", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nostdinc", OPT_ID.OPT_nostdinc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nostdlib++", OPT_ID.OPT_nostdlibxx, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nostdlibinc", OPT_ID.OPT_nostdlibinc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nostdlib", OPT_ID.OPT_nostdlib, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "nostdsysteminc", OPT_ID.OPT_nostdsysteminc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Disable standard system #include directories", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "n", OPT_ID.OPT_n, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Don't automatically start assembly file with a text section", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "O0", OPT_ID.OPT_O0, OptionKind.FlagClass, OPT_ID.OPT_O_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "O0", OPT_ID.OPT__SLASH_O0, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_O0, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "O4", OPT_ID.OPT_O4, OptionKind.FlagClass, OPT_ID.OPT_O_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "ObjC++", OPT_ID.OPT_ObjCXX, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Treat source input files as Objective-C++ inputs", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objc-isystem", OPT_ID.OPT_objc_isystem, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add directory to the ObjC SYSTEM include search path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-atomic-property", OPT_ID.OPT_objcmt_atomic_property, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Make migration to 'atomic' properties", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-all", OPT_ID.OPT_objcmt_migrate_all, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to modern ObjC", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-annotation", OPT_ID.OPT_objcmt_migrate_annotation, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to property and method annotations", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-designated-init", OPT_ID.OPT_objcmt_migrate_designated_init, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-instancetype", OPT_ID.OPT_objcmt_migrate_instancetype, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to infer instancetype for method result type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-literals", OPT_ID.OPT_objcmt_migrate_literals, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to modern ObjC literals", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-ns-macros", OPT_ID.OPT_objcmt_migrate_nsmacros, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to NS_ENUM/NS_OPTIONS macros", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-property-dot-syntax", OPT_ID.OPT_objcmt_migrate_property_dot_syntax, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration of setter/getter messages to property-dot syntax", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-property", OPT_ID.OPT_objcmt_migrate_property, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to modern ObjC property", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-protocol-conformance", OPT_ID.OPT_objcmt_migrate_protocol_conformance, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to add protocol conformance on classes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-readonly-property", OPT_ID.OPT_objcmt_migrate_readonly_property, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to modern ObjC readonly property", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-readwrite-property", OPT_ID.OPT_objcmt_migrate_readwrite_property, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to modern ObjC readwrite property", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-migrate-subscripting", OPT_ID.OPT_objcmt_migrate_subscripting, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to modern ObjC subscripting", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-ns-nonatomic-iosonly", OPT_ID.OPT_objcmt_ns_nonatomic_iosonly, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-returns-innerpointer-property", OPT_ID.OPT_objcmt_returns_innerpointer_property, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable migration to annotate property with NS_RETURNS_INNER_POINTER", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-white-list-dir-path=", OPT_ID.OPT_anonymous_2, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_objcmt_whitelist_dir_path, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcmt-whitelist-dir-path=", OPT_ID.OPT_objcmt_whitelist_dir_path, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Only modify files with a filename contained in the provided directory path", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "objcxx-isystem", OPT_ID.OPT_objcxx_isystem, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Add directory to the ObjC++ SYSTEM include search path", "<directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "ObjC", OPT_ID.OPT_ObjC, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Treat source input files as Objective-C inputs", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "object", OPT_ID.OPT_object, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Od", OPT_ID.OPT__SLASH_Od, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_O0, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable optimization", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Ofast", OPT_ID.OPT_Ofast, OptionKind.JoinedClass, OPT_ID.OPT_O_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Og", OPT_ID.OPT__SLASH_Og, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Oi-", OPT_ID.OPT__SLASH_Oi_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_builtin, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable use of builtin functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Oi", OPT_ID.OPT__SLASH_Oi, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fbuiltin, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable use of builtin functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "openmp-", OPT_ID.OPT__SLASH_openmp_, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "openmp", OPT_ID.OPT__SLASH_openmp, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "opt-record-file", OPT_ID.OPT_opt_record_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "File name to use for YAML optimization record output", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "optimize=", OPT_ID.OPT__optimize_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_O, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "optimize", OPT_ID.OPT__optimize, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_O, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Os", OPT_ID.OPT__SLASH_Os, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_O, "s\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Optimize for size", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Ot", OPT_ID.OPT__SLASH_Ot, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_O, "2\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Optimize for speed", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "output-asm-variant", OPT_ID.OPT_output_asm_variant, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Select the asm variant index to use for output", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "output-class-directory=", OPT_ID.OPT__output_class_directory_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_foutput_class_dir_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "output-class-directory", OPT_ID.OPT__output_class_directory, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_foutput_class_dir_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "output=", OPT_ID.OPT__output_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_o, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "output", OPT_ID.OPT__output, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_o, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "O", OPT_ID.OPT_O_flag, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_O, "2\0", (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "O", OPT_ID.OPT_O, OptionKind.JoinedClass, OPT_ID.OPT_O_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "O", OPT_ID.OPT__SLASH_O, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Optimization level", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "o", OPT_ID.OPT_o, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.RenderAsInput | ClangFlags.CC1Option | ClangFlags.CC1AsOption), 0, "Write output to <file>", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "o", OPT_ID.OPT__SLASH_o, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set output file or directory (ends in / or \\)", "<file or directory>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "pagezero_size", OPT_ID.OPT_pagezero__size, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "param=", OPT_ID.OPT__param_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT__param, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "param", OPT_ID.OPT__param, OptionKind.SeparateClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "pass-exit-codes", OPT_ID.OPT_pass_exit_codes, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "pedantic-errors", OPT_ID.OPT_pedantic_errors, OptionKind.FlagClass, OPT_ID.OPT_pedantic_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "pedantic", OPT_ID.OPT_pedantic, OptionKind.FlagClass, OPT_ID.OPT_pedantic_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "permissive-", OPT_ID.OPT__SLASH_permissive_, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "pg", OPT_ID.OPT_pg, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable mcount instrumentation", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "pic-is-pie", OPT_ID.OPT_pic_is_pie, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "File is for a position independent executable", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "pic-level", OPT_ID.OPT_pic_level, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Value for __PIC__", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "pie", OPT_ID.OPT_pie, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "pipe", OPT_ID.OPT_pipe, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Use pipes between commands, when possible", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "plugin-arg-", OPT_ID.OPT_plugin_arg, OptionKind.JoinedAndSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Pass <arg> to plugin <name>", "<name> <arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "plugin", OPT_ID.OPT_plugin, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use the named plugin action instead of the default action (use \"help\" to list available options)", "<name>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "preamble-bytes=", OPT_ID.OPT_preamble_bytes_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Assume that the precompiled header is a precompiled preamble covering the first N bytes of the main file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "prebind_all_twolevel_modules", OPT_ID.OPT_prebind__all__twolevel__modules, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "prebind", OPT_ID.OPT_prebind, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "precompile", OPT_ID.OPT__precompile, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Only precompile the input", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "prefix=", OPT_ID.OPT__prefix_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_B, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "prefix", OPT_ID.OPT__prefix, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_B, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "preload", OPT_ID.OPT_preload, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "preprocess", OPT_ID.OPT__preprocess, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_E, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "print-decl-contexts", OPT_ID.OPT_print_decl_contexts, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Print DeclContexts and their Decls", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "print-diagnostic-categories", OPT_ID.OPT__print_diagnostic_categories, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-file-name=", OPT_ID.OPT_print_file_name_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Print the full library path of <file>", "<file>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "print-file-name", OPT_ID.OPT__print_file_name, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_print_file_name_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "print-ivar-layout", OPT_ID.OPT_print_ivar_layout, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable Objective-C Ivar layout bitmap print trace", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-libgcc-file-name", OPT_ID.OPT_print_libgcc_file_name, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Print the library path for the currently used compiler runtime library (\"libgcc.a\" or \"libclang_rt.builtins.*.a\")", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "print-missing-file-dependencies", OPT_ID.OPT__print_missing_file_dependencies, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_MG, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-multi-directory", OPT_ID.OPT_print_multi_directory, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-multi-lib", OPT_ID.OPT_print_multi_lib, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-multi-os-directory", OPT_ID.OPT_print_multi_os_directory, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "print-preamble", OPT_ID.OPT_print_preamble, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Print the \"preamble\" of a file, which is a candidate for implicit precompiled headers.", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-prog-name=", OPT_ID.OPT_print_prog_name_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Print the full program path of <name>", "<name>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "print-prog-name", OPT_ID.OPT__print_prog_name, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_print_prog_name_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-resource-dir", OPT_ID.OPT_print_resource_dir, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Print the resource directory pathname", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "print-search-dirs", OPT_ID.OPT_print_search_dirs, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Print the paths used for finding libraries and programs", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "print-stats", OPT_ID.OPT_print_stats, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Print performance metrics and statistics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "private_bundle", OPT_ID.OPT_private__bundle, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "profile-blocks", OPT_ID.OPT__profile_blocks, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_a, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "profile", OPT_ID.OPT__profile, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_p, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "pthreads", OPT_ID.OPT_pthreads, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "pthread", OPT_ID.OPT_pthread, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Support POSIX threads in generated code", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "ptxas-path=", OPT_ID.OPT_ptxas_path_EQ, OptionKind.JoinedClass, OPT_ID.OPT_i_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Path to ptxas (used for compiling CUDA code)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "P", OPT_ID.OPT_P, OptionKind.FlagClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Disable linemarker output in -E mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "P", OPT_ID.OPT__SLASH_P, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Preprocess to file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "p", OPT_ID.OPT_p, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Qfast_transcendentals", OPT_ID.OPT__SLASH_Qfast_transcendentals, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "QIfist", OPT_ID.OPT__SLASH_QIfist, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Qimprecise_fwaits", OPT_ID.OPT__SLASH_Qimprecise_fwaits, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Qn", OPT_ID.OPT_Qn, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Qpar", OPT_ID.OPT__SLASH_Qpar, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Qunused-arguments", OPT_ID.OPT_Qunused_arguments, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Don't emit warning for unused driver arguments", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Qvec-report", OPT_ID.OPT__SLASH_Qvec_report, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Qvec-", OPT_ID.OPT__SLASH_Qvec_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_vectorize, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable the loop vectorization passes", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Qvec", OPT_ID.OPT__SLASH_Qvec, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fvectorize, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable the loop vectorization passes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Q", OPT_ID.OPT_Q, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "rdynamic", OPT_ID.OPT_rdynamic, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "read_only_relocs", OPT_ID.OPT_read__only__relocs, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "relaxed-aliasing", OPT_ID.OPT_relaxed_aliasing, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Turn off Type Based Alias Analysis", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "relocatable-pch", OPT_ID.OPT_relocatable_pch, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Whether to build a relocatable precompiled header", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "remap-file", OPT_ID.OPT_remap_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Replace the contents of the <from> file with the contents of the <to> file", "<from>;<to>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "remap", OPT_ID.OPT_remap, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "resource-dir=", OPT_ID.OPT_resource_dir_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_resource_dir, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "resource-dir", OPT_ID.OPT_resource_dir, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option | ClangFlags.CoreOption | (int)DriverFlag.HelpHidden), 0, "The directory which holds the compiler resource files", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "resource=", OPT_ID.OPT__resource_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fcompile_resource_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "resource", OPT_ID.OPT__resource, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fcompile_resource_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "rewrite-legacy-objc", OPT_ID.OPT_rewrite_legacy_objc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Rewrite Legacy Objective-C source to C++", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "rewrite-macros", OPT_ID.OPT_rewrite_macros, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Expand macros without full preprocessing", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "rewrite-objc", OPT_ID.OPT_rewrite_objc, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Rewrite Objective-C source to C++", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "rewrite-test", OPT_ID.OPT_rewrite_test, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Rewriter playground", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Rpass-analysis=", OPT_ID.OPT_Rpass_analysis_EQ, OptionKind.JoinedClass, OPT_ID.OPT_R_value_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Report transformation analysis from optimization passes whose name matches the given POSIX regular expression", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Rpass-missed=", OPT_ID.OPT_Rpass_missed_EQ, OptionKind.JoinedClass, OPT_ID.OPT_R_value_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Report missed transformations by optimization passes whose name matches the given POSIX regular expression", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Rpass=", OPT_ID.OPT_Rpass_EQ, OptionKind.JoinedClass, OPT_ID.OPT_R_value_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Report transformations performed by optimization passes whose name matches the given POSIX regular expression", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "rpath", OPT_ID.OPT_rpath, OptionKind.SeparateClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "rsp-quoting=", OPT_ID.OPT_rsp_quoting, OptionKind.JoinedClass, OPT_ID.OPT_internal_driver_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, "Set the rsp quoting to either 'posix', or 'windows'", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "RTC", OPT_ID.OPT__SLASH_RTC, OptionKind.JoinedClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "rtlib=", OPT_ID.OPT_rtlib_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Compiler runtime library to use", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "rtlib", OPT_ID.OPT__rtlib, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_rtlib_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "R", OPT_ID.OPT_R_Joined, OptionKind.JoinedClass, OPT_ID.OPT_R_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable the specified remark", "<remark>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "r", OPT_ID.OPT_r, OptionKind.FlagClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput | ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "save-stats=", OPT_ID.OPT_save_stats_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Save llvm statistics.", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "save-stats", OPT_ID.OPT_save_stats, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_save_stats_EQ, "cwd\0", (ushort)(ClangFlags.DriverOption), 0, "Save llvm statistics.", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "save-temps=", OPT_ID.OPT_save_temps_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Save intermediate compilation results.", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "save-temps", OPT_ID.OPT_save_temps, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_save_temps_EQ, "cwd\0", (ushort)(ClangFlags.DriverOption), 0, "Save intermediate compilation results", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "sdl-", OPT_ID.OPT__SLASH_sdl_, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "sdl", OPT_ID.OPT__SLASH_sdl, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "sectalign", OPT_ID.OPT_sectalign, OptionKind.MultiArgClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 3, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "sectcreate", OPT_ID.OPT_sectcreate, OptionKind.MultiArgClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 3, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "sectobjectsymbols", OPT_ID.OPT_sectobjectsymbols, OptionKind.MultiArgClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 2, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "sectorder", OPT_ID.OPT_sectorder, OptionKind.MultiArgClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 3, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "seg1addr", OPT_ID.OPT_seg1addr, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "seg_addr_table_filename", OPT_ID.OPT_seg__addr__table__filename, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "seg_addr_table", OPT_ID.OPT_seg__addr__table, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "segaddr", OPT_ID.OPT_segaddr, OptionKind.MultiArgClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 2, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "segcreate", OPT_ID.OPT_segcreate, OptionKind.MultiArgClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 3, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "seglinkedit", OPT_ID.OPT_seglinkedit, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "segprot", OPT_ID.OPT_segprot, OptionKind.MultiArgClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 3, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "segs_read_only_addr", OPT_ID.OPT_segs__read__only__addr, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "segs_read_write_addr", OPT_ID.OPT_segs__read__write__addr, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "segs_read_", OPT_ID.OPT_segs__read__, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "serialize-diagnostic-file", OPT_ID.OPT_diagnostic_serialized_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "File for serializing diagnostics in a binary format", "<filename>", null));
            InfoTable.Add(new OptionInfo(prefix_4, "serialize-diagnostics", OPT_ID.OPT__serialize_diags, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Serialize compiler diagnostics to a file", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "shared-libasan", OPT_ID.OPT_anonymous_3, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_shared_libsan, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "shared-libgcc", OPT_ID.OPT_shared_libgcc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "shared-libsan", OPT_ID.OPT_shared_libsan, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "shared", OPT_ID.OPT_shared, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "show-encoding", OPT_ID.OPT_show_encoding, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Show instruction encoding information in transliterate mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "show-includes", OPT_ID.OPT_show_includes, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Print cl.exe style /showIncludes to stdout", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "show-inst", OPT_ID.OPT_show_inst, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Show internal instruction representation in transliterate mode", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "showIncludes", OPT_ID.OPT__SLASH_showIncludes, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_show_includes, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Print info about included files to stderr", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "signed-char", OPT_ID.OPT__signed_char, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_fsigned_char, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "single_module", OPT_ID.OPT_single__module, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "source-charset:", OPT_ID.OPT__SLASH_source_charset, OptionKind.JoinedClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_finput_charset_EQ, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Source encoding, supports only UTF-8", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "specs=", OPT_ID.OPT_specs_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "specs", OPT_ID.OPT_specs, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "split-dwarf-file", OPT_ID.OPT_split_dwarf_file, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "File name to use for split dwarf debug info output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "split-dwarf", OPT_ID.OPT_split_dwarf, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Split out the dwarf .dwo sections", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "split-stacks", OPT_ID.OPT_split_stacks, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Try to use a split stack if possible.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "stack-protector-buffer-size", OPT_ID.OPT_stack_protector_buffer_size, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Lower bound for a buffer to be considered for stack protection", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "stack-protector", OPT_ID.OPT_stack_protector, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Enable stack protectors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "static-define", OPT_ID.OPT_static_define, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Should __STATIC__ be defined", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "static-libgcc", OPT_ID.OPT_static_libgcc, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "static-libgfortran", OPT_ID.OPT_static_libgfortran, OptionKind.FlagClass, OPT_ID.OPT_gfortran_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "static-libsan", OPT_ID.OPT_static_libsan, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "static-libstdc++", OPT_ID.OPT_static_libstdcxx, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "static", OPT_ID.OPT_static, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "stats-file=", OPT_ID.OPT_stats_file, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Filename to write statistics to", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "std-default=", OPT_ID.OPT_std_default_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "std:", OPT_ID.OPT__SLASH_std, OptionKind.JoinedClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Language standard to compile for", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "std=", OPT_ID.OPT_std_EQ, OptionKind.JoinedClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Language standard to compile for", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "stdlib=", OPT_ID.OPT_stdlib_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "C++ standard library to use", null, "libc++,libstdc++,platform"));
            InfoTable.Add(new OptionInfo(prefix_3, "stdlib", OPT_ID.OPT__stdlib, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_stdlib_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "std", OPT_ID.OPT__std, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_std_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "sub_library", OPT_ID.OPT_sub__library, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "sub_umbrella", OPT_ID.OPT_sub__umbrella, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "sys-header-deps", OPT_ID.OPT_sys_header_deps, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Include system headers in dependency output", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "sysroot=", OPT_ID.OPT__sysroot_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "sysroot", OPT_ID.OPT__sysroot, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT__sysroot_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "system-header-prefix=", OPT_ID.OPT_system_header_prefix, OptionKind.JoinedClass, OPT_ID.OPT_clang_i_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Treat all #include paths starting with <prefix> as including a system header.", "<prefix>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "system-header-prefix", OPT_ID.OPT_anonymous_22, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_system_header_prefix, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "S", OPT_ID.OPT_S, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Only run preprocess and compilation steps", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "s", OPT_ID.OPT_s, OptionKind.FlagClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "target-abi", OPT_ID.OPT_target_abi, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Target a particular ABI type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "target-cpu", OPT_ID.OPT_target_cpu, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Target a specific cpu type", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "target-feature", OPT_ID.OPT_target_feature, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Target specific attributes", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "target-help", OPT_ID.OPT__target_help, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "target-linker-version", OPT_ID.OPT_target_linker_version, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Target linker version", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "target=", OPT_ID.OPT_target, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Generate code for the given target", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "target", OPT_ID.OPT_target_legacy_spelling, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_target, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Tbss", OPT_ID.OPT_Tbss, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_T_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Set starting address of BSS to <addr>", "<addr>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "TC", OPT_ID.OPT__SLASH_TC, OptionKind.FlagClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Treat all source files as C", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Tc", OPT_ID.OPT__SLASH_Tc, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Specify a C source file", "<filename>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Tdata", OPT_ID.OPT_Tdata, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_T_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Set starting address of DATA to <addr>", "<addr>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "templight-dump", OPT_ID.OPT_templight_dump, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Dump templight information to stdout", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "test-coverage", OPT_ID.OPT_test_coverage, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Do not generate coverage files or remove coverage changes from IR", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "time", OPT_ID.OPT_time, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Time individual commands", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "token-cache", OPT_ID.OPT_token_cache, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Use specified token cache file", "<path>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "TP", OPT_ID.OPT__SLASH_TP, OptionKind.FlagClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Treat all source files as C++", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Tp", OPT_ID.OPT__SLASH_Tp, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_compile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Specify a C++ source file", "<filename>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "trace-includes", OPT_ID.OPT__trace_includes, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_H, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "traditional-cpp", OPT_ID.OPT_traditional_cpp, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable some traditional CPP emulation", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "traditional", OPT_ID.OPT_traditional, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "trigraphs", OPT_ID.OPT_trigraphs, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_ftrigraphs, null, 0, 0, "Process trigraph sequences", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "trim-egraph", OPT_ID.OPT_trim_egraph, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Only show error-related paths in the analysis graph", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "triple=", OPT_ID.OPT_triple_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_triple, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "triple", OPT_ID.OPT_triple, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Specify target triple (e.g. i686-apple-darwin9)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Ttext", OPT_ID.OPT_Ttext, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_T_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Set starting address of TEXT to <addr>", "<addr>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "twolevel_namespace_hints", OPT_ID.OPT_twolevel__namespace__hints, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "twolevel_namespace", OPT_ID.OPT_twolevel__namespace, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "T", OPT_ID.OPT_T, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_T_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Specify <script> as linker script", "<script>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "t", OPT_ID.OPT_t, OptionKind.FlagClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "umbrella", OPT_ID.OPT_umbrella, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "undefine-macro=", OPT_ID.OPT__undefine_macro_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_U, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "undefine-macro", OPT_ID.OPT__undefine_macro, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_U, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "undefined", OPT_ID.OPT_undefined, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_u_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "undef", OPT_ID.OPT_undef, OptionKind.FlagClass, OPT_ID.OPT_u_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "undef all system defines", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "unexported_symbols_list", OPT_ID.OPT_unexported__symbols__list, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "unoptimized-cfg", OPT_ID.OPT_analysis_UnoptimizedCFG, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Generate unoptimized CFGs for all analyses", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "unsigned-char", OPT_ID.OPT__unsigned_char, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_funsigned_char, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "user-dependencies", OPT_ID.OPT__user_dependencies, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_MM, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "utf-8", OPT_ID.OPT__SLASH_utf8, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Set source and runtime encoding to UTF-8 (default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "U", OPT_ID.OPT_U, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Undefine macro <macro>", "<macro>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "U", OPT_ID.OPT__SLASH_U, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_U, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Undefine macro", "<macro>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "u", OPT_ID.OPT_u, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_u_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "u", OPT_ID.OPT__SLASH_u, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "validate-charset-", OPT_ID.OPT__SLASH_validate_charset_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "no-invalid-source-encoding\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "validate-charset", OPT_ID.OPT__SLASH_validate_charset, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "invalid-source-encoding\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "vd", OPT_ID.OPT__SLASH_vd, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_vtordisp_mode_EQ, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Control vtordisp placement", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "vectorize-loops", OPT_ID.OPT_vectorize_loops, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Run the Loop vectorization passes", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "vectorize-slp", OPT_ID.OPT_vectorize_slp, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Run the SLP vectorization passes", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "verbose", OPT_ID.OPT__verbose, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_v, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "verify-debug-info", OPT_ID.OPT_verify_debug_info, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, "Verify the binary representation of debug output", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "verify-ignore-unexpected=", OPT_ID.OPT_verify_ignore_unexpected_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Ignore unexpected diagnostic messages", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "verify-ignore-unexpected", OPT_ID.OPT_verify_ignore_unexpected, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Ignore unexpected diagnostic messages", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "verify-pch", OPT_ID.OPT_verify_pch, OptionKind.FlagClass, OPT_ID.OPT_Action_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Load and verify that a pre-compiled header file is not stale", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "verify=", OPT_ID.OPT_verify_EQ, OptionKind.CommaJoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Verify diagnostic output using comment directives that start with prefixes in the comma-separated sequence <prefixes>", "<prefixes>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "verify", OPT_ID.OPT_verify, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Equivalent to -verify=expected", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "version", OPT_ID.OPT__version, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CoreOption | ClangFlags.CC1Option), 0, "Print version information", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "version", OPT_ID.OPT_version, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CC1AsOption | ClangFlags.NoDriverOption), 0, "Print the compiler version", null, null));
            InfoTable.Add(new OptionInfo(prefix_4, "via-file-asm", OPT_ID.OPT_via_file_asm, OptionKind.FlagClass, OPT_ID.OPT_internal_debug_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | (int)DriverFlag.HelpHidden | ClangFlags.CoreOption), 0, "Write assembly to file for input to assemble jobs", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "vmb", OPT_ID.OPT__SLASH_vmb, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Use a best-case representation method for member pointers", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "vmg", OPT_ID.OPT__SLASH_vmg, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Use a most-general representation for member pointers", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "vmm", OPT_ID.OPT__SLASH_vmm, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set the default most-general representation to multiple inheritance", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "vms", OPT_ID.OPT__SLASH_vms, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set the default most-general representation to single inheritance", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "vmv", OPT_ID.OPT__SLASH_vmv, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set the default most-general representation to virtual inheritance", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "volatile:iso", OPT_ID.OPT__SLASH_volatile_iso, OptionKind.FlagClass, OPT_ID.OPT__SLASH_volatile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Volatile loads and stores have standard semantics", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "volatile:ms", OPT_ID.OPT__SLASH_volatile_ms, OptionKind.FlagClass, OPT_ID.OPT__SLASH_volatile_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, "Volatile loads and stores have acquire and release semantics", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "vtordisp-mode=", OPT_ID.OPT_vtordisp_mode_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Control vtordisp placement on win32 targets", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "V", OPT_ID.OPT_V, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "V", OPT_ID.OPT__SLASH_V, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "v", OPT_ID.OPT_v, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Show commands to run and use verbose output", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "W0", OPT_ID.OPT__SLASH_W0, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_w, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable all warnings", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "W1", OPT_ID.OPT__SLASH_W1, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_Wall, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable -Wall", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "W2", OPT_ID.OPT__SLASH_W2, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_Wall, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable -Wall", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "W3", OPT_ID.OPT__SLASH_W3, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_Wall, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable -Wall", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "W4", OPT_ID.OPT__SLASH_W4, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_WCL4, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable -Wall and -Wextra", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wa,", OPT_ID.OPT_Wa_COMMA, OptionKind.CommaJoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Pass the comma separated arguments in <arg> to the assembler", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wall", OPT_ID.OPT_Wall, OptionKind.FlagClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Wall", OPT_ID.OPT__SLASH_Wall, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "everything\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable -Weverything", null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "warn-=", OPT_ID.OPT__warn__EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_W_Joined, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "warn-", OPT_ID.OPT__warn_, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_W_Joined, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "WCL4", OPT_ID.OPT_WCL4, OptionKind.FlagClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "wd4005", OPT_ID.OPT__SLASH_wd4005, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "no-macro-redefined\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "wd4018", OPT_ID.OPT__SLASH_wd4018, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "no-sign-compare\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "wd4100", OPT_ID.OPT__SLASH_wd4100, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "no-unused-parameter\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "wd4910", OPT_ID.OPT__SLASH_wd4910, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "no-dllexport-explicit-instantiation-decl\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "wd4996", OPT_ID.OPT__SLASH_wd4996, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "no-deprecated-declarations\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wdeprecated", OPT_ID.OPT_Wdeprecated, OptionKind.FlagClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Enable warnings for deprecated constructs and define __DEPRECATED", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "weak-l", OPT_ID.OPT_weak_l, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "weak_framework", OPT_ID.OPT_weak__framework, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "weak_library", OPT_ID.OPT_weak__library, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "weak_reference_mismatches", OPT_ID.OPT_weak__reference__mismatches, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wframe-larger-than=", OPT_ID.OPT_Wframe_larger_than_EQ, OptionKind.JoinedClass, OPT_ID.OPT_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "whatsloaded", OPT_ID.OPT_whatsloaded, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "whyload", OPT_ID.OPT_whyload, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wl,", OPT_ID.OPT_Wl_COMMA, OptionKind.CommaJoinedClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput | (int)DriverFlag.RenderAsInput), 0, "Pass the comma separated arguments in <arg> to the linker", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wlarge-by-value-copy=", OPT_ID.OPT_Wlarge_by_value_copy_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wlarge-by-value-copy", OPT_ID.OPT_Wlarge_by_value_copy_def, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, "Warn if a function definition returns or accepts an object larger in bytes than a given value", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wlarger-than-", OPT_ID.OPT_Wlarger_than_, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_Wlarger_than_EQ, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wlarger-than=", OPT_ID.OPT_Wlarger_than_EQ, OptionKind.JoinedClass, OPT_ID.OPT_clang_ignored_f_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Ignored), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "WL", OPT_ID.OPT__SLASH_WL, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wno-deprecated", OPT_ID.OPT_Wno_deprecated, OptionKind.FlagClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wno-nonportable-cfstrings", OPT_ID.OPT_Wno_nonportable_cfstrings, OptionKind.JoinedClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wno-rewrite-macros", OPT_ID.OPT_Wno_rewrite_macros, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.NoDriverOption), 0, "Silence ObjC rewriting warnings", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wno-write-strings", OPT_ID.OPT_Wno_write_strings, OptionKind.FlagClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wnonportable-cfstrings", OPT_ID.OPT_Wnonportable_cfstrings, OptionKind.JoinedClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "working-directory=", OPT_ID.OPT_working_directory_EQ, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_working_directory, null, (ushort)(ClangFlags.CC1Option), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "working-directory", OPT_ID.OPT_working_directory, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Resolve file paths relative to the specified directory", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wp,", OPT_ID.OPT_Wp_COMMA, OptionKind.CommaJoinedClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Pass the comma separated arguments in <arg> to the preprocessor", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "Wp64", OPT_ID.OPT__SLASH_Wp64, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "write-dependencies", OPT_ID.OPT__write_dependencies, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_MD, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "write-user-dependencies", OPT_ID.OPT__write_user_dependencies, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_MMD, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Wwrite-strings", OPT_ID.OPT_Wwrite_strings, OptionKind.FlagClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "WX-", OPT_ID.OPT__SLASH_WX_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "no-error\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Do not treat warnings as errors", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "WX", OPT_ID.OPT__SLASH_WX, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "error\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Treat warnings as errors", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "W", OPT_ID.OPT_W_Joined, OptionKind.JoinedClass, OPT_ID.OPT_W_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option | ClangFlags.CoreOption), 0, "Enable the specified warning", "<warning>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "w", OPT_ID.OPT_w, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CC1Option), 0, "Suppress all warnings", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "w", OPT_ID.OPT__SLASH_w_flag, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_w, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable all warnings", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "w", OPT_ID.OPT__SLASH_w, OptionKind.JoinedClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xanalyzer", OPT_ID.OPT_Xanalyzer, OptionKind.SeparateClass, OPT_ID.OPT_StaticAnalyzer_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Pass <arg> to the static analyzer", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xarch_", OPT_ID.OPT_Xarch__, OptionKind.JoinedAndSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xassembler", OPT_ID.OPT_Xassembler, OptionKind.SeparateClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Pass <arg> to the assembler", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xclang", OPT_ID.OPT_Xclang, OptionKind.SeparateClass, OPT_ID.OPT_CompileOnly_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, "Pass <arg> to the clang compiler", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xcuda-fatbinary", OPT_ID.OPT_Xcuda_fatbinary, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Pass <arg> to fatbinary invocation", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xcuda-ptxas", OPT_ID.OPT_Xcuda_ptxas, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Pass <arg> to the ptxas assembler", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xlinker", OPT_ID.OPT_Xlinker, OptionKind.SeparateClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput | (int)DriverFlag.RenderAsInput), 0, "Pass <arg> to the linker", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xopenmp-target=", OPT_ID.OPT_Xopenmp_target_EQ, OptionKind.JoinedAndSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Pass <arg> to the target offloading toolchain identified by <triple>.", "<triple> <arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xopenmp-target", OPT_ID.OPT_Xopenmp_target, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, "Pass <arg> to the target offloading toolchain.", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "Xpreprocessor", OPT_ID.OPT_Xpreprocessor, OptionKind.SeparateClass, OPT_ID.OPT_Preprocessor_Group, OPT_ID.OPT_INVALID, null, 0, 0, "Pass <arg> to the preprocessor", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "X", OPT_ID.OPT_X_Flag, OptionKind.FlagClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "X", OPT_ID.OPT_X_Joined, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)((int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "X", OPT_ID.OPT__SLASH_X, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_nostdlibinc, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Don't add %INCLUDE% to the include search path", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "x", OPT_ID.OPT_x, OptionKind.JoinedOrSeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CC1Option), 0, "Treat subsequent input files as having type <language>", "<language>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "Y-", OPT_ID.OPT__SLASH_Y_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable precompiled headers, overrides /Yc and /Yu", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Yc", OPT_ID.OPT__SLASH_Yc, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Generate a pch file for all code up to and including <filename>", "<filename>", null));
            InfoTable.Add(new OptionInfo(prefix_2, "Yd", OPT_ID.OPT__SLASH_Yd, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Yl", OPT_ID.OPT__SLASH_Yl, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Yu", OPT_ID.OPT__SLASH_Yu, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Load a pch file and use it instead of all code up to and including <filename>", "<filename>", null));
            InfoTable.Add(new OptionInfo(prefix_1, "y", OPT_ID.OPT_y, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Z-reserved-lib-cckext", OPT_ID.OPT_Z_reserved_lib_cckext, OptionKind.FlagClass, OPT_ID.OPT_reserved_lib_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput | ClangFlags.NoArgumentUnused | ClangFlags.Unsupported | ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Z-reserved-lib-stdc++", OPT_ID.OPT_Z_reserved_lib_stdcxx, OptionKind.FlagClass, OPT_ID.OPT_reserved_lib_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput | ClangFlags.NoArgumentUnused | ClangFlags.Unsupported | ClangFlags.Unsupported), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Z-Xlinker-no-demangle", OPT_ID.OPT_Z_Xlinker__no_demangle, OptionKind.FlagClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported | ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Z7", OPT_ID.OPT__SLASH_Z7, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable CodeView debug information in object files", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Za", OPT_ID.OPT__SLASH_Za, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:auto", OPT_ID.OPT__SLASH_Zc_auto, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:forScope", OPT_ID.OPT__SLASH_Zc_forScope, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:inline", OPT_ID.OPT__SLASH_Zc_inline, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:rvalueCast", OPT_ID.OPT__SLASH_Zc_rvalueCast, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:sizedDealloc-", OPT_ID.OPT__SLASH_Zc_sizedDealloc_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_sized_deallocation, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable C++14 sized global deallocation functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:sizedDealloc", OPT_ID.OPT__SLASH_Zc_sizedDealloc, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fsized_deallocation, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable C++14 sized global deallocation functions", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:strictStrings", OPT_ID.OPT__SLASH_Zc_strictStrings, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_W_Joined, "error=c++11-compat-deprecated-writable-strings\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Treat string literals as const", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:ternary", OPT_ID.OPT__SLASH_Zc_ternary, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:threadSafeInit-", OPT_ID.OPT__SLASH_Zc_threadSafeInit_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_threadsafe_statics, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable thread-safe initialization of static variables", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:threadSafeInit", OPT_ID.OPT__SLASH_Zc_threadSafeInit, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fthreadsafe_statics, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable thread-safe initialization of static variables", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:trigraphs-", OPT_ID.OPT__SLASH_Zc_trigraphs_off, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_trigraphs, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable trigraphs (default)", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:trigraphs", OPT_ID.OPT__SLASH_Zc_trigraphs, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_ftrigraphs, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable trigraphs", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:twoPhase-", OPT_ID.OPT__SLASH_Zc_twoPhase_, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fdelayed_template_parsing, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Disable two-phase name lookup in templates", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:twoPhase", OPT_ID.OPT__SLASH_Zc_twoPhase, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fno_delayed_template_parsing, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Enable two-phase name lookup in templates", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:wchar_t", OPT_ID.OPT__SLASH_Zc_wchar_t, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zc:", OPT_ID.OPT__SLASH_Zc, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zd", OPT_ID.OPT__SLASH_Zd, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Emit debug line number tables only", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Ze", OPT_ID.OPT__SLASH_Ze, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zg", OPT_ID.OPT__SLASH_Zg, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "ZI", OPT_ID.OPT__SLASH_ZI, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zi", OPT_ID.OPT__SLASH_Zi, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT__SLASH_Z7, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Alias for /Z7. Does not produce PDBs.", null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Zlinker-input", OPT_ID.OPT_Zlinker_input, OptionKind.SeparateClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported | ClangFlags.NoArgumentUnused), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zl", OPT_ID.OPT__SLASH_Zl, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Don't mention any default libraries in the object file", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zm", OPT_ID.OPT__SLASH_Zm, OptionKind.JoinedClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | (int)DriverFlag.HelpHidden), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zo-", OPT_ID.OPT__SLASH_Zo_, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zo", OPT_ID.OPT__SLASH_Zo, OptionKind.FlagClass, OPT_ID.OPT_cl_ignored_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zp", OPT_ID.OPT__SLASH_Zp_flag, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fpack_struct_EQ, "1\0", (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Set the default maximum struct packing alignment to 1", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zp", OPT_ID.OPT__SLASH_Zp, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fpack_struct_EQ, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Specify the default maximum struct packing alignment", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "Zs", OPT_ID.OPT__SLASH_Zs, OptionKind.FlagClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_fsyntax_only, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, "Syntax-check only", null, null));
            InfoTable.Add(new OptionInfo(prefix_2, "ZW", OPT_ID.OPT__SLASH_ZW, OptionKind.JoinedClass, OPT_ID.OPT_cl_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.CLOption | ClangFlags.DriverOption | ClangFlags.CLOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Z", OPT_ID.OPT_Z_Flag, OptionKind.FlagClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "Z", OPT_ID.OPT_Z_Joined, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, 0, 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_1, "z", OPT_ID.OPT_z, OptionKind.SeparateClass, OPT_ID.OPT_Link_Group, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.LinkerInput | (int)DriverFlag.RenderAsInput), 0, "Pass -z <arg> to the linker", "<arg>", null));
            InfoTable.Add(new OptionInfo(prefix_3, "", OPT_ID.OPT__DASH_DASH, OptionKind.RemainingArgsClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.DriverOption | ClangFlags.CoreOption), 0, null, null, null));
            InfoTable.Add(new OptionInfo(prefix_3, "", OPT_ID.OPT__, OptionKind.JoinedClass, OPT_ID.OPT_INVALID, OPT_ID.OPT_INVALID, null, (ushort)(ClangFlags.Unsupported), 0, null, null, null));
        }

        string[] Args = {
                "-D", "__CUDA_ARCH__=520",
                "-nologo",
                "-E",
                "-TP",
                "-DCUDA_DOUBLE_MATH_FUNCTIONS",
                "-D__CUDACC__",
                "-D__NVCC__",
                "-D__CUDACC_DEBUG__",
                "-D__CUDACC_EXTENDED_LAMBDA__",
                "-D__CUDACC_RELAXED_CONSTEXPR__",
                "-fms-compatibility",
                "-fms-compatibility-version=19.13.26128",
                "/std:c++14",
                "/EHsc",
                "/W0",
                "/nologo",
                "/Od",
                "/FS",
                "/Zi",
                "/RTC1",
                "/MTd",
                "-I\"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/include\"",
                "-I\"C:/Program Files (x86)/Microsoft Visual Studio 14.0/VC/atlmfc/include\"",
                "-I\"C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/ucrt\"",
                "-I\"C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/um\"",
                "-I\"C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/shared\"",
                "-I\"C:/Program Files (x86)/Windows Kits/10/Include/10.0.16299.0/winrt\"",
                "-I\"C:/Program Files (x86)/Windows Kits/NETFXSDK/4.7.1/Include/um\"",
                "-I\"./\"",
                "-I\"../../common/inc\"",
                "-I\"./\"",
                "-I\"C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v9.1//include\"",
                "-I\"../../common/inc\"",
                "-IC:\\PROGRA~1\\NVIDIA~2\\CUDA\\v9.1\\bin/../include\"",
                "-D \"__CUDACC_VER_BUILD__=85\"",
                "-D \"__CUDACC_VER_MINOR__=1\"",
                "-D \"__CUDACC_VER_MAJOR__=9\"",
                "-D \"_WIN32\"",
                "-D \"_WIN64\"",
                "-D \"_NDEBUG\"",
                "-D \"_MBCS\"",
                "-D \"_MBCS\"",
                "-FI \"cuda_runtime.h\"",
                "-EHsc",
                "-Zi",
                "\"C:/ProgramData/NVIDIA Corporation/CUDA Samples/v9.1/0_Simple/matrixMul/matrixMul.cpp\""
        };

        [TestMethod]
        public void TestOptionParsing()
        {
            OptionTable T = new OptionTable(InfoTable);

            InputArgumentList al = T.ParseArgs(Args,
                                               out int missingArgIndex,
                                               out int missingArgCount);

            Assert.IsTrue(al.HasArg(OPT_ID.OPT_D));
            Assert.IsTrue(al.HasArg(T.GetOptionAlias(OPT_ID.OPT__SLASH_D)));
            
            var defines = al.GetAllArgValues(T.GetOptionAlias(OPT_ID.OPT__SLASH_D));

            Assert.IsTrue(al.HasArg(OPT_ID.OPT_E));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_TP));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_nologo));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT_fms_compatibility));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT_fms_compatibility_version));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_std));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_EH));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_FS));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_RTC));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_MTd));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT_I));

            Assert.IsTrue(al.HasArg(OPT_ID.OPT_w));
            Assert.IsTrue(al.HasArg(T.GetOptionAlias(OPT_ID.OPT__SLASH_Od)));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT__SLASH_Z7));
            Assert.IsTrue(al.HasArg(T.GetOptionAlias(OPT_ID.OPT__SLASH_Zi)));
            Assert.IsTrue(al.HasArg(OPT_ID.OPT_include));
            Assert.IsTrue(al.HasArg(T.GetOptionAlias(OPT_ID.OPT__SLASH_FI)));
        }
    }
}